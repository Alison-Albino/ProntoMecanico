{"file_contents":{"design_guidelines.md":{"content":"# Design Guidelines for Pronto Mecânico\n\n## Design Approach\n**Selected Approach:** Reference-Based Design inspired by modern service platforms like Uber, Rappi, and iFood, combined with emergency service applications. The design prioritizes utility and real-time functionality while maintaining visual appeal for both customer trust and professional credibility.\n\n## Core Design Principles\n- **Reliability First:** Clean, professional interface that instills confidence in emergency situations\n- **Real-time Clarity:** Clear visual indicators for status updates, location tracking, and live communications\n- **Dual-User Experience:** Seamless interface adaptation for customers vs. service providers\n- **Mobile-First:** Optimized for on-the-go usage with large touch targets and clear hierarchy\n\n## Color Palette\n\n### Dark Mode Primary\n- **Background:** 220 15% 8% (deep charcoal)\n- **Surface:** 220 12% 12% (elevated dark gray)\n- **Primary Brand:** 200 100% 50% (vibrant blue - trustworthy and professional)\n- **Secondary:** 220 8% 85% (light gray text)\n\n### Status Colors\n- **Success/Available:** 120 60% 45% (professional green)\n- **Warning/In Transit:** 35 100% 55% (amber)\n- **Emergency/Urgent:** 0 75% 55% (red)\n- **Accent:** 280 60% 60% (subtle purple for notifications)\n\n## Typography\n**Primary Font:** Inter or Roboto via Google Fonts\n- **Headers:** 600-700 weight for trust and authority\n- **Body:** 400-500 weight for readability\n- **Small Text:** 400 weight for secondary information\n- **Scale:** 14px base with 1.125 ratio for mobile optimization\n\n## Layout System\n**Tailwind Spacing:** Use units of 2, 4, 6, and 8 for consistent rhythm\n- **Container:** Max-width with responsive padding\n- **Cards:** Consistent 4-6 unit padding with 2 unit radius\n- **Buttons:** 3-4 unit vertical padding for touch-friendly targets\n\n## Component Library\n\n### Navigation\n- **Mobile:** Bottom tab bar with 4-5 primary actions\n- **Desktop:** Top horizontal navigation with user profile dropdown\n- **Emergency Button:** Always-visible prominent CTA in brand color\n\n### Service Request Cards\n- **Layout:** Clean card design with clear service type icons\n- **Status Indicators:** Color-coded progress bars and status badges\n- **Provider Info:** Avatar, rating, and estimated arrival time\n- **Map Integration:** Embedded mini-map with real-time location\n\n### Chat Interface\n- **Bubble Design:** Rounded message bubbles with sender differentiation\n- **Timestamps:** Subtle, right-aligned time indicators\n- **Status Indicators:** Message delivery and read receipts\n- **Quick Actions:** Pre-defined response buttons for common updates\n\n### Dashboard (Provider View)\n- **Available Calls:** List view with distance, pay rate, and urgency indicators\n- **Active Jobs:** Prominent current job card with navigation and communication tools\n- **Status Controls:** Large, clear buttons for job status updates\n\n## Real-time Elements\n- **Live Location:** Animated vehicle icons with smooth movement\n- **Status Updates:** Subtle animations for state changes\n- **Notifications:** Non-intrusive toast notifications with sound toggle\n- **Chat Indicators:** Typing indicators and unread message badges\n\n## Images\n- **Hero Section:** Professional mechanic/tow truck imagery (not too large - single viewport height)\n- **Service Icons:** Clear, recognizable icons for different service types\n- **Provider Avatars:** Circular profile images with online status indicators\n- **Empty States:** Friendly illustrations for no active services or messages\n\n## Responsive Behavior\n- **Mobile:** Single-column layout with slide-up modals for details\n- **Tablet:** Two-column layout with sidebar for navigation\n- **Desktop:** Three-column layout with dedicated chat panel\n\n## Accessibility & Dark Mode\n- **Contrast:** Ensure WCAG AA compliance with high contrast ratios\n- **Focus States:** Clear focus indicators for keyboard navigation\n- **Text Size:** Scalable typography for various reading preferences\n- **Color Independence:** Icons and status indicators don't rely solely on color\n\nThe design should feel professional yet approachable, instilling confidence during stressful breakdown situations while providing efficient tools for service providers to manage their work effectively.","size_bytes":4247},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Pronto Mecânico\n\n## Overview\n\nPronto Mecânico is a mobile-first emergency automotive service platform that connects vehicle owners with mechanics and tow truck operators in real-time. The application provides a dual-sided marketplace where clients can request emergency services (mechanics, tow trucks) and service providers can accept and fulfill these requests. The platform features real-time location tracking, live chat communication, integrated payments via Stripe, and a wallet system for service providers.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack:**\n- React with TypeScript for type safety\n- Vite as the build tool and development server\n- Wouter for client-side routing (lightweight alternative to React Router)\n- TanStack Query (React Query) for server state management\n- shadcn/ui component library built on Radix UI primitives\n- Tailwind CSS for styling with a custom dark-mode-first design system\n\n**Design System:**\n- Dark mode primary with custom color palette inspired by service platforms like Uber and Rappi\n- Mobile-first responsive design with bottom tab navigation\n- Custom theme system using CSS variables for dynamic theming\n- Component library follows the \"New York\" style from shadcn/ui\n\n**Key Frontend Patterns:**\n- Context-based authentication (AuthProvider) managing user sessions with JWT tokens stored in localStorage\n- WebSocket provider for real-time updates (service requests, location tracking, chat messages)\n- Notifications system with unread message tracking, toast and browser notifications\n- Custom hooks for mobile detection, toast notifications, and form validation\n- Protected routes using authentication guard components\n\n### Backend Architecture\n\n**Technology Stack:**\n- Express.js server with TypeScript\n- WebSocket Server (ws library) for real-time bidirectional communication\n- Session-based authentication using in-memory Map storage\n- Bcrypt for password hashing\n\n**API Design:**\n- RESTful endpoints under `/api` prefix\n- Bearer token authentication via Authorization headers\n- WebSocket connection for real-time features with token-based authentication\n- Middleware for request logging and error handling\n\n**Authentication Flow:**\n- Username/password login generating session tokens\n- Tokens stored in-memory Map on server\n- Client sends token via Authorization header or WebSocket query parameter\n- Middleware validates tokens and attaches user to request object\n\n**Data Storage:**\n- In-memory storage implementation (MemStorage class) as the current data layer\n- Designed with interface (IStorage) for future database integration\n- Schema definitions using Drizzle ORM for PostgreSQL (prepared but not yet connected)\n\n### Database Schema (Drizzle ORM - PostgreSQL Ready)\n\n**User Management:**\n- Users table with dual user types (client/mechanic)\n- Location tracking fields (currentLat, currentLng) for real-time GPS tracking\n- Base address system for mechanics (baseAddress, baseLat, baseLng) - used for distance/price calculations\n- Online status tracking\n- Rating system with average and total counts\n- Bank account information for withdrawals (account name, number, bank, PIX key)\n- Wallet balance for mechanics\n- Stripe customer integration\n\n**Mechanic Base Address System:**\n- Mechanics must configure their base address during registration or in the Profile page\n- Base address is captured using Google Places Autocomplete (Brazil-only)\n- All distance and price calculations use the mechanic's base address as the origin point\n- Route visualization on maps shows from base address to client location\n- Mechanics cannot accept service requests without a configured base address\n- Base address can be updated at any time in the Profile page\n- System properly handles edge cases including zero coordinates (equator/Greenwich meridian)\n- Backend filters pending service requests to show only those within 50km radius of mechanic's base address\n- GPS location is only required for clients (to show nearby mechanics), not for mechanics to receive requests\n- **Registration Flow (Fixed Oct 2025):**\n  - Base address data now sent during initial registration (not separate API call)\n  - Backend properly preserves baseAddress/baseLat/baseLng including zero values\n  - Schema accepts optional base address fields (string | number)\n  - Storage normalizes coordinates to strings consistently\n\n**Service Requests:**\n- Complete service lifecycle tracking (pending → accepted → completed/cancelled)\n- Pickup location and optional destination\n- Service type categorization (mechanic, tow_truck, emergency)\n- Distance-based pricing calculation (base fee + distance fee)\n- Platform fee and mechanic earnings separation\n- Payment integration with Stripe (payment intent tracking)\n- Rating and feedback system\n\n**Communication:**\n- Chat messages linked to service requests\n- Sender identification and timestamps\n- Real-time delivery via WebSocket\n\n**Financial Transactions:**\n- Transaction history for wallet operations\n- Type classification (mechanic_earnings, platform_fee, withdrawal, refund)\n- Status tracking (pending, completed, failed)\n- Service request association\n- **12-Hour Availability Delay System:**\n  - Earnings from completed services are marked with an `availableAt` timestamp (12 hours after service completion)\n  - Saldo Pendente: earnings that haven't reached their `availableAt` time yet\n  - Saldo Disponível: earnings that have passed their `availableAt` time and can be withdrawn\n- **Withdrawal System:**\n  - Two withdrawal methods: PIX and bank transfer\n  - Full bank account details stored (bank name, account number, branch, account holder name)\n  - Withdrawal requests include method and destination details\n  - Processing time: up to 2 business days\n  - Withdrawal transactions store method and destination details for audit trail\n\n### Real-Time Communication\n\n**WebSocket Implementation:**\n- Single WebSocket connection per authenticated user\n- Event-based messaging system with typed events:\n  - Service request lifecycle (created, accepted, completed, cancelled)\n  - Location updates from mechanics\n  - Chat messages\n  - Mechanic arrival notifications\n- Client-side event listeners using custom events\n- Automatic reconnection on token refresh\n\n**Notifications System:**\n- NotificationsProvider context managing unread message state\n- Unread message badges displayed on chat buttons (ActiveRidePage and MobileNav)\n- Toast notifications when new messages arrive (suppressed when on chat page)\n- Browser notifications with click-to-navigate functionality\n- Permission management in ProfilePage settings\n- Messages automatically marked as read when ChatPage opens\n- Uses wouter navigation for all notification actions (no page reloads)\n\n### Payment Integration\n\n**Stripe Integration:**\n- Payment intents for service payments\n- Automatic payment methods enabled\n- BRL currency support\n- Server-side payment intent creation and confirmation\n- Client-side integration using @stripe/react-stripe-js\n- Payment status tracking in service requests\n\n**Wallet System:**\n- Service providers accumulate earnings in platform wallet\n- Bank account or PIX key required for withdrawals\n- Transaction history tracking\n- Platform fee calculation (deducted from mechanic earnings)\n- **Admin Withdrawal Processing System:**\n  - Admin panel at `/admin/withdrawals` for manual payout processing\n  - Lists pending withdrawals with mechanic details and bank/PIX information\n  - Admins make manual transfers (PIX/TED) and confirm in system\n  - Status updates from \"pending\" to \"completed\" after admin confirmation\n  - Accessible from Profile page via \"Processar Saques (Admin)\" button\n  - Currently: any authenticated user can access (to be restricted to admin role in future)\n\n### Maps Integration\n\n**Google Maps API:**\n- Real-time location tracking and display\n- Route calculation and visualization\n- Distance and duration estimates\n- Marker positioning for clients and mechanics\n- Directions API for route path rendering\n- API key configuration via environment variable (VITE_GOOGLE_MAPS_API_KEY)\n\n**Address Input System (Uber-style):**\n- Google Places Autocomplete for address search\n- Fully typeable input with autocomplete suggestions\n- Manual text entry with automatic geocoding fallback\n- Country restriction to Brazil (BR)\n- Real-time address validation and coordinate extraction\n- No GPS button - simplified interface like Uber\n\n**External Navigation Integration (Oct 2025):**\n- Mechanics can open navigation in external apps from ActiveRidePage\n- DropdownMenu button with Navigation icon (visible only for mechanics in 'accepted' or 'arrived' status)\n- Two navigation options:\n  - **Waze:** Opens Waze app with route from mechanic base address to client location\n  - **Google Maps:** Opens Google Maps with turn-by-turn directions\n- Route visualization on in-app map shows preview before opening external app\n- Origin point: mechanic's base address (baseLat, baseLng)\n- Destination: client's pickup location (pickupLat, pickupLng)\n- URL format validation and proper parameter encoding\n- Opens in new tab/window with window.open (mobile OS handlers launch native apps)\n\n## Recent Changes\n\n**October 2, 2025 - Replit Environment Setup:**\n- Fixed Stripe initialization to handle missing API keys gracefully\n- Disabled Vite HMR to prevent WebSocket conflicts and page reloading issues\n- Server properly configured to run on port 5000 with 0.0.0.0 host\n- Payment features disabled when STRIPE_SECRET_KEY not configured (development mode)\n- Resolved authentication persistence issue caused by HMR WebSocket failures\n\n## External Dependencies\n\n### Third-Party Services\n\n**Stripe:**\n- Payment processing for service fees\n- Configuration via STRIPE_SECRET_KEY environment variable (optional for development)\n- API version: 2025-08-27.basil\n- Handles payment intents, confirmations, and refunds\n- Server gracefully handles missing keys by disabling payment features\n\n**Google Maps:**\n- Location services and mapping\n- Requires VITE_GOOGLE_MAPS_API_KEY\n- Uses @vis.gl/react-google-maps for React integration\n- Provides geocoding, directions, and distance matrix services\n\n### Database\n\n**Neon Serverless PostgreSQL:**\n- Primary database provider (@neondatabase/serverless)\n- Drizzle ORM for schema management and queries\n- Configuration via DATABASE_URL environment variable\n- Migration files stored in /migrations directory\n- Current implementation uses in-memory storage but schema is production-ready\n\n### UI Component Libraries\n\n**Radix UI:**\n- Comprehensive set of unstyled, accessible components\n- All interactive components (dialogs, dropdowns, tooltips, etc.)\n- Keyboard navigation and ARIA compliance built-in\n\n**shadcn/ui:**\n- Pre-styled components built on Radix UI\n- Customizable via Tailwind CSS\n- \"New York\" style variant selected\n\n### Development Tools\n\n**Replit:**\n- Development environment integration\n- Hot module replacement support\n- Runtime error modal plugin\n- Cartographer plugin for development mode\n- Banner injection for non-Replit environments\n\n### Font Libraries\n\n**Google Fonts:**\n- Architects Daughter (decorative)\n- DM Sans (primary UI font)\n- Fira Code (monospace)\n- Geist Mono (monospace alternative)\n- Loaded via CDN in index.html","size_bytes":11327},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"hsl(120 60% 45%)\",\n          away: \"hsl(35 100% 55%)\",\n          busy: \"hsl(0 75% 55%)\",\n          offline: \"hsl(220 8% 65%)\",\n        },\n        service: {\n          available: \"hsl(120 60% 45%)\",\n          transit: \"hsl(35 100% 55%)\",\n          emergency: \"hsl(0 75% 55%)\",\n          notification: \"hsl(280 60% 60%)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4245},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertUserSchema, \n  loginSchema, \n  insertServiceRequestSchema,\n  insertChatMessageSchema,\n  bankDataSchema,\n  ratingSchema,\n  baseAddressSchema,\n  type User \n} from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\nimport { WebSocketServer } from \"ws\";\nimport { createPaymentIntent, confirmPayment, createPixPaymentIntent, getPixPaymentDetails, checkPixPaymentStatus } from \"./stripe\";\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: User;\n    }\n  }\n}\n\nconst sessions = new Map<string, User>();\n\nfunction generateSessionToken(): string {\n  return Math.random().toString(36).substring(2) + Date.now().toString(36);\n}\n\nasync function authMiddleware(req: any, res: any, next: any) {\n  const authHeader = req.headers.authorization;\n  \n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return res.status(401).json({ message: \"Não autorizado\" });\n  }\n\n  const token = authHeader.substring(7);\n  const user = sessions.get(token);\n\n  if (!user) {\n    return res.status(401).json({ message: \"Sessão inválida\" });\n  }\n\n  req.user = user;\n  next();\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  const clients = new Map<string, any>();\n\n  wss.on('connection', (ws, req) => {\n    const token = new URL(req.url || '', `http://${req.headers.host}`).searchParams.get('token');\n    \n    if (token) {\n      const user = sessions.get(token);\n      if (user) {\n        clients.set(user.id, ws);\n        \n        ws.on('close', () => {\n          clients.delete(user.id);\n        });\n\n        ws.on('message', (message) => {\n          try {\n            const data = JSON.parse(message.toString());\n            \n            if (data.type === 'location_update') {\n              storage.updateUserLocation(user.id, data.lat, data.lng);\n            }\n          } catch (e) {\n            console.error('WebSocket message error:', e);\n          }\n        });\n      }\n    }\n  });\n\n  function broadcastToUser(userId: string, data: any) {\n    const client = clients.get(userId);\n    if (client && client.readyState === 1) {\n      client.send(JSON.stringify(data));\n    }\n  }\n\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      \n      const existingUser = await storage.getUserByUsername(validatedData.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Usuário já existe\" });\n      }\n\n      const existingEmail = await storage.getUserByEmail(validatedData.email);\n      if (existingEmail) {\n        return res.status(400).json({ message: \"Email já cadastrado\" });\n      }\n\n      const hashedPassword = await bcrypt.hash(validatedData.password, 10);\n      const user = await storage.createUser({\n        ...validatedData,\n        password: hashedPassword,\n      });\n\n      if (user.userType === 'mechanic') {\n        await storage.updateUserOnlineStatus(user.id, true);\n      }\n\n      const updatedUser = await storage.getUser(user.id);\n      const finalUser = updatedUser || user;\n\n      const { password, ...userWithoutPassword } = finalUser;\n      const token = generateSessionToken();\n      sessions.set(token, finalUser);\n\n      res.json({ user: userWithoutPassword, token });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const validatedData = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByUsername(validatedData.username);\n      if (!user) {\n        return res.status(401).json({ message: \"Usuário ou senha inválidos\" });\n      }\n\n      const isPasswordValid = await bcrypt.compare(validatedData.password, user.password);\n      if (!isPasswordValid) {\n        return res.status(401).json({ message: \"Usuário ou senha inválidos\" });\n      }\n\n      if (user.userType === 'mechanic') {\n        await storage.updateUserOnlineStatus(user.id, true);\n      }\n\n      const updatedUser = await storage.getUser(user.id);\n      const finalUser = updatedUser || user;\n\n      const { password, ...userWithoutPassword } = finalUser;\n      const token = generateSessionToken();\n      sessions.set(token, finalUser);\n\n      res.json({ user: userWithoutPassword, token });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", authMiddleware, async (req, res) => {\n    const authHeader = req.headers.authorization;\n    const token = authHeader?.substring(7);\n    \n    if (token) {\n      if (req.user) {\n        await storage.updateUserOnlineStatus(req.user.id, false);\n      }\n      sessions.delete(token);\n    }\n\n    res.json({ message: \"Logout realizado com sucesso\" });\n  });\n\n  app.get(\"/api/auth/me\", authMiddleware, async (req, res) => {\n    const user = await storage.getUser(req.user!.id);\n    if (!user) {\n      return res.status(404).json({ message: \"Usuário não encontrado\" });\n    }\n    const { password, ...userWithoutPassword } = user;\n    res.json(userWithoutPassword);\n  });\n\n  app.post(\"/api/auth/toggle-online\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.userType !== 'mechanic') {\n        return res.status(403).json({ message: \"Apenas mecânicos podem alterar status online\" });\n      }\n\n      const { isOnline } = req.body;\n      await storage.updateUserOnlineStatus(req.user!.id, isOnline);\n      \n      const authHeader = req.headers.authorization;\n      const token = authHeader?.substring(7);\n      \n      const updatedUser = await storage.getUser(req.user!.id);\n      if (updatedUser && token) {\n        sessions.set(token, updatedUser);\n      }\n\n      res.json({ isOnline });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/location/update\", authMiddleware, async (req, res) => {\n    try {\n      const { lat, lng } = req.body;\n      await storage.updateUserLocation(req.user!.id, lat, lng);\n      res.json({ message: \"Localização atualizada\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/mechanics/online\", authMiddleware, async (req, res) => {\n    try {\n      const mechanics = await storage.getOnlineMechanics();\n      const mechanicsWithoutPassword = mechanics.map(({ password, ...m }) => m);\n      res.json(mechanicsWithoutPassword);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/mechanics/nearby\", authMiddleware, async (req, res) => {\n    try {\n      const { lat, lng, radius = 10 } = req.query;\n      \n      if (!lat || !lng) {\n        return res.status(400).json({ message: \"Latitude e longitude são obrigatórias\" });\n      }\n\n      const mechanics = await storage.getOnlineMechanicsNearby(\n        parseFloat(lat as string),\n        parseFloat(lng as string),\n        parseFloat(radius as string)\n      );\n      \n      const mechanicsWithoutPassword = mechanics.map(({ password, ...m }) => m);\n      res.json(mechanicsWithoutPassword);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/service-requests\", authMiddleware, async (req, res) => {\n    try {\n      const { paymentIntentId, paymentMethod = 'card', ...requestData } = req.body;\n\n      if (paymentMethod === 'pix') {\n        const estimatedPrice = 50;\n        \n        const pixPaymentIntent = await createPixPaymentIntent(\n          estimatedPrice,\n          `Solicitação de serviço - ${requestData.serviceType}`\n        );\n\n        const validatedData = insertServiceRequestSchema.parse({\n          ...requestData,\n          clientId: req.user!.id,\n          paymentIntentId: pixPaymentIntent.id,\n          paymentStatus: 'pending',\n        });\n        \n        const serviceRequest = await storage.createServiceRequest(validatedData);\n\n        await storage.updateServiceRequest(serviceRequest.id, {\n          paymentMethod: 'pix',\n          pixPaymentId: pixPaymentIntent.id,\n        });\n\n        res.json(serviceRequest);\n      } else {\n        if (!paymentIntentId) {\n          return res.status(400).json({ message: \"Pagamento obrigatório\" });\n        }\n\n        const paymentIntent = await confirmPayment(paymentIntentId);\n        \n        if (paymentIntent.status !== 'succeeded') {\n          return res.status(400).json({ message: \"Pagamento não confirmado\" });\n        }\n\n        const validatedData = insertServiceRequestSchema.parse({\n          ...requestData,\n          clientId: req.user!.id,\n          paymentIntentId,\n          paymentStatus: 'paid',\n        });\n        \n        const serviceRequest = await storage.createServiceRequest(validatedData);\n\n        const mechanics = await storage.getOnlineMechanics();\n        mechanics.forEach(mechanic => {\n          broadcastToUser(mechanic.id, {\n            type: 'new_service_request',\n            data: serviceRequest,\n          });\n        });\n\n        res.json(serviceRequest);\n      }\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/service-requests/pending\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.userType !== 'mechanic') {\n        return res.status(403).json({ message: \"Apenas mecânicos podem ver chamadas pendentes\" });\n      }\n\n      if (!req.user!.baseLat || !req.user!.baseLng) {\n        return res.json([]);\n      }\n\n      const mechanicLat = parseFloat(req.user!.baseLat);\n      const mechanicLng = parseFloat(req.user!.baseLng);\n      const MAX_RADIUS_KM = 50;\n\n      const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {\n        const R = 6371;\n        const dLat = (lat2 - lat1) * Math.PI / 180;\n        const dLon = (lon2 - lon1) * Math.PI / 180;\n        const a = \n          Math.sin(dLat/2) * Math.sin(dLat/2) +\n          Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n          Math.sin(dLon/2) * Math.sin(dLon/2);\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n        return R * c;\n      };\n\n      const allRequests = await storage.getPendingServiceRequests();\n      \n      const nearbyRequests = allRequests.filter(request => {\n        const requestLat = parseFloat(request.pickupLat);\n        const requestLng = parseFloat(request.pickupLng);\n        const distance = calculateDistance(mechanicLat, mechanicLng, requestLat, requestLng);\n        return distance <= MAX_RADIUS_KM;\n      });\n\n      res.json(nearbyRequests);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/service-requests/my\", authMiddleware, async (req, res) => {\n    try {\n      const requests = await storage.getUserServiceRequests(req.user!.id);\n      res.json(requests);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/service-requests/active\", authMiddleware, async (req, res) => {\n    try {\n      const requests = await storage.getUserServiceRequests(req.user!.id);\n      const activeRequest = requests.find(r => \n        r.status === 'accepted' || r.status === 'arrived'\n      );\n      \n      if (!activeRequest) {\n        return res.json(null);\n      }\n\n      res.json(activeRequest);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/service-requests/:id\", authMiddleware, async (req, res) => {\n    try {\n      const request = await storage.getServiceRequest(req.params.id);\n      \n      if (!request) {\n        return res.status(404).json({ message: \"Chamada não encontrada\" });\n      }\n\n      if (request.clientId !== req.user!.id && request.mechanicId !== req.user!.id) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      res.json(request);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/users/:id\", authMiddleware, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"Usuário não encontrado\" });\n      }\n\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/service-requests/:id/accept\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.userType !== 'mechanic') {\n        return res.status(403).json({ message: \"Apenas mecânicos podem aceitar chamadas\" });\n      }\n\n      if (!req.user!.isOnline) {\n        return res.status(400).json({ message: \"Você precisa estar online para aceitar chamadas\" });\n      }\n\n      const request = await storage.getServiceRequest(req.params.id);\n      \n      if (!request) {\n        return res.status(404).json({ message: \"Chamada não encontrada\" });\n      }\n\n      if (request.status !== 'pending') {\n        return res.status(400).json({ message: \"Chamada já foi aceita ou finalizada\" });\n      }\n\n      const { distance } = req.body;\n      const baseFee = 50;\n      const distanceFee = distance * 6;\n      const totalPrice = baseFee + distanceFee;\n      const platformFee = distanceFee * 0.10;\n      const mechanicEarnings = baseFee + (distanceFee - platformFee);\n\n      const updated = await storage.updateServiceRequest(req.params.id, {\n        mechanicId: req.user!.id,\n        status: 'accepted',\n        acceptedAt: new Date(),\n        distance: distance.toString(),\n        baseFee: baseFee.toString(),\n        distanceFee: distanceFee.toString(),\n        totalPrice: totalPrice.toString(),\n        platformFee: platformFee.toString(),\n        mechanicEarnings: mechanicEarnings.toString(),\n        paymentStatus: 'paid',\n      });\n\n      if (!updated) {\n        return res.status(404).json({ message: \"Erro ao atualizar chamada\" });\n      }\n\n      broadcastToUser(request.clientId, {\n        type: 'service_request_accepted',\n        data: updated,\n        mechanic: {\n          id: req.user!.id,\n          fullName: req.user!.fullName,\n          rating: req.user!.rating,\n          phone: req.user!.phone,\n        },\n      });\n\n      broadcastToUser(req.user!.id, {\n        type: 'service_request_started',\n        data: updated,\n      });\n\n      res.json(updated);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/service-requests/:id/arrived\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.userType !== 'mechanic') {\n        return res.status(403).json({ message: \"Apenas mecânicos podem marcar chegada\" });\n      }\n\n      const request = await storage.getServiceRequest(req.params.id);\n      \n      if (!request) {\n        return res.status(404).json({ message: \"Chamada não encontrada\" });\n      }\n\n      if (request.mechanicId !== req.user!.id) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      if (request.status !== 'accepted') {\n        return res.status(400).json({ message: \"Chamada não está em andamento\" });\n      }\n\n      const updated = await storage.updateServiceRequest(req.params.id, {\n        status: 'arrived',\n        arrivedAt: new Date(),\n      });\n\n      broadcastToUser(request.clientId, {\n        type: 'mechanic_arrived',\n        data: updated,\n      });\n\n      res.json(updated);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/service-requests/:id/complete\", authMiddleware, async (req, res) => {\n    try {\n      const request = await storage.getServiceRequest(req.params.id);\n      \n      if (!request) {\n        return res.status(404).json({ message: \"Chamada não encontrada\" });\n      }\n\n      const isClient = request.clientId === req.user!.id;\n      const isMechanic = request.mechanicId === req.user!.id;\n\n      if (!isClient && !isMechanic) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      if (request.status !== 'arrived' && request.status !== 'accepted') {\n        return res.status(400).json({ message: \"Chamada não está em andamento\" });\n      }\n\n      const completedAt = new Date();\n      const updated = await storage.updateServiceRequest(req.params.id, {\n        status: 'completed',\n        completedAt,\n      });\n\n      if (request.mechanicId && request.mechanicEarnings) {\n        const availableAt = new Date(completedAt.getTime() + 12 * 60 * 60 * 1000);\n        \n        await storage.createTransaction(\n          request.mechanicId,\n          'mechanic_earnings',\n          parseFloat(request.mechanicEarnings),\n          `Ganho do serviço - ${request.serviceType} (${parseFloat(request.distance || '0').toFixed(1)}km)`,\n          req.params.id,\n          availableAt\n        );\n        \n        await storage.updateTransactionStatus(\n          req.params.id,\n          'completed',\n          completedAt\n        );\n      }\n\n      if (isClient && request.mechanicId) {\n        broadcastToUser(request.mechanicId, {\n          type: 'service_request_completed',\n          data: updated,\n        });\n      } else if (isMechanic) {\n        broadcastToUser(request.clientId, {\n          type: 'service_request_completed',\n          data: updated,\n        });\n      }\n\n      res.json(updated);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/service-requests/:id/rate\", authMiddleware, async (req, res) => {\n    try {\n      const request = await storage.getServiceRequest(req.params.id);\n      \n      if (!request) {\n        return res.status(404).json({ message: \"Chamada não encontrada\" });\n      }\n\n      if (request.clientId !== req.user!.id) {\n        return res.status(403).json({ message: \"Apenas o cliente pode avaliar\" });\n      }\n\n      if (request.status !== 'completed') {\n        return res.status(400).json({ message: \"Serviço ainda não foi finalizado\" });\n      }\n\n      const { rating, comment } = req.body;\n      \n      if (!rating || rating < 1 || rating > 5) {\n        return res.status(400).json({ message: \"Avaliação deve ser entre 1 e 5\" });\n      }\n\n      const updated = await storage.updateServiceRequest(req.params.id, {\n        rating: parseInt(rating.toString()),\n        ratingComment: comment || '',\n      });\n\n      if (request.mechanicId) {\n        const mechanic = await storage.getUser(request.mechanicId);\n        if (mechanic) {\n          const currentRating = parseFloat(mechanic.rating || '0');\n          const totalRatings = parseInt(mechanic.totalRatings?.toString() || '0');\n          const newTotal = totalRatings + 1;\n          const newRating = ((currentRating * totalRatings) + parseInt(rating.toString())) / newTotal;\n          \n          await storage.updateUserRating(request.mechanicId, parseFloat(newRating.toFixed(2)));\n        }\n      }\n\n      res.json(updated);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/service-requests/history\", authMiddleware, async (req, res) => {\n    try {\n      const requests = await storage.getUserServiceRequests(req.user!.id);\n      const history = requests.filter(r => r.status === 'completed' || r.status === 'cancelled');\n      res.json(history);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/chat/messages\", authMiddleware, async (req, res) => {\n    try {\n      const validatedData = insertChatMessageSchema.parse({\n        ...req.body,\n        senderId: req.user!.id,\n      });\n\n      const serviceRequest = await storage.getServiceRequest(validatedData.serviceRequestId);\n      if (!serviceRequest) {\n        return res.status(404).json({ message: \"Chamada não encontrada\" });\n      }\n\n      if (serviceRequest.clientId !== req.user!.id && serviceRequest.mechanicId !== req.user!.id) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const message = await storage.createChatMessage(validatedData);\n      \n      const messageWithSender = {\n        ...message,\n        senderName: req.user!.fullName,\n      };\n\n      const recipientId = serviceRequest.clientId === req.user!.id \n        ? serviceRequest.mechanicId \n        : serviceRequest.clientId;\n\n      if (recipientId) {\n        broadcastToUser(recipientId, {\n          type: 'new_chat_message',\n          data: messageWithSender,\n        });\n      }\n\n      res.json(messageWithSender);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/chat/messages/:serviceRequestId\", authMiddleware, async (req, res) => {\n    try {\n      const serviceRequest = await storage.getServiceRequest(req.params.serviceRequestId);\n      \n      if (!serviceRequest) {\n        return res.status(404).json({ message: \"Chamada não encontrada\" });\n      }\n\n      if (serviceRequest.clientId !== req.user!.id && serviceRequest.mechanicId !== req.user!.id) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const messages = await storage.getChatMessages(req.params.serviceRequestId);\n      \n      const messagesWithSender = await Promise.all(messages.map(async (msg: any) => {\n        const sender = await storage.getUser(msg.senderId);\n        return {\n          ...msg,\n          senderName: sender?.fullName || 'Usuário',\n        };\n      }));\n      \n      res.json(messagesWithSender);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/payments/prepare-payment\", authMiddleware, async (req, res) => {\n    try {\n      const { serviceType, pickupAddress } = req.body;\n      \n      const BASE_FEE = 50;\n      const amount = BASE_FEE;\n      const description = `Pré-pagamento: ${serviceType || 'Serviço de mecânico'} - ${pickupAddress || 'Localização'}`;\n\n      const paymentIntent = await createPaymentIntent(\n        amount,\n        description\n      );\n\n      res.json({ \n        clientSecret: paymentIntent.client_secret,\n        paymentIntentId: paymentIntent.id\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/payments/create-intent\", authMiddleware, async (req, res) => {\n    try {\n      const { serviceRequestId } = req.body;\n      \n      const serviceRequest = await storage.getServiceRequest(serviceRequestId);\n      \n      if (!serviceRequest) {\n        return res.status(404).json({ message: \"Chamada não encontrada\" });\n      }\n\n      if (serviceRequest.clientId !== req.user!.id) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      if (!serviceRequest.totalPrice) {\n        return res.status(400).json({ message: \"Preço total não calculado\" });\n      }\n\n      const amount = parseFloat(serviceRequest.totalPrice);\n      const paymentIntent = await createPaymentIntent(\n        amount,\n        `Serviço: ${serviceRequest.serviceType} - ${serviceRequest.pickupAddress}`\n      );\n\n      await storage.updateServiceRequest(serviceRequestId, {\n        paymentIntentId: paymentIntent.id,\n      });\n\n      res.json({ clientSecret: paymentIntent.client_secret });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/payments/confirm\", authMiddleware, async (req, res) => {\n    try {\n      const { serviceRequestId } = req.body;\n      \n      const serviceRequest = await storage.getServiceRequest(serviceRequestId);\n      \n      if (!serviceRequest) {\n        return res.status(404).json({ message: \"Chamada não encontrada\" });\n      }\n\n      if (serviceRequest.clientId !== req.user!.id) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      if (!serviceRequest.paymentIntentId) {\n        return res.status(400).json({ message: \"Payment intent não encontrado\" });\n      }\n\n      const paymentIntent = await confirmPayment(serviceRequest.paymentIntentId);\n\n      if (paymentIntent.status === 'succeeded') {\n        await storage.updateServiceRequest(serviceRequestId, {\n          paymentStatus: 'paid',\n        });\n\n        res.json({ status: 'success', message: 'Pagamento confirmado' });\n      } else {\n        res.json({ status: paymentIntent.status });\n      }\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/payments/pix/:serviceRequestId\", authMiddleware, async (req, res) => {\n    try {\n      const serviceRequest = await storage.getServiceRequest(req.params.serviceRequestId);\n      \n      if (!serviceRequest) {\n        return res.status(404).json({ message: \"Chamada não encontrada\" });\n      }\n\n      if (serviceRequest.clientId !== req.user!.id) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      if (!serviceRequest.paymentIntentId) {\n        return res.status(400).json({ message: \"Pagamento PIX não iniciado\" });\n      }\n\n      const pixDetails = await getPixPaymentDetails(serviceRequest.paymentIntentId);\n      \n      if (!pixDetails) {\n        return res.status(400).json({ message: \"Detalhes PIX não disponíveis ainda\" });\n      }\n\n      res.json({\n        qrCode: pixDetails.qrCode,\n        expiresAt: pixDetails.expiresAt,\n        amount: serviceRequest.totalPrice || '50.00',\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/payments/pix/status/:serviceRequestId\", authMiddleware, async (req, res) => {\n    try {\n      const serviceRequest = await storage.getServiceRequest(req.params.serviceRequestId);\n      \n      if (!serviceRequest) {\n        return res.status(404).json({ message: \"Chamada não encontrada\" });\n      }\n\n      if (serviceRequest.clientId !== req.user!.id) {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      if (!serviceRequest.paymentIntentId) {\n        return res.status(400).json({ message: \"Pagamento PIX não iniciado\" });\n      }\n\n      const paymentStatus = await checkPixPaymentStatus(serviceRequest.paymentIntentId);\n      \n      if (paymentStatus.isPaid && serviceRequest.paymentStatus !== 'paid') {\n        await storage.updateServiceRequest(req.params.serviceRequestId, {\n          paymentStatus: 'paid',\n        });\n\n        const mechanics = await storage.getOnlineMechanics();\n        mechanics.forEach(mechanic => {\n          broadcastToUser(mechanic.id, {\n            type: 'new_service_request',\n            data: { ...serviceRequest, paymentStatus: 'paid' },\n          });\n        });\n      }\n\n      res.json({\n        status: paymentStatus.status,\n        isPaid: paymentStatus.isPaid,\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/wallet/transactions\", authMiddleware, async (req, res) => {\n    try {\n      const transactions = await storage.getUserTransactions(req.user!.id);\n      res.json(transactions);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/user/base-address\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.userType !== 'mechanic') {\n        return res.status(403).json({ message: \"Apenas mecânicos podem cadastrar endereço base\" });\n      }\n\n      const validatedData = baseAddressSchema.parse(req.body);\n      await storage.updateUserBaseAddress(req.user!.id, validatedData);\n\n      res.json({ message: \"Endereço base atualizado\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/wallet/bank-data\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.userType !== 'mechanic') {\n        return res.status(403).json({ message: \"Apenas mecânicos podem adicionar dados bancários\" });\n      }\n\n      const validatedData = bankDataSchema.parse(req.body);\n      await storage.updateUserBankData(req.user!.id, validatedData);\n\n      res.json({ message: \"Dados bancários atualizados\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/wallet/balance\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.userType !== 'mechanic') {\n        return res.status(403).json({ message: \"Apenas mecânicos têm carteira\" });\n      }\n\n      const availableBalance = await storage.getAvailableBalance(req.user!.id);\n      const pendingBalance = await storage.getPendingBalance(req.user!.id);\n\n      res.json({\n        available: availableBalance,\n        pending: pendingBalance,\n        total: availableBalance + pendingBalance,\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/wallet/withdraw\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.userType !== 'mechanic') {\n        return res.status(403).json({ message: \"Apenas mecânicos podem solicitar saque\" });\n      }\n\n      const user = await storage.getUser(req.user!.id);\n      if (!user) {\n        return res.status(404).json({ message: \"Usuário não encontrado\" });\n      }\n\n      if (!user.bankAccountName || !user.bankAccountNumber || !user.bankName) {\n        if (!user.pixKey) {\n          return res.status(400).json({ message: \"Complete seus dados bancários ou PIX primeiro\" });\n        }\n      }\n\n      const { amount, method } = req.body;\n      \n      if (!amount || amount <= 0) {\n        return res.status(400).json({ message: \"Valor inválido\" });\n      }\n\n      const availableBalance = await storage.getAvailableBalance(user.id);\n      \n      if (availableBalance < amount) {\n        return res.status(400).json({ \n          message: `Saldo disponível insuficiente. Você tem R$ ${availableBalance.toFixed(2)} disponível.` \n        });\n      }\n\n      let withdrawalDetails = '';\n      if (method === 'pix' && user.pixKey) {\n        withdrawalDetails = `PIX: ${user.pixKey}`;\n      } else if (method === 'bank_transfer') {\n        withdrawalDetails = `${user.bankName} - Ag: ${user.bankBranch || 'N/A'} - Conta: ${user.bankAccountNumber} - ${user.bankAccountName}`;\n      } else {\n        return res.status(400).json({ message: \"Método de saque inválido ou dados bancários incompletos\" });\n      }\n\n      await storage.createWithdrawalRequest(\n        user.id,\n        amount,\n        method,\n        withdrawalDetails\n      );\n\n      res.json({ \n        message: \"Saque solicitado com sucesso! Processaremos em até 2 dias úteis.\",\n        amount \n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/admin/withdrawals\", authMiddleware, async (req, res) => {\n    try {\n      const withdrawals = await storage.getPendingWithdrawals();\n      res.json(withdrawals);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/withdrawals/:id/complete\", authMiddleware, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.completeWithdrawal(id);\n      res.json({ message: \"Saque confirmado com sucesso!\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":31646},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type ServiceRequest,\n  type InsertServiceRequest,\n  type ChatMessage,\n  type InsertChatMessage,\n  type Transaction,\n  type BankData,\n  type BaseAddress\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserLocation(userId: string, lat: number, lng: number): Promise<void>;\n  updateUserOnlineStatus(userId: string, isOnline: boolean): Promise<void>;\n  updateUserBaseAddress(userId: string, addressData: BaseAddress): Promise<void>;\n  updateUserBankData(userId: string, bankData: BankData): Promise<void>;\n  updateUserRating(userId: string, rating: number): Promise<void>;\n  updateWalletBalance(userId: string, amount: number): Promise<void>;\n  getOnlineMechanics(): Promise<User[]>;\n  getOnlineMechanicsNearby(lat: number, lng: number, radiusKm: number): Promise<User[]>;\n  \n  createServiceRequest(request: InsertServiceRequest): Promise<ServiceRequest>;\n  getServiceRequest(id: string): Promise<ServiceRequest | undefined>;\n  getUserServiceRequests(userId: string): Promise<ServiceRequest[]>;\n  getPendingServiceRequests(): Promise<ServiceRequest[]>;\n  getActiveServiceRequest(userId: string): Promise<ServiceRequest | undefined>;\n  updateServiceRequest(id: string, data: Partial<ServiceRequest>): Promise<ServiceRequest | undefined>;\n  \n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  getChatMessages(serviceRequestId: string): Promise<ChatMessage[]>;\n  \n  createTransaction(userId: string, type: string, amount: number, description: string, serviceRequestId?: string, availableAt?: Date): Promise<Transaction>;\n  getUserTransactions(userId: string): Promise<Transaction[]>;\n  getAvailableBalance(userId: string): Promise<number>;\n  getPendingBalance(userId: string): Promise<number>;\n  updateTransactionStatus(id: string, status: string, completedAt?: Date): Promise<void>;\n  createWithdrawalRequest(userId: string, amount: number, method: string, details: string): Promise<Transaction>;\n  getPendingWithdrawals(): Promise<Array<Transaction & { user: User }>>;\n  completeWithdrawal(id: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private serviceRequests: Map<string, ServiceRequest>;\n  private chatMessages: Map<string, ChatMessage>;\n  private transactions: Map<string, Transaction>;\n\n  constructor() {\n    this.users = new Map();\n    this.serviceRequests = new Map();\n    this.chatMessages = new Map();\n    this.transactions = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    \n    const user: User = { \n      id,\n      isOnline: false,\n      currentLat: null,\n      currentLng: null,\n      rating: \"5.00\",\n      totalRatings: 0,\n      bankAccountName: null,\n      bankAccountNumber: null,\n      bankName: null,\n      bankBranch: null,\n      pixKey: null,\n      pixKeyType: null,\n      walletBalance: \"0.00\",\n      stripeCustomerId: null,\n      createdAt: new Date(),\n      ...insertUser,\n      baseAddress: insertUser.baseAddress || null,\n      baseLat: insertUser.baseLat !== undefined && insertUser.baseLat !== null\n        ? (typeof insertUser.baseLat === 'number' ? insertUser.baseLat.toString() : insertUser.baseLat)\n        : null,\n      baseLng: insertUser.baseLng !== undefined && insertUser.baseLng !== null\n        ? (typeof insertUser.baseLng === 'number' ? insertUser.baseLng.toString() : insertUser.baseLng)\n        : null,\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUserLocation(userId: string, lat: number, lng: number): Promise<void> {\n    const user = this.users.get(userId);\n    if (user) {\n      user.currentLat = lat.toString();\n      user.currentLng = lng.toString();\n      this.users.set(userId, user);\n    }\n  }\n\n  async updateUserOnlineStatus(userId: string, isOnline: boolean): Promise<void> {\n    const user = this.users.get(userId);\n    if (user) {\n      user.isOnline = isOnline;\n      this.users.set(userId, user);\n    }\n  }\n\n  async updateUserBaseAddress(userId: string, addressData: BaseAddress): Promise<void> {\n    const user = this.users.get(userId);\n    if (user) {\n      user.baseAddress = addressData.baseAddress;\n      user.baseLat = addressData.baseLat.toString();\n      user.baseLng = addressData.baseLng.toString();\n      this.users.set(userId, user);\n    }\n  }\n\n  async updateUserBankData(userId: string, bankData: BankData): Promise<void> {\n    const user = this.users.get(userId);\n    if (user) {\n      user.bankAccountName = bankData.bankAccountName;\n      user.bankAccountNumber = bankData.bankAccountNumber;\n      user.bankName = bankData.bankName;\n      user.bankBranch = bankData.bankBranch || null;\n      user.pixKey = bankData.pixKey || null;\n      user.pixKeyType = bankData.pixKeyType || null;\n      this.users.set(userId, user);\n    }\n  }\n\n  async updateUserRating(userId: string, newRating: number): Promise<void> {\n    const user = this.users.get(userId);\n    if (user) {\n      const totalRatings = user.totalRatings || 0;\n      user.rating = newRating.toFixed(2);\n      user.totalRatings = totalRatings + 1;\n      this.users.set(userId, user);\n    }\n  }\n\n  async updateWalletBalance(userId: string, amount: number): Promise<void> {\n    const user = this.users.get(userId);\n    if (user) {\n      const currentBalance = parseFloat(user.walletBalance || \"0\");\n      user.walletBalance = (currentBalance + amount).toFixed(2);\n      this.users.set(userId, user);\n    }\n  }\n\n  async getOnlineMechanics(): Promise<User[]> {\n    return Array.from(this.users.values()).filter(\n      (user) => user.userType === \"mechanic\" && user.isOnline,\n    );\n  }\n\n  async getOnlineMechanicsNearby(lat: number, lng: number, radiusKm: number): Promise<User[]> {\n    const mechanics = await this.getOnlineMechanics();\n    return mechanics.filter(mechanic => {\n      if (!mechanic.currentLat || !mechanic.currentLng) return false;\n      \n      const mechanicLat = parseFloat(mechanic.currentLat);\n      const mechanicLng = parseFloat(mechanic.currentLng);\n      const distance = this.calculateDistance(lat, lng, mechanicLat, mechanicLng);\n      \n      return distance <= radiusKm;\n    });\n  }\n\n  private calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n    const R = 6371;\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const a = \n      Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n      Math.sin(dLon/2) * Math.sin(dLon/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  }\n\n  async createServiceRequest(insertRequest: InsertServiceRequest): Promise<ServiceRequest> {\n    const id = randomUUID();\n    const request: ServiceRequest = {\n      ...insertRequest,\n      description: insertRequest.description ?? null,\n      id,\n      mechanicId: null,\n      status: \"pending\",\n      distance: null,\n      baseFee: \"50.00\",\n      distanceFee: null,\n      totalPrice: null,\n      platformFee: null,\n      mechanicEarnings: null,\n      paymentStatus: \"pending\",\n      paymentMethod: \"card\",\n      paymentIntentId: null,\n      pixQrCode: null,\n      pixPaymentId: null,\n      pixExpiration: null,\n      rating: null,\n      ratingComment: null,\n      createdAt: new Date(),\n      acceptedAt: null,\n      completedAt: null,\n      arrivedAt: null,\n    };\n    this.serviceRequests.set(id, request);\n    return request;\n  }\n\n  async getServiceRequest(id: string): Promise<ServiceRequest | undefined> {\n    return this.serviceRequests.get(id);\n  }\n\n  async getUserServiceRequests(userId: string): Promise<ServiceRequest[]> {\n    return Array.from(this.serviceRequests.values()).filter(\n      (request) => request.clientId === userId || request.mechanicId === userId,\n    );\n  }\n\n  async getPendingServiceRequests(): Promise<ServiceRequest[]> {\n    return Array.from(this.serviceRequests.values()).filter(\n      (request) => request.status === \"pending\",\n    );\n  }\n\n  async getActiveServiceRequest(userId: string): Promise<ServiceRequest | undefined> {\n    return Array.from(this.serviceRequests.values()).find(\n      (request) => \n        (request.clientId === userId || request.mechanicId === userId) &&\n        (request.status === \"accepted\" || request.status === \"in_progress\")\n    );\n  }\n\n  async updateServiceRequest(id: string, data: Partial<ServiceRequest>): Promise<ServiceRequest | undefined> {\n    const request = this.serviceRequests.get(id);\n    if (request) {\n      const updated = { ...request, ...data };\n      this.serviceRequests.set(id, updated);\n      return updated;\n    }\n    return undefined;\n  }\n\n  async createChatMessage(insertMessage: InsertChatMessage): Promise<ChatMessage> {\n    const id = randomUUID();\n    const message: ChatMessage = {\n      ...insertMessage,\n      id,\n      createdAt: new Date(),\n    };\n    this.chatMessages.set(id, message);\n    return message;\n  }\n\n  async getChatMessages(serviceRequestId: string): Promise<ChatMessage[]> {\n    return Array.from(this.chatMessages.values())\n      .filter((msg) => msg.serviceRequestId === serviceRequestId)\n      .sort((a, b) => {\n        const aTime = a.createdAt?.getTime() ?? 0;\n        const bTime = b.createdAt?.getTime() ?? 0;\n        return aTime - bTime;\n      });\n  }\n\n  async createTransaction(\n    userId: string, \n    type: string, \n    amount: number, \n    description: string, \n    serviceRequestId?: string,\n    availableAt?: Date\n  ): Promise<Transaction> {\n    const id = randomUUID();\n    const transaction: Transaction = {\n      id,\n      userId,\n      serviceRequestId: serviceRequestId || null,\n      type,\n      amount: amount.toFixed(2),\n      status: \"pending\",\n      description,\n      availableAt: availableAt || null,\n      withdrawalMethod: null,\n      withdrawalDetails: null,\n      pixQrCode: null,\n      pixPaymentId: null,\n      pixExpiration: null,\n      pixType: null,\n      createdAt: new Date(),\n      completedAt: null,\n    };\n    this.transactions.set(id, transaction);\n    return transaction;\n  }\n\n  async getUserTransactions(userId: string): Promise<Transaction[]> {\n    return Array.from(this.transactions.values())\n      .filter(t => t.userId === userId)\n      .sort((a, b) => {\n        const aTime = a.createdAt?.getTime() ?? 0;\n        const bTime = b.createdAt?.getTime() ?? 0;\n        return bTime - aTime;\n      });\n  }\n\n  async updateTransactionStatus(id: string, status: string, completedAt?: Date): Promise<void> {\n    const transaction = this.transactions.get(id);\n    if (transaction) {\n      transaction.status = status;\n      if (completedAt) {\n        transaction.completedAt = completedAt;\n      }\n      this.transactions.set(id, transaction);\n    }\n  }\n\n  async getAvailableBalance(userId: string): Promise<number> {\n    const now = new Date();\n    const transactions = await this.getUserTransactions(userId);\n    \n    const availableTransactions = transactions.filter(t => \n      t.status === \"completed\" && \n      (t.type === \"mechanic_earnings\" || t.type === \"refund\") &&\n      (!t.availableAt || t.availableAt <= now)\n    );\n    \n    const withdrawals = transactions.filter(t => \n      t.type === \"withdrawal\" && \n      (t.status === \"completed\" || t.status === \"pending\")\n    );\n    \n    const totalEarnings = availableTransactions.reduce((sum, t) => sum + parseFloat(t.amount), 0);\n    const totalWithdrawals = withdrawals.reduce((sum, t) => sum + parseFloat(t.amount), 0);\n    \n    return totalEarnings - totalWithdrawals;\n  }\n\n  async getPendingBalance(userId: string): Promise<number> {\n    const now = new Date();\n    const transactions = await this.getUserTransactions(userId);\n    \n    const pendingTransactions = transactions.filter(t => \n      t.status === \"completed\" &&\n      (t.type === \"mechanic_earnings\" || t.type === \"refund\") &&\n      t.availableAt && t.availableAt > now\n    );\n    \n    return pendingTransactions.reduce((sum, t) => sum + parseFloat(t.amount), 0);\n  }\n\n  async createWithdrawalRequest(\n    userId: string, \n    amount: number, \n    method: string, \n    details: string\n  ): Promise<Transaction> {\n    const id = randomUUID();\n    const transaction: Transaction = {\n      id,\n      userId,\n      serviceRequestId: null,\n      type: \"withdrawal\",\n      amount: (-amount).toFixed(2),\n      status: \"pending\",\n      description: `Saque via ${method === 'pix' ? 'PIX' : 'Transferência Bancária'}`,\n      availableAt: null,\n      withdrawalMethod: method,\n      withdrawalDetails: details,\n      pixQrCode: null,\n      pixPaymentId: null,\n      pixExpiration: null,\n      pixType: method === 'pix' ? 'withdrawal' : null,\n      createdAt: new Date(),\n      completedAt: null,\n    };\n    this.transactions.set(id, transaction);\n    return transaction;\n  }\n\n  async getPendingWithdrawals(): Promise<Array<Transaction & { user: User }>> {\n    const withdrawals = Array.from(this.transactions.values()).filter(\n      t => t.type === \"withdrawal\" && t.status === \"pending\"\n    );\n\n    const withdrawalsWithUser = await Promise.all(\n      withdrawals.map(async (withdrawal) => {\n        const user = await this.getUser(withdrawal.userId);\n        return { ...withdrawal, user: user! };\n      })\n    );\n\n    return withdrawalsWithUser.sort((a, b) => {\n      const dateA = a.createdAt instanceof Date ? a.createdAt : (a.createdAt ? new Date(a.createdAt) : new Date());\n      const dateB = b.createdAt instanceof Date ? b.createdAt : (b.createdAt ? new Date(b.createdAt) : new Date());\n      return dateA.getTime() - dateB.getTime();\n    });\n  }\n\n  async completeWithdrawal(id: string): Promise<void> {\n    const transaction = this.transactions.get(id);\n    if (!transaction) {\n      throw new Error(\"Transação não encontrada\");\n    }\n\n    if (transaction.type !== \"withdrawal\") {\n      throw new Error(\"Esta não é uma transação de saque\");\n    }\n\n    if (transaction.status !== \"pending\") {\n      throw new Error(\"Este saque já foi processado\");\n    }\n\n    transaction.status = \"completed\";\n    transaction.completedAt = new Date();\n    this.transactions.set(id, transaction);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":14848},"server/stripe.ts":{"content":"import Stripe from 'stripe';\n\nconst stripeSecretKey = process.env.STRIPE_SECRET_KEY;\n\nif (!stripeSecretKey) {\n  console.warn('STRIPE_SECRET_KEY not configured - payment features will be disabled');\n}\n\nexport const stripe = stripeSecretKey ? new Stripe(stripeSecretKey, {\n  apiVersion: '2025-08-27.basil',\n}) : null as any;\n\nexport async function createPaymentIntent(amount: number, description: string) {\n  try {\n    const paymentIntent = await stripe.paymentIntents.create({\n      amount: Math.round(amount * 100),\n      currency: 'brl',\n      description,\n      automatic_payment_methods: {\n        enabled: true,\n      },\n    });\n\n    return paymentIntent;\n  } catch (error) {\n    console.error('Error creating payment intent:', error);\n    throw error;\n  }\n}\n\nexport async function confirmPayment(paymentIntentId: string) {\n  try {\n    const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);\n    return paymentIntent;\n  } catch (error) {\n    console.error('Error confirming payment:', error);\n    throw error;\n  }\n}\n\nexport async function createPixPaymentIntent(amount: number, description: string) {\n  try {\n    const paymentIntent = await stripe.paymentIntents.create({\n      amount: Math.round(amount * 100),\n      currency: 'brl',\n      description,\n      payment_method_types: ['pix'],\n    });\n\n    return paymentIntent;\n  } catch (error) {\n    console.error('Error creating PIX payment intent:', error);\n    throw error;\n  }\n}\n\nexport async function getPixPaymentDetails(paymentIntentId: string) {\n  try {\n    const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId, {\n      expand: ['latest_charge', 'latest_charge.payment_method_details'],\n    });\n\n    if (!paymentIntent.latest_charge) {\n      throw new Error('No charge associated with this payment intent');\n    }\n\n    const charge = paymentIntent.latest_charge as Stripe.Charge;\n    const pixDetails = charge.payment_method_details?.pix as any;\n\n    if (!pixDetails) {\n      return null;\n    }\n\n    return {\n      qrCode: pixDetails.qr_code || null,\n      expiresAt: pixDetails.expires_at ? new Date(pixDetails.expires_at * 1000) : null,\n    };\n  } catch (error) {\n    console.error('Error getting PIX payment details:', error);\n    throw error;\n  }\n}\n\nexport async function checkPixPaymentStatus(paymentIntentId: string) {\n  try {\n    const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);\n    \n    return {\n      status: paymentIntent.status,\n      isPaid: paymentIntent.status === 'succeeded',\n    };\n  } catch (error) {\n    console.error('Error checking PIX payment status:', error);\n    throw error;\n  }\n}\n","size_bytes":2639},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: false,\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2258},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, decimal, boolean, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  fullName: text(\"full_name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  userType: text(\"user_type\").notNull(),\n  isOnline: boolean(\"is_online\").default(false),\n  currentLat: decimal(\"current_lat\", { precision: 10, scale: 7 }),\n  currentLng: decimal(\"current_lng\", { precision: 10, scale: 7 }),\n  baseAddress: text(\"base_address\"),\n  baseLat: decimal(\"base_lat\", { precision: 10, scale: 7 }),\n  baseLng: decimal(\"base_lng\", { precision: 10, scale: 7 }),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"5.00\"),\n  totalRatings: integer(\"total_ratings\").default(0),\n  bankAccountName: text(\"bank_account_name\"),\n  bankAccountNumber: text(\"bank_account_number\"),\n  bankName: text(\"bank_name\"),\n  bankBranch: text(\"bank_branch\"),\n  pixKey: text(\"pix_key\"),\n  pixKeyType: text(\"pix_key_type\"),\n  walletBalance: decimal(\"wallet_balance\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const serviceRequests = pgTable(\"service_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull().references(() => users.id),\n  mechanicId: varchar(\"mechanic_id\").references(() => users.id),\n  serviceType: text(\"service_type\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"),\n  pickupLat: decimal(\"pickup_lat\", { precision: 10, scale: 7 }).notNull(),\n  pickupLng: decimal(\"pickup_lng\", { precision: 10, scale: 7 }).notNull(),\n  pickupAddress: text(\"pickup_address\").notNull(),\n  description: text(\"description\"),\n  distance: decimal(\"distance\", { precision: 10, scale: 2 }),\n  baseFee: decimal(\"base_fee\", { precision: 10, scale: 2 }).default(\"50.00\"),\n  distanceFee: decimal(\"distance_fee\", { precision: 10, scale: 2 }),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }),\n  platformFee: decimal(\"platform_fee\", { precision: 10, scale: 2 }),\n  mechanicEarnings: decimal(\"mechanic_earnings\", { precision: 10, scale: 2 }),\n  paymentStatus: text(\"payment_status\").default(\"pending\"),\n  paymentMethod: text(\"payment_method\").default(\"card\"),\n  paymentIntentId: text(\"payment_intent_id\"),\n  pixQrCode: text(\"pix_qr_code\"),\n  pixPaymentId: text(\"pix_payment_id\"),\n  pixExpiration: timestamp(\"pix_expiration\"),\n  rating: integer(\"rating\"),\n  ratingComment: text(\"rating_comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  acceptedAt: timestamp(\"accepted_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  arrivedAt: timestamp(\"arrived_at\"),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  serviceRequestId: varchar(\"service_request_id\").notNull().references(() => serviceRequests.id),\n  senderId: varchar(\"sender_id\").notNull().references(() => users.id),\n  message: text(\"message\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  serviceRequestId: varchar(\"service_request_id\").references(() => serviceRequests.id),\n  type: text(\"type\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"pending\"),\n  description: text(\"description\"),\n  availableAt: timestamp(\"available_at\"),\n  withdrawalMethod: text(\"withdrawal_method\"),\n  withdrawalDetails: text(\"withdrawal_details\"),\n  pixQrCode: text(\"pix_qr_code\"),\n  pixPaymentId: text(\"pix_payment_id\"),\n  pixExpiration: timestamp(\"pix_expiration\"),\n  pixType: text(\"pix_type\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  password: z.string().min(6, \"Senha deve ter no mínimo 6 caracteres\"),\n  email: z.string().email(\"Email inválido\"),\n  userType: z.enum([\"client\", \"mechanic\"], {\n    required_error: \"Tipo de usuário é obrigatório\",\n  }),\n  baseAddress: z.string().optional(),\n  baseLat: z.union([z.string(), z.number()]).optional(),\n  baseLng: z.union([z.string(), z.number()]).optional(),\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Usuário é obrigatório\"),\n  password: z.string().min(1, \"Senha é obrigatória\"),\n});\n\nexport const insertServiceRequestSchema = createInsertSchema(serviceRequests).omit({\n  id: true,\n  createdAt: true,\n  acceptedAt: true,\n  completedAt: true,\n  arrivedAt: true,\n  mechanicId: true,\n  distance: true,\n  distanceFee: true,\n  totalPrice: true,\n  platformFee: true,\n  mechanicEarnings: true,\n  paymentIntentId: true,\n  rating: true,\n  ratingComment: true,\n}).extend({\n  serviceType: z.enum([\"mechanic\", \"tow_truck\", \"road_assistance\", \"other\"]),\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const bankDataSchema = z.object({\n  bankAccountName: z.string().min(1, \"Nome do titular é obrigatório\"),\n  bankAccountNumber: z.string().min(1, \"Número da conta é obrigatório\"),\n  bankName: z.string().min(1, \"Nome do banco é obrigatório\"),\n  bankBranch: z.string().optional(),\n  pixKey: z.string().optional(),\n  pixKeyType: z.enum([\"cpf\", \"cnpj\", \"email\", \"phone\", \"random\"]).optional(),\n});\n\nexport const ratingSchema = z.object({\n  rating: z.number().min(1).max(5),\n  comment: z.string().optional(),\n});\n\nexport const baseAddressSchema = z.object({\n  baseAddress: z.string().min(1, \"Endereço é obrigatório\"),\n  baseLat: z.number({ required_error: \"Coordenadas são obrigatórias\" }),\n  baseLng: z.number({ required_error: \"Coordenadas são obrigatórias\" }),\n});\n\nexport const withdrawalSchema = z.object({\n  amount: z.number().positive(\"Valor deve ser positivo\"),\n  method: z.enum([\"bank_transfer\", \"pix\"], {\n    required_error: \"Método de saque é obrigatório\",\n  }),\n  pixKey: z.string().optional(),\n  pixKeyType: z.enum([\"cpf\", \"cnpj\", \"email\", \"phone\", \"random\"]).optional(),\n});\n\nexport const paymentMethodSchema = z.object({\n  method: z.enum([\"card\", \"pix\"], {\n    required_error: \"Método de pagamento é obrigatório\",\n  }),\n  serviceRequestId: z.string(),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type InsertServiceRequest = z.infer<typeof insertServiceRequestSchema>;\nexport type ServiceRequest = typeof serviceRequests.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type BankData = z.infer<typeof bankDataSchema>;\nexport type Rating = z.infer<typeof ratingSchema>;\nexport type BaseAddress = z.infer<typeof baseAddressSchema>;\nexport type WithdrawalRequest = z.infer<typeof withdrawalSchema>;\nexport type PaymentMethodSelection = z.infer<typeof paymentMethodSchema>;\n","size_bytes":7561},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider, useQuery } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { AuthProvider, useAuth } from \"@/lib/auth-context\";\nimport { WebSocketProvider } from \"@/lib/websocket\";\nimport { NotificationsProvider } from \"@/lib/use-notifications\";\nimport { MobileNav } from \"@/components/mobile-nav\";\nimport OnboardingPage from \"@/pages/onboarding\";\nimport LoginPage from \"@/pages/login\";\nimport HomePage from \"@/pages/home\";\nimport HistoryPage from \"@/pages/history\";\nimport ProfilePage from \"@/pages/profile\";\nimport WalletPage from \"@/pages/wallet\";\nimport ActiveRidePage from \"@/pages/active-ride\";\nimport ChatPage from \"@/pages/chat\";\nimport PaymentPage from \"@/pages/payment\";\nimport WaitingPage from \"@/pages/waiting\";\nimport AdminWithdrawalsPage from \"@/pages/admin-withdrawals\";\nimport NotFound from \"@/pages/not-found\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nfunction ProtectedRoute({ component: Component }: { component: () => JSX.Element }) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <p className=\"text-muted-foreground\">Carregando...</p>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n    <div className=\"h-screen flex flex-col\">\n      <div className=\"flex-1 overflow-auto pb-16\">\n        <Component />\n      </div>\n      <MobileNav />\n    </div>\n  );\n}\n\nfunction ActiveRideRedirect() {\n  const { user, token } = useAuth();\n  const [location, setLocation] = useLocation();\n  \n  const { data: activeRequest } = useQuery({\n    queryKey: ['/api/service-requests/active'],\n    enabled: !!token && !!user,\n    refetchInterval: 10000,\n  });\n\n  useEffect(() => {\n    if (activeRequest && typeof activeRequest === 'object' && activeRequest !== null && 'id' in activeRequest && !location.startsWith('/ride/')) {\n      setLocation(`/ride/${(activeRequest as any).id}`);\n    }\n  }, [activeRequest, location, setLocation]);\n\n  return null;\n}\n\nfunction Router() {\n  const { user, isLoading } = useAuth();\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const onboardingCompleted = localStorage.getItem('onboarding_completed');\n    if (!onboardingCompleted && !user && location !== '/onboarding') {\n      setLocation('/onboarding');\n    }\n  }, [user, location, setLocation]);\n\n  useEffect(() => {\n    const handleSessionExpired = () => {\n      toast({\n        title: \"Sessão expirada\",\n        description: \"Por favor, faça login novamente para continuar\",\n        variant: \"destructive\",\n      });\n    };\n\n    window.addEventListener('session-expired', handleSessionExpired);\n    return () => window.removeEventListener('session-expired', handleSessionExpired);\n  }, [toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <p className=\"text-muted-foreground\">Carregando...</p>\n      </div>\n    );\n  }\n\n  return (\n    <WebSocketProvider>\n      <ActiveRideRedirect />\n      <Switch>\n        <Route path=\"/onboarding\" component={OnboardingPage} />\n        \n        <Route path=\"/login\">\n          {user ? <Redirect to=\"/\" /> : <LoginPage />}\n        </Route>\n        \n        <Route path=\"/\">\n          <ProtectedRoute component={HomePage} />\n        </Route>\n        \n        <Route path=\"/history\">\n          <ProtectedRoute component={HistoryPage} />\n        </Route>\n        \n        <Route path=\"/wallet\">\n          <ProtectedRoute component={WalletPage} />\n        </Route>\n        \n        <Route path=\"/profile\">\n          <ProtectedRoute component={ProfilePage} />\n        </Route>\n        \n        <Route path=\"/profile/:id\">\n          <ProtectedRoute component={ProfilePage} />\n        </Route>\n        \n        <Route path=\"/payment\">\n          <ProtectedRoute component={PaymentPage} />\n        </Route>\n        \n        <Route path=\"/waiting/:id\">\n          <ProtectedRoute component={WaitingPage} />\n        </Route>\n        \n        <Route path=\"/ride/:id\">\n          <ProtectedRoute component={ActiveRidePage} />\n        </Route>\n        \n        <Route path=\"/ride/:id/chat\">\n          <ProtectedRoute component={ChatPage} />\n        </Route>\n        \n        <Route path=\"/admin/withdrawals\">\n          <ProtectedRoute component={AdminWithdrawalsPage} />\n        </Route>\n        \n        <Route component={NotFound} />\n      </Switch>\n    </WebSocketProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"dark\">\n        <AuthProvider>\n          <NotificationsProvider>\n            <TooltipProvider>\n              <Router />\n              <Toaster />\n            </TooltipProvider>\n          </NotificationsProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":5209},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 210 4% 98%;\n\n  --foreground: 210 6% 12%;\n\n  --border: 210 8% 88%;\n\n  --card: 210 4% 96%;\n\n  --card-foreground: 210 6% 12%;\n\n  --card-border: 210 8% 90%;\n\n  --sidebar: 210 5% 94%;\n\n  --sidebar-foreground: 210 6% 12%;\n\n  --sidebar-border: 210 8% 86%;\n\n  --sidebar-primary: 200 100% 42%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 210 8% 88%;\n\n  --sidebar-accent-foreground: 210 6% 15%;\n\n  --sidebar-ring: 200 100% 42%;\n\n  --popover: 210 6% 92%;\n\n  --popover-foreground: 210 6% 12%;\n\n  --popover-border: 210 8% 84%;\n\n  --primary: 200 100% 42%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 210 8% 86%;\n\n  --secondary-foreground: 210 6% 15%;\n\n  --muted: 210 6% 90%;\n\n  --muted-foreground: 210 6% 45%;\n\n  --accent: 210 12% 88%;\n\n  --accent-foreground: 210 6% 18%;\n\n  --destructive: 0 75% 55%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 210 10% 75%;\n  --ring: 200 100% 42%;\n  --chart-1: 200 100% 35%;\n  --chart-2: 120 60% 35%;\n  --chart-3: 35 100% 45%;\n  --chart-4: 280 60% 45%;\n  --chart-5: 0 75% 45%;\n\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(210 20% 20% / 0.03);\n  --shadow-xs: 0px 2px 0px 0px hsl(210 20% 20% / 0.05);\n  --shadow-sm: 0px 2px 0px 0px hsl(210 20% 20% / 0.05), 0px 1px 2px -1px hsl(210 20% 20% / 0.08);\n  --shadow: 0px 2px 0px 0px hsl(210 20% 20% / 0.05), 0px 1px 2px -1px hsl(210 20% 20% / 0.08);\n  --shadow-md: 0px 2px 0px 0px hsl(210 20% 20% / 0.05), 0px 2px 4px -1px hsl(210 20% 20% / 0.10);\n  --shadow-lg: 0px 2px 0px 0px hsl(210 20% 20% / 0.05), 0px 4px 6px -1px hsl(210 20% 20% / 0.12);\n  --shadow-xl: 0px 2px 0px 0px hsl(210 20% 20% / 0.05), 0px 8px 10px -1px hsl(210 20% 20% / 0.15);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210 20% 20% / 0.08);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 8%;\n\n  --foreground: 220 8% 85%;\n\n  --border: 220 12% 18%;\n\n  --card: 220 12% 12%;\n\n  --card-foreground: 220 8% 85%;\n\n  --card-border: 220 12% 20%;\n\n  --sidebar: 220 15% 10%;\n\n  --sidebar-foreground: 220 8% 85%;\n\n  --sidebar-border: 220 12% 16%;\n\n  --sidebar-primary: 200 100% 50%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 8% 18%;\n\n  --sidebar-accent-foreground: 220 8% 85%;\n\n  --sidebar-ring: 200 100% 50%;\n\n  --popover: 220 12% 15%;\n\n  --popover-foreground: 220 8% 85%;\n\n  --popover-border: 220 12% 22%;\n\n  --primary: 200 100% 50%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 8% 20%;\n\n  --secondary-foreground: 220 8% 85%;\n\n  --muted: 220 8% 16%;\n\n  --muted-foreground: 220 8% 65%;\n\n  --accent: 220 12% 18%;\n\n  --accent-foreground: 220 8% 85%;\n\n  --destructive: 0 75% 55%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 15% 25%;\n  --ring: 200 100% 50%;\n  --chart-1: 200 100% 65%;\n  --chart-2: 120 60% 65%;\n  --chart-3: 35 100% 65%;\n  --chart-4: 280 60% 65%;\n  --chart-5: 0 75% 65%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 15% 5% / 0.20);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 15% 5% / 0.25);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 15% 5% / 0.25), 0px 1px 2px -1px hsl(220 15% 5% / 0.30);\n  --shadow: 0px 2px 0px 0px hsl(220 15% 5% / 0.25), 0px 1px 2px -1px hsl(220 15% 5% / 0.30);\n  --shadow-md: 0px 2px 0px 0px hsl(220 15% 5% / 0.25), 0px 2px 4px -1px hsl(220 15% 5% / 0.35);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 15% 5% / 0.25), 0px 4px 6px -1px hsl(220 15% 5% / 0.40);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 15% 5% / 0.25), 0px 8px 10px -1px hsl(220 15% 5% / 0.45);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 15% 5% / 0.30);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Google Places Autocomplete dropdown z-index fix */\n  .pac-container {\n    z-index: 99999 !important;\n    border-radius: 8px;\n    margin-top: 4px;\n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n    border: 1px solid hsl(var(--border));\n    background-color: hsl(var(--popover)) !important;\n  }\n\n  .pac-container:after {\n    display: none;\n  }\n\n  .pac-item {\n    padding: 12px 16px;\n    cursor: pointer;\n    border: none;\n    font-size: 14px;\n    line-height: 1.5;\n    color: hsl(var(--foreground));\n    transition: background-color 0.15s ease;\n  }\n\n  .pac-item:hover {\n    background-color: hsl(var(--accent)) !important;\n  }\n\n  .pac-item-selected,\n  .pac-item:active {\n    background-color: hsl(var(--primary) / 0.1) !important;\n  }\n\n  .pac-icon {\n    margin-right: 12px;\n    filter: brightness(0) saturate(100%) invert(42%) sepia(98%) saturate(1500%) hue-rotate(180deg);\n  }\n\n  .pac-item-query {\n    font-weight: 600;\n    color: hsl(var(--foreground));\n    display: block;\n  }\n\n  .pac-matched {\n    font-weight: 700;\n    color: hsl(var(--primary));\n  }\n\n  /* Estilização para texto secundário */\n  .pac-item span:last-child {\n    color: hsl(var(--muted-foreground));\n    font-size: 13px;\n  }\n}","size_bytes":11071},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ChatInterface.tsx":{"content":"import { useState } from \"react\";\nimport { Send, Phone, MapPin, Clock } from \"lucide-react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface Message {\n  id: string;\n  senderId: string;\n  senderName: string;\n  content: string;\n  timestamp: string;\n  type: \"text\" | \"location\" | \"status\";\n}\n\ninterface ChatInterfaceProps {\n  serviceId: string;\n  currentUserId: string;\n  otherParticipant: {\n    id: string;\n    name: string;\n    avatar?: string;\n    role: \"client\" | \"provider\";\n    status: \"online\" | \"offline\";\n  };\n  messages: Message[];\n  onSendMessage: (content: string) => void;\n  onSendLocation?: () => void;\n  onCall?: () => void;\n}\n\nexport function ChatInterface({\n  serviceId,\n  currentUserId,\n  otherParticipant,\n  messages,\n  onSendMessage,\n  onSendLocation,\n  onCall,\n}: ChatInterfaceProps) {\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  const handleSend = () => {\n    if (newMessage.trim()) {\n      onSendMessage(newMessage.trim());\n      setNewMessage(\"\");\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  return (\n    <Card className=\"flex flex-col h-full max-h-[600px]\" data-testid={`chat-${serviceId}`}>\n      {/* Chat Header */}\n      <CardHeader className=\"pb-3 border-b\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Avatar className=\"h-10 w-10\">\n              <AvatarImage src={otherParticipant.avatar} />\n              <AvatarFallback>\n                {otherParticipant.name.split(\" \").map(n => n[0]).join(\"\")}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <h3 className=\"font-semibold\">{otherParticipant.name}</h3>\n              <div className=\"flex items-center space-x-2\">\n                <Badge \n                  variant=\"outline\" \n                  className={`text-xs ${\n                    otherParticipant.status === \"online\" \n                      ? \"text-service-available border-service-available\" \n                      : \"text-muted-foreground\"\n                  }`}\n                >\n                  {otherParticipant.status === \"online\" ? \"Online\" : \"Offline\"}\n                </Badge>\n                <span className=\"text-xs text-muted-foreground\">\n                  {otherParticipant.role === \"provider\" ? \"Prestador\" : \"Cliente\"}\n                </span>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex space-x-2\">\n            {onSendLocation && (\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={onSendLocation}\n                data-testid=\"send-location\"\n              >\n                <MapPin className=\"h-4 w-4\" />\n              </Button>\n            )}\n            {onCall && (\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={onCall}\n                data-testid=\"call-button\"\n              >\n                <Phone className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n\n      {/* Messages */}\n      <CardContent className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n        {messages.length === 0 ? (\n          <div className=\"text-center text-muted-foreground py-8\">\n            <p>Nenhuma mensagem ainda.</p>\n            <p className=\"text-sm\">Inicie a conversa!</p>\n          </div>\n        ) : (\n          messages.map((message) => {\n            const isOwnMessage = message.senderId === currentUserId;\n            \n            return (\n              <div\n                key={message.id}\n                className={`flex ${isOwnMessage ? \"justify-end\" : \"justify-start\"}`}\n              >\n                <div\n                  className={`max-w-[70%] rounded-lg p-3 ${\n                    isOwnMessage\n                      ? \"bg-primary text-primary-foreground\"\n                      : \"bg-muted\"\n                  }`}\n                >\n                  {!isOwnMessage && (\n                    <p className=\"text-xs font-medium mb-1\">{message.senderName}</p>\n                  )}\n                  \n                  {message.type === \"location\" ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <MapPin className=\"h-4 w-4\" />\n                      <span>Localização compartilhada</span>\n                    </div>\n                  ) : message.type === \"status\" ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <Clock className=\"h-4 w-4\" />\n                      <span>{message.content}</span>\n                    </div>\n                  ) : (\n                    <p>{message.content}</p>\n                  )}\n                  \n                  <p className={`text-xs mt-1 ${\n                    isOwnMessage \n                      ? \"text-primary-foreground/70\" \n                      : \"text-muted-foreground\"\n                  }`}>\n                    {message.timestamp}\n                  </p>\n                </div>\n              </div>\n            );\n          })\n        )}\n      </CardContent>\n\n      {/* Message Input */}\n      <div className=\"p-4 border-t\">\n        <div className=\"flex space-x-2\">\n          <Input\n            value={newMessage}\n            onChange={(e) => setNewMessage(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"Digite sua mensagem...\"\n            className=\"flex-1\"\n            data-testid=\"message-input\"\n          />\n          <Button \n            onClick={handleSend}\n            disabled={!newMessage.trim()}\n            data-testid=\"send-message\"\n          >\n            <Send className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </Card>\n  );\n}","size_bytes":6116},"client/src/components/LoginScreen.tsx":{"content":"import { useState } from \"react\";\nimport { User, Wrench, Eye, EyeOff } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport heroImage from \"@assets/generated_images/Professional_tow_truck_hero_ddc62c59.png\";\n\ninterface LoginScreenProps {\n  onLogin: (credentials: { email: string; password: string; userType: \"client\" | \"provider\" }) => void;\n}\n\nexport function LoginScreen({ onLogin }: LoginScreenProps) {\n  const [userType, setUserType] = useState<\"client\" | \"provider\">(\"client\");\n  const [isLogin, setIsLogin] = useState(true);\n  const [showPassword, setShowPassword] = useState(false);\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    name: \"\",\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(\"Login attempt:\", { ...formData, userType, isLogin });\n    \n    // TODO: Remove mock functionality\n    // Simulate successful login\n    onLogin({ \n      email: formData.email, \n      password: formData.password, \n      userType \n    });\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Hero Section */}\n      <div className=\"hidden lg:flex lg:w-1/2 relative overflow-hidden\">\n        <div \n          className=\"absolute inset-0 bg-cover bg-center\"\n          style={{ backgroundImage: `url(${heroImage})` }}\n        >\n          <div className=\"absolute inset-0 bg-gradient-to-r from-black/70 to-black/40\" />\n        </div>\n        <div className=\"relative z-10 flex flex-col justify-center px-12 text-white\">\n          <div className=\"max-w-md\">\n            <h1 className=\"text-4xl font-bold mb-6\">\n              Pronto Mecânico\n            </h1>\n            <p className=\"text-xl mb-8 text-gray-200\">\n              Conectando você com profissionais qualificados para emergências automotivas 24 horas por dia.\n            </p>\n            <ul className=\"space-y-3 text-lg\">\n              <li className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full\" />\n                <span>Atendimento 24/7</span>\n              </li>\n              <li className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full\" />\n                <span>Rastreamento em tempo real</span>\n              </li>\n              <li className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full\" />\n                <span>Profissionais verificados</span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      {/* Login Form */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"p-3 rounded-full bg-primary/10\">\n                <Wrench className=\"h-8 w-8 text-primary\" />\n              </div>\n            </div>\n            <CardTitle className=\"text-2xl\">\n              {isLogin ? \"Fazer Login\" : \"Criar Conta\"}\n            </CardTitle>\n            <p className=\"text-muted-foreground\">\n              {isLogin \n                ? \"Entre na sua conta para continuar\" \n                : \"Crie sua conta para começar\"\n              }\n            </p>\n          </CardHeader>\n\n          <CardContent>\n            <Tabs value={userType} onValueChange={(value) => setUserType(value as \"client\" | \"provider\")}>\n              <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n                <TabsTrigger value=\"client\" className=\"flex items-center space-x-2\" data-testid=\"client-tab\">\n                  <User className=\"h-4 w-4\" />\n                  <span>Cliente</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"provider\" className=\"flex items-center space-x-2\" data-testid=\"provider-tab\">\n                  <Wrench className=\"h-4 w-4\" />\n                  <span>Prestador</span>\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"client\" className=\"space-y-4\">\n                <p className=\"text-sm text-muted-foreground text-center\">\n                  Solicite serviços de guincho e mecânico\n                </p>\n              </TabsContent>\n\n              <TabsContent value=\"provider\" className=\"space-y-4\">\n                <p className=\"text-sm text-muted-foreground text-center\">\n                  Ofereça seus serviços para clientes próximos\n                </p>\n              </TabsContent>\n            </Tabs>\n\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              {!isLogin && (\n                <div>\n                  <Label htmlFor=\"name\">Nome Completo</Label>\n                  <Input\n                    id=\"name\"\n                    type=\"text\"\n                    value={formData.name}\n                    onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                    placeholder=\"Seu nome completo\"\n                    required={!isLogin}\n                    data-testid=\"input-name\"\n                  />\n                </div>\n              )}\n\n              <div>\n                <Label htmlFor=\"email\">E-mail</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                  placeholder=\"seu@email.com\"\n                  required\n                  data-testid=\"input-email\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"password\">Senha</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={formData.password}\n                    onChange={(e) => handleInputChange(\"password\", e.target.value)}\n                    placeholder=\"Sua senha\"\n                    required\n                    data-testid=\"input-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    data-testid=\"toggle-password\"\n                  >\n                    {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n              </div>\n\n              {!isLogin && (\n                <div>\n                  <Label htmlFor=\"confirmPassword\">Confirmar Senha</Label>\n                  <Input\n                    id=\"confirmPassword\"\n                    type=\"password\"\n                    value={formData.confirmPassword}\n                    onChange={(e) => handleInputChange(\"confirmPassword\", e.target.value)}\n                    placeholder=\"Confirme sua senha\"\n                    required={!isLogin}\n                    data-testid=\"input-confirm-password\"\n                  />\n                </div>\n              )}\n\n              <Button type=\"submit\" className=\"w-full\" data-testid=\"submit-button\">\n                {isLogin ? \"Entrar\" : \"Criar Conta\"}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center\">\n              <button\n                type=\"button\"\n                onClick={() => setIsLogin(!isLogin)}\n                className=\"text-sm text-primary hover:underline\"\n                data-testid=\"toggle-mode\"\n              >\n                {isLogin \n                  ? \"Não tem uma conta? Criar conta\" \n                  : \"Já tem uma conta? Fazer login\"\n                }\n              </button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8305},"client/src/components/MapView.tsx":{"content":"import { MapPin, Navigation, Phone } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\ninterface LocationData {\n  id: string;\n  name: string;\n  type: \"client\" | \"provider\" | \"destination\";\n  latitude: number;\n  longitude: number;\n  address: string;\n  avatar?: string;\n  status?: \"online\" | \"offline\" | \"in-transit\";\n  estimatedArrival?: string;\n}\n\ninterface MapViewProps {\n  currentLocation?: LocationData;\n  providerLocation?: LocationData;\n  destinationLocation?: LocationData;\n  serviceId?: string;\n  onCallProvider?: () => void;\n  onShareLocation?: () => void;\n}\n\nexport function MapView({\n  currentLocation,\n  providerLocation,\n  destinationLocation,\n  serviceId,\n  onCallProvider,\n  onShareLocation,\n}: MapViewProps) {\n  // TODO: Integrate with real map service (Google Maps, OpenStreetMap, etc.)\n  \n  return (\n    <div className=\"space-y-4\">\n      {/* Map Container */}\n      <Card className=\"h-96 md:h-[500px]\">\n        <CardContent className=\"p-0 h-full relative overflow-hidden rounded-lg\">\n          {/* Placeholder Map */}\n          <div className=\"absolute inset-0 bg-gradient-to-br from-blue-100 to-green-100 dark:from-blue-900/20 dark:to-green-900/20\">\n            <div className=\"absolute inset-0 opacity-10\">\n              <svg viewBox=\"0 0 400 300\" className=\"w-full h-full\">\n                {/* Simulated street lines */}\n                <line x1=\"0\" y1=\"100\" x2=\"400\" y2=\"100\" stroke=\"currentColor\" strokeWidth=\"2\" />\n                <line x1=\"0\" y1=\"200\" x2=\"400\" y2=\"200\" stroke=\"currentColor\" strokeWidth=\"2\" />\n                <line x1=\"100\" y1=\"0\" x2=\"100\" y2=\"300\" stroke=\"currentColor\" strokeWidth=\"2\" />\n                <line x1=\"200\" y1=\"0\" x2=\"200\" y2=\"300\" stroke=\"currentColor\" strokeWidth=\"2\" />\n                <line x1=\"300\" y1=\"0\" x2=\"300\" y2=\"300\" stroke=\"currentColor\" strokeWidth=\"2\" />\n              </svg>\n            </div>\n          </div>\n\n          {/* Current Location Pin */}\n          {currentLocation && (\n            <div \n              className=\"absolute z-10 transform -translate-x-1/2 -translate-y-1/2\"\n              style={{ left: \"30%\", top: \"70%\" }}\n              data-testid=\"current-location-pin\"\n            >\n              <div className=\"relative\">\n                <div className=\"w-6 h-6 bg-primary rounded-full border-2 border-white shadow-lg flex items-center justify-center\">\n                  <div className=\"w-2 h-2 bg-white rounded-full\" />\n                </div>\n                <div className=\"absolute top-8 left-1/2 transform -translate-x-1/2 bg-white dark:bg-card border rounded-lg px-2 py-1 shadow-lg whitespace-nowrap\">\n                  <p className=\"text-xs font-medium\">Você está aqui</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Provider Location Pin */}\n          {providerLocation && (\n            <div \n              className=\"absolute z-10 transform -translate-x-1/2 -translate-y-1/2\"\n              style={{ left: \"50%\", top: \"40%\" }}\n              data-testid=\"provider-location-pin\"\n            >\n              <div className=\"relative\">\n                <div className=\"w-8 h-8 bg-service-available rounded-full border-2 border-white shadow-lg flex items-center justify-center\">\n                  <Navigation className=\"w-4 h-4 text-white\" />\n                </div>\n                <div className=\"absolute top-10 left-1/2 transform -translate-x-1/2 bg-white dark:bg-card border rounded-lg px-2 py-1 shadow-lg\">\n                  <p className=\"text-xs font-medium\">{providerLocation.name}</p>\n                  {providerLocation.estimatedArrival && (\n                    <p className=\"text-xs text-muted-foreground\">\n                      Chega em {providerLocation.estimatedArrival}\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Destination Pin */}\n          {destinationLocation && (\n            <div \n              className=\"absolute z-10 transform -translate-x-1/2 -translate-y-1/2\"\n              style={{ left: \"70%\", top: \"30%\" }}\n              data-testid=\"destination-pin\"\n            >\n              <div className=\"relative\">\n                <div className=\"w-6 h-6 bg-destructive rounded-full border-2 border-white shadow-lg flex items-center justify-center\">\n                  <MapPin className=\"w-3 h-3 text-white\" />\n                </div>\n                <div className=\"absolute top-8 left-1/2 transform -translate-x-1/2 bg-white dark:bg-card border rounded-lg px-2 py-1 shadow-lg whitespace-nowrap\">\n                  <p className=\"text-xs font-medium\">Destino</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Route Line (simulated) */}\n          {currentLocation && providerLocation && (\n            <svg className=\"absolute inset-0 w-full h-full z-5\">\n              <line \n                x1=\"30%\" \n                y1=\"70%\" \n                x2=\"50%\" \n                y2=\"40%\" \n                stroke=\"rgb(59 130 246)\" \n                strokeWidth=\"3\" \n                strokeDasharray=\"5,5\"\n                className=\"opacity-70\"\n              />\n            </svg>\n          )}\n\n          {/* Map Controls */}\n          <div className=\"absolute top-4 right-4 space-y-2 z-20\">\n            <Button size=\"sm\" variant=\"secondary\" className=\"w-10 h-10 p-0\">\n              +\n            </Button>\n            <Button size=\"sm\" variant=\"secondary\" className=\"w-10 h-10 p-0\">\n              −\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Location Info Panel */}\n      {providerLocation && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg\">Prestador a Caminho</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center space-x-3\">\n              <Avatar className=\"h-12 w-12\">\n                <AvatarImage src={providerLocation.avatar} />\n                <AvatarFallback>\n                  {providerLocation.name.split(\" \").map(n => n[0]).join(\"\")}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1\">\n                <h4 className=\"font-medium\">{providerLocation.name}</h4>\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <Badge \n                    className={`text-xs ${\n                      providerLocation.status === \"in-transit\" \n                        ? \"bg-service-transit\" \n                        : \"bg-service-available\"\n                    }`}\n                  >\n                    {providerLocation.status === \"in-transit\" ? \"Em Trânsito\" : \"Online\"}\n                  </Badge>\n                  {providerLocation.estimatedArrival && (\n                    <span className=\"text-sm text-muted-foreground\">\n                      Chega em {providerLocation.estimatedArrival}\n                    </span>\n                  )}\n                </div>\n              </div>\n              <div className=\"flex space-x-2\">\n                {onShareLocation && (\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={onShareLocation}\n                    data-testid=\"share-location\"\n                  >\n                    <MapPin className=\"h-4 w-4 mr-2\" />\n                    Compartilhar\n                  </Button>\n                )}\n                {onCallProvider && (\n                  <Button \n                    size=\"sm\"\n                    onClick={onCallProvider}\n                    data-testid=\"call-provider\"\n                  >\n                    <Phone className=\"h-4 w-4 mr-2\" />\n                    Ligar\n                  </Button>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Current Location Card */}\n      {currentLocation && (\n        <Card>\n          <CardContent className=\"pt-4\">\n            <div className=\"flex items-start space-x-2\">\n              <MapPin className=\"h-4 w-4 text-muted-foreground mt-0.5\" />\n              <div>\n                <p className=\"text-sm font-medium\">Sua localização atual</p>\n                <p className=\"text-sm text-muted-foreground\">{currentLocation.address}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":8624},"client/src/components/Navigation.tsx":{"content":"import { Home, MessageSquare, MapPin, User, Wrench, Phone } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface NavigationProps {\n  userType: \"client\" | \"provider\";\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n  unreadMessages?: number;\n}\n\nexport function Navigation({ userType, activeTab, onTabChange, unreadMessages = 0 }: NavigationProps) {\n  const clientTabs = [\n    { id: \"home\", label: \"Início\", icon: Home },\n    { id: \"requests\", label: \"Pedidos\", icon: Wrench },\n    { id: \"map\", label: \"Mapa\", icon: MapPin },\n    { id: \"chat\", label: \"Chat\", icon: MessageSquare },\n    { id: \"profile\", label: \"Perfil\", icon: User },\n  ];\n\n  const providerTabs = [\n    { id: \"dashboard\", label: \"Painel\", icon: Home },\n    { id: \"available\", label: \"Disponíveis\", icon: Wrench },\n    { id: \"active\", label: \"Ativo\", icon: MapPin },\n    { id: \"chat\", label: \"Chat\", icon: MessageSquare },\n    { id: \"profile\", label: \"Perfil\", icon: User },\n  ];\n\n  const tabs = userType === \"client\" ? clientTabs : providerTabs;\n\n  return (\n    <>\n      {/* Desktop Navigation */}\n      <nav className=\"hidden md:flex items-center justify-between p-4 border-b bg-card\">\n        <div className=\"flex items-center space-x-2\">\n          <Wrench className=\"h-8 w-8 text-primary\" />\n          <span className=\"text-xl font-bold\">Pronto Mecânico</span>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {tabs.map((tab) => {\n            const Icon = tab.icon;\n            return (\n              <Button\n                key={tab.id}\n                variant={activeTab === tab.id ? \"default\" : \"ghost\"}\n                onClick={() => onTabChange(tab.id)}\n                className=\"relative\"\n                data-testid={`nav-${tab.id}`}\n              >\n                <Icon className=\"h-4 w-4 mr-2\" />\n                {tab.label}\n                {tab.id === \"chat\" && unreadMessages > 0 && (\n                  <Badge className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs bg-service-notification\">\n                    {unreadMessages}\n                  </Badge>\n                )}\n              </Button>\n            );\n          })}\n          \n          <Button variant=\"destructive\" size=\"sm\" data-testid=\"emergency-call\">\n            <Phone className=\"h-4 w-4 mr-2\" />\n            Emergência\n          </Button>\n        </div>\n      </nav>\n\n      {/* Mobile Navigation */}\n      <nav className=\"md:hidden fixed bottom-0 left-0 right-0 bg-card border-t z-50\">\n        <div className=\"flex items-center justify-around py-2\">\n          {tabs.map((tab) => {\n            const Icon = tab.icon;\n            return (\n              <button\n                key={tab.id}\n                onClick={() => onTabChange(tab.id)}\n                className={`flex flex-col items-center space-y-1 p-2 rounded-lg transition-colors ${\n                  activeTab === tab.id ? \"text-primary\" : \"text-muted-foreground\"\n                }`}\n                data-testid={`mobile-nav-${tab.id}`}\n              >\n                <div className=\"relative\">\n                  <Icon className=\"h-5 w-5\" />\n                  {tab.id === \"chat\" && unreadMessages > 0 && (\n                    <Badge className=\"absolute -top-1 -right-1 h-4 w-4 flex items-center justify-center p-0 text-xs bg-service-notification\">\n                      {unreadMessages > 9 ? \"9+\" : unreadMessages}\n                    </Badge>\n                  )}\n                </div>\n                <span className=\"text-xs\">{tab.label}</span>\n              </button>\n            );\n          })}\n        </div>\n      </nav>\n    </>\n  );\n}","size_bytes":3716},"client/src/components/ProviderDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { MapPin, Clock, Phone, MessageSquare, CheckCircle, XCircle } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface ServiceRequest {\n  id: string;\n  clientName: string;\n  serviceType: \"tow\" | \"mechanic\" | \"emergency\";\n  location: string;\n  description: string;\n  distance: string;\n  estimatedPay: string;\n  urgency: \"low\" | \"medium\" | \"high\";\n  requestTime: string;\n}\n\ninterface ActiveService {\n  id: string;\n  clientName: string;\n  serviceType: \"tow\" | \"mechanic\" | \"emergency\";\n  fromLocation: string;\n  toLocation?: string;\n  description: string;\n  status: \"accepted\" | \"in-transit\" | \"working\";\n  startTime: string;\n  estimatedCompletion: string;\n}\n\ninterface ProviderDashboardProps {\n  providerName: string;\n  isOnline: boolean;\n  onToggleStatus: (online: boolean) => void;\n  availableRequests: ServiceRequest[];\n  activeService?: ActiveService;\n  onAcceptRequest: (requestId: string) => void;\n  onRejectRequest: (requestId: string) => void;\n  onUpdateStatus: (status: string) => void;\n  onCompleteService: () => void;\n  onChat: () => void;\n  onCall: () => void;\n}\n\nconst urgencyConfig = {\n  low: { label: \"Baixa\", color: \"bg-muted-foreground\" },\n  medium: { label: \"Média\", color: \"bg-service-transit\" },\n  high: { label: \"Alta\", color: \"bg-service-emergency\" },\n};\n\nconst serviceTypeLabels = {\n  tow: \"Guincho\",\n  mechanic: \"Mecânico\", \n  emergency: \"Emergência\",\n};\n\nexport function ProviderDashboard({\n  providerName,\n  isOnline,\n  onToggleStatus,\n  availableRequests,\n  activeService,\n  onAcceptRequest,\n  onRejectRequest,\n  onUpdateStatus,\n  onCompleteService,\n  onChat,\n  onCall,\n}: ProviderDashboardProps) {\n  const [selectedTab, setSelectedTab] = useState(\"available\");\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Bem-vindo, {providerName}</CardTitle>\n              <p className=\"text-muted-foreground\">\n                {isOnline ? \"Você está online e disponível\" : \"Você está offline\"}\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Label htmlFor=\"status-toggle\">Status</Label>\n              <Switch\n                id=\"status-toggle\"\n                checked={isOnline}\n                onCheckedChange={onToggleStatus}\n                data-testid=\"status-toggle\"\n              />\n              <Badge className={isOnline ? \"bg-service-available\" : \"bg-muted-foreground\"}>\n                {isOnline ? \"Online\" : \"Offline\"}\n              </Badge>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Active Service */}\n      {activeService && (\n        <Card className=\"border-service-available\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <CheckCircle className=\"h-5 w-5 text-service-available\" />\n              <span>Serviço Ativo</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <p className=\"font-medium\">{activeService.clientName}</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  {serviceTypeLabels[activeService.serviceType]} • #{activeService.id.slice(-6)}\n                </p>\n              </div>\n              <div className=\"text-right\">\n                <Badge className=\"bg-service-available\">\n                  {activeService.status === \"accepted\" && \"Aceito\"}\n                  {activeService.status === \"in-transit\" && \"Em Trânsito\"}\n                  {activeService.status === \"working\" && \"Trabalhando\"}\n                </Badge>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <div className=\"flex items-start space-x-2\">\n                <MapPin className=\"h-4 w-4 text-muted-foreground mt-0.5\" />\n                <div>\n                  <p className=\"text-sm font-medium\">Origem</p>\n                  <p className=\"text-sm text-muted-foreground\">{activeService.fromLocation}</p>\n                </div>\n              </div>\n              {activeService.toLocation && (\n                <div className=\"flex items-start space-x-2\">\n                  <MapPin className=\"h-4 w-4 text-primary mt-0.5\" />\n                  <div>\n                    <p className=\"text-sm font-medium\">Destino</p>\n                    <p className=\"text-sm text-muted-foreground\">{activeService.toLocation}</p>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <div className=\"p-3 bg-muted rounded-lg\">\n              <p className=\"text-sm\">{activeService.description}</p>\n            </div>\n\n            <div className=\"flex items-center justify-between text-sm\">\n              <div className=\"flex items-center space-x-1\">\n                <Clock className=\"h-3 w-3\" />\n                <span>Iniciado às {activeService.startTime}</span>\n              </div>\n              <span className=\"text-muted-foreground\">\n                Previsão: {activeService.estimatedCompletion}\n              </span>\n            </div>\n\n            <div className=\"flex space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={onChat}\n                className=\"flex-1\"\n                data-testid=\"active-chat\"\n              >\n                <MessageSquare className=\"h-4 w-4 mr-2\" />\n                Chat\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={onCall}\n                className=\"flex-1\"\n                data-testid=\"active-call\"\n              >\n                <Phone className=\"h-4 w-4 mr-2\" />\n                Ligar\n              </Button>\n              {activeService.status === \"working\" && (\n                <Button\n                  onClick={onCompleteService}\n                  className=\"flex-1\"\n                  data-testid=\"complete-service\"\n                >\n                  <CheckCircle className=\"h-4 w-4 mr-2\" />\n                  Concluir\n                </Button>\n              )}\n            </div>\n\n            {activeService.status !== \"working\" && (\n              <div className=\"flex space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => onUpdateStatus(\"in-transit\")}\n                  disabled={activeService.status !== \"accepted\"}\n                  data-testid=\"start-transit\"\n                >\n                  Iniciar Trânsito\n                </Button>\n                <Button\n                  onClick={() => onUpdateStatus(\"working\")}\n                  disabled={activeService.status !== \"in-transit\"}\n                  data-testid=\"start-working\"\n                >\n                  Iniciar Trabalho\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Available Requests */}\n      {!activeService && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Solicitações Disponíveis</CardTitle>\n            <p className=\"text-muted-foreground\">\n              {availableRequests.length} solicitações próximas a você\n            </p>\n          </CardHeader>\n          <CardContent>\n            {availableRequests.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <p>Nenhuma solicitação disponível no momento.</p>\n                <p className=\"text-sm\">Novas solicitações aparecerão aqui automaticamente.</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {availableRequests.map((request) => {\n                  const urgencyStyle = urgencyConfig[request.urgency];\n                  \n                  return (\n                    <Card key={request.id} className=\"hover-elevate\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div>\n                            <h4 className=\"font-medium\">{request.clientName}</h4>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {serviceTypeLabels[request.serviceType]} • #{request.id.slice(-6)}\n                            </p>\n                          </div>\n                          <div className=\"flex space-x-2\">\n                            <Badge className={`${urgencyStyle.color} text-white`}>\n                              {urgencyStyle.label}\n                            </Badge>\n                            {request.serviceType === \"emergency\" && (\n                              <Badge className=\"bg-service-emergency text-white\">\n                                Urgente\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n\n                        <div className=\"space-y-2 mb-3\">\n                          <div className=\"flex items-start space-x-2\">\n                            <MapPin className=\"h-4 w-4 text-muted-foreground mt-0.5\" />\n                            <div>\n                              <p className=\"text-sm font-medium\">Local</p>\n                              <p className=\"text-sm text-muted-foreground\">{request.location}</p>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"p-2 bg-muted rounded text-sm mb-3\">\n                          {request.description}\n                        </div>\n\n                        <div className=\"flex items-center justify-between text-sm text-muted-foreground mb-3\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"flex items-center space-x-1\">\n                              <MapPin className=\"h-3 w-3\" />\n                              <span>{request.distance}</span>\n                            </div>\n                            <div className=\"flex items-center space-x-1\">\n                              <Clock className=\"h-3 w-3\" />\n                              <span>{request.requestTime}</span>\n                            </div>\n                          </div>\n                          <span className=\"font-medium text-foreground\">\n                            {request.estimatedPay}\n                          </span>\n                        </div>\n\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            onClick={() => onRejectRequest(request.id)}\n                            className=\"flex-1\"\n                            data-testid={`reject-${request.id}`}\n                          >\n                            <XCircle className=\"h-4 w-4 mr-2\" />\n                            Recusar\n                          </Button>\n                          <Button\n                            onClick={() => onAcceptRequest(request.id)}\n                            className=\"flex-1\"\n                            data-testid={`accept-${request.id}`}\n                          >\n                            <CheckCircle className=\"h-4 w-4 mr-2\" />\n                            Aceitar\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":12036},"client/src/components/ServiceRequestCard.tsx":{"content":"import { Clock, MapPin, User, Wrench, Phone, MessageSquare } from \"lucide-react\";\nimport { Card, CardContent, CardFooter, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\nexport type ServiceStatus = \"pending\" | \"accepted\" | \"in-transit\" | \"completed\";\nexport type ServiceType = \"tow\" | \"mechanic\" | \"emergency\";\n\ninterface ServiceRequestCardProps {\n  id: string;\n  serviceType: ServiceType;\n  status: ServiceStatus;\n  fromAddress: string;\n  toAddress?: string;\n  description: string;\n  requestTime: string;\n  estimatedPrice?: string;\n  providerName?: string;\n  providerAvatar?: string;\n  providerRating?: number;\n  estimatedArrival?: string;\n  distance?: string;\n  onAccept?: () => void;\n  onReject?: () => void;\n  onChat?: () => void;\n  onCall?: () => void;\n  viewType: \"client\" | \"provider\";\n}\n\nconst statusConfig = {\n  pending: { label: \"Pendente\", color: \"bg-muted-foreground\" },\n  accepted: { label: \"Aceito\", color: \"bg-service-available\" },\n  \"in-transit\": { label: \"Em Trânsito\", color: \"bg-service-transit\" },\n  completed: { label: \"Concluído\", color: \"bg-service-available\" },\n};\n\nconst serviceConfig = {\n  tow: { label: \"Guincho\", icon: Wrench },\n  mechanic: { label: \"Mecânico\", icon: Wrench },\n  emergency: { label: \"Emergência\", icon: Phone },\n};\n\nexport function ServiceRequestCard({\n  id,\n  serviceType,\n  status,\n  fromAddress,\n  toAddress,\n  description,\n  requestTime,\n  estimatedPrice,\n  providerName,\n  providerAvatar,\n  providerRating,\n  estimatedArrival,\n  distance,\n  onAccept,\n  onReject,\n  onChat,\n  onCall,\n  viewType,\n}: ServiceRequestCardProps) {\n  const statusStyle = statusConfig[status];\n  const serviceStyle = serviceConfig[serviceType];\n  const ServiceIcon = serviceStyle.icon;\n\n  return (\n    <Card className=\"w-full hover-elevate\" data-testid={`service-card-${id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"p-2 rounded-lg bg-primary/10\">\n              <ServiceIcon className=\"h-4 w-4 text-primary\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold\">{serviceStyle.label}</h3>\n              <p className=\"text-sm text-muted-foreground\">#{id.slice(-6)}</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Badge className={`${statusStyle.color} text-white`}>\n              {statusStyle.label}\n            </Badge>\n            {serviceType === \"emergency\" && (\n              <Badge className=\"bg-service-emergency text-white\">\n                Urgente\n              </Badge>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <div className=\"flex items-start space-x-2\">\n            <MapPin className=\"h-4 w-4 text-muted-foreground mt-0.5\" />\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium\">Origem</p>\n              <p className=\"text-sm text-muted-foreground\">{fromAddress}</p>\n            </div>\n          </div>\n          {toAddress && (\n            <div className=\"flex items-start space-x-2\">\n              <MapPin className=\"h-4 w-4 text-primary mt-0.5\" />\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium\">Destino</p>\n                <p className=\"text-sm text-muted-foreground\">{toAddress}</p>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"p-3 bg-muted rounded-lg\">\n          <p className=\"text-sm\">{description}</p>\n        </div>\n\n        <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n          <div className=\"flex items-center space-x-1\">\n            <Clock className=\"h-3 w-3\" />\n            <span>{requestTime}</span>\n          </div>\n          {distance && (\n            <div className=\"flex items-center space-x-1\">\n              <MapPin className=\"h-3 w-3\" />\n              <span>{distance}</span>\n            </div>\n          )}\n        </div>\n\n        {providerName && (\n          <div className=\"flex items-center space-x-3 p-3 bg-card rounded-lg border\">\n            <Avatar className=\"h-10 w-10\">\n              <AvatarImage src={providerAvatar} />\n              <AvatarFallback>\n                {providerName.split(\" \").map(n => n[0]).join(\"\")}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1\">\n              <p className=\"font-medium\">{providerName}</p>\n              <div className=\"flex items-center space-x-1\">\n                <span className=\"text-sm text-muted-foreground\">\n                  ⭐ {providerRating}/5.0\n                </span>\n                {estimatedArrival && (\n                  <span className=\"text-sm text-service-transit\">\n                    • Chega em {estimatedArrival}\n                  </span>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {estimatedPrice && (\n          <div className=\"text-right\">\n            <p className=\"text-sm text-muted-foreground\">Preço estimado</p>\n            <p className=\"text-lg font-bold text-primary\">{estimatedPrice}</p>\n          </div>\n        )}\n      </CardContent>\n\n      <CardFooter className=\"pt-0\">\n        {viewType === \"provider\" && status === \"pending\" && (\n          <div className=\"flex space-x-2 w-full\">\n            <Button \n              variant=\"outline\" \n              onClick={onReject}\n              className=\"flex-1\"\n              data-testid={`reject-${id}`}\n            >\n              Recusar\n            </Button>\n            <Button \n              onClick={onAccept}\n              className=\"flex-1\"\n              data-testid={`accept-${id}`}\n            >\n              Aceitar\n            </Button>\n          </div>\n        )}\n\n        {(status === \"accepted\" || status === \"in-transit\") && (\n          <div className=\"flex space-x-2 w-full\">\n            <Button \n              variant=\"outline\" \n              onClick={onChat}\n              className=\"flex-1\"\n              data-testid={`chat-${id}`}\n            >\n              <MessageSquare className=\"h-4 w-4 mr-2\" />\n              Chat\n            </Button>\n            <Button \n              variant=\"outline\" \n              onClick={onCall}\n              className=\"flex-1\"\n              data-testid={`call-${id}`}\n            >\n              <Phone className=\"h-4 w-4 mr-2\" />\n              Ligar\n            </Button>\n          </div>\n        )}\n      </CardFooter>\n    </Card>\n  );\n}","size_bytes":6755},"client/src/components/ServiceRequestForm.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { MapPin, Wrench, Phone, AlertCircle, Search, Loader2 } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useMapsLibrary } from \"@vis.gl/react-google-maps\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst GOOGLE_MAPS_API_KEY = import.meta.env.VITE_GOOGLE_MAPS_API_KEY || '';\n\ninterface ServiceRequestFormProps {\n  onSubmit: (requestData: ServiceRequestData) => void;\n  onCancel: () => void;\n}\n\nexport interface ServiceRequestData {\n  serviceType: \"tow\" | \"mechanic\" | \"emergency\";\n  fromAddress: string;\n  toAddress?: string;\n  description: string;\n  urgency: \"normal\" | \"urgent\";\n  needsDestination: boolean;\n  contactPhone: string;\n}\n\nfunction AddressAutocomplete({ \n  value,\n  onAddressChange,\n  placeholder = \"Digite o endereço...\"\n}: { \n  value: string;\n  onAddressChange: (address: string) => void;\n  placeholder?: string;\n}) {\n  const places = useMapsLibrary('places');\n  const inputRef = useRef<HTMLInputElement>(null);\n  const autocompleteRef = useRef<google.maps.places.Autocomplete | null>(null);\n\n  // Sync external value changes (like from GPS) to the input\n  useEffect(() => {\n    if (inputRef.current && value !== undefined && value !== inputRef.current.value) {\n      inputRef.current.value = value;\n    }\n  }, [value]);\n\n  useEffect(() => {\n    if (!places || !inputRef.current) return;\n\n    const options = {\n      componentRestrictions: { country: 'br' },\n      fields: ['formatted_address', 'geometry', 'name', 'address_components'],\n      types: ['address'],\n    };\n\n    autocompleteRef.current = new places.Autocomplete(inputRef.current, options);\n\n    autocompleteRef.current.addListener('place_changed', () => {\n      const place = autocompleteRef.current?.getPlace();\n      if (place?.formatted_address) {\n        onAddressChange(place.formatted_address);\n      }\n    });\n\n    // Also sync manual typing to parent state\n    const handleInput = (e: Event) => {\n      const target = e.target as HTMLInputElement;\n      onAddressChange(target.value);\n    };\n    \n    inputRef.current.addEventListener('input', handleInput);\n    const currentInput = inputRef.current;\n\n    return () => {\n      if (autocompleteRef.current) {\n        google.maps.event.clearInstanceListeners(autocompleteRef.current);\n      }\n      if (currentInput) {\n        currentInput.removeEventListener('input', handleInput);\n      }\n    };\n  }, [places, onAddressChange]);\n\n  return (\n    <div className=\"relative flex-1\">\n      <input\n        ref={inputRef}\n        defaultValue={value || ''}\n        placeholder={placeholder}\n        data-testid=\"input-address-autocomplete\"\n        autoComplete=\"off\"\n        className=\"flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 pr-10 text-sm shadow-sm transition-colors placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\"\n      />\n      <Search className=\"absolute right-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground pointer-events-none\" />\n    </div>\n  );\n}\n\nexport function ServiceRequestForm({ onSubmit, onCancel }: ServiceRequestFormProps) {\n  const [formData, setFormData] = useState<ServiceRequestData>({\n    serviceType: \"mechanic\",\n    fromAddress: \"\",\n    toAddress: \"\",\n    description: \"\",\n    urgency: \"normal\",\n    needsDestination: false,\n    contactPhone: \"\",\n  });\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isLoadingLocation, setIsLoadingLocation] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    \n    console.log(\"Submitting service request:\", formData);\n    \n    try {\n      // TODO: Remove mock functionality\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\n      onSubmit(formData);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleInputChange = (field: keyof ServiceRequestData, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const reverseGeocode = async (lat: number, lng: number) => {\n    if (!GOOGLE_MAPS_API_KEY) return;\n    \n    try {\n      const response = await fetch(\n        `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lng}&key=${GOOGLE_MAPS_API_KEY}`\n      );\n      const data = await response.json();\n      \n      if (data.results && data.results.length > 0) {\n        handleInputChange(\"fromAddress\", data.results[0].formatted_address);\n      }\n    } catch (error) {\n      console.error('Erro ao obter endereço:', error);\n    }\n  };\n\n  const getCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      toast({\n        title: \"GPS não disponível\",\n        description: \"Seu navegador não suporta geolocalização\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoadingLocation(true);\n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        const location = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        };\n        \n        await reverseGeocode(location.lat, location.lng);\n        \n        toast({\n          title: \"Localização obtida\",\n          description: \"Sua localização foi identificada com sucesso\",\n        });\n        \n        setIsLoadingLocation(false);\n      },\n      (error) => {\n        console.error('Geolocation error:', error);\n        setIsLoadingLocation(false);\n        \n        let errorMessage = \"Não foi possível obter sua localização\";\n        if (error.code === 1) {\n          errorMessage = \"Permissão de localização negada. Digite o endereço manualmente.\";\n        } else if (error.code === 2) {\n          errorMessage = \"Localização indisponível. Digite o endereço manualmente.\";\n        } else if (error.code === 3) {\n          errorMessage = \"Tempo esgotado. Digite o endereço manualmente.\";\n        }\n        \n        toast({\n          title: \"Erro de localização\",\n          description: errorMessage,\n          variant: \"destructive\",\n        });\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 0\n      }\n    );\n  };\n\n  const serviceTypes = [\n    {\n      id: \"mechanic\",\n      label: \"Mecânico\",\n      description: \"Reparo no local\",\n      icon: Wrench,\n    },\n    {\n      id: \"tow\", \n      label: \"Guincho\",\n      description: \"Remoção do veículo\",\n      icon: Wrench,\n    },\n    {\n      id: \"emergency\",\n      label: \"Emergência\",\n      description: \"Atendimento urgente\",\n      icon: Phone,\n    },\n  ];\n\n  return (\n    <Card className=\"w-full max-w-2xl\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <Wrench className=\"h-6 w-6 text-primary\" />\n          <span>Solicitar Serviço</span>\n        </CardTitle>\n        <p className=\"text-muted-foreground\">\n          Preencha os dados para solicitar um serviço\n        </p>\n      </CardHeader>\n\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Service Type */}\n          <div>\n            <Label className=\"text-base font-medium\">Tipo de Serviço</Label>\n            <RadioGroup\n              value={formData.serviceType}\n              onValueChange={(value) => handleInputChange(\"serviceType\", value)}\n              className=\"mt-2\"\n            >\n              {serviceTypes.map((service) => {\n                const Icon = service.icon;\n                return (\n                  <div \n                    key={service.id}\n                    className=\"flex items-center space-x-3 rounded-lg border p-4 hover-elevate\"\n                    data-testid={`service-type-${service.id}`}\n                  >\n                    <RadioGroupItem value={service.id} id={service.id} />\n                    <div className=\"flex items-center space-x-3 flex-1\">\n                      <div className=\"p-2 rounded-lg bg-primary/10\">\n                        <Icon className=\"h-4 w-4 text-primary\" />\n                      </div>\n                      <div>\n                        <Label htmlFor={service.id} className=\"font-medium cursor-pointer\">\n                          {service.label}\n                        </Label>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {service.description}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </RadioGroup>\n          </div>\n\n          {/* From Address */}\n          <div>\n            <Label htmlFor=\"fromAddress\">Local Atual</Label>\n            <div className=\"flex space-x-2 mt-1\">\n              <AddressAutocomplete\n                value={formData.fromAddress}\n                onAddressChange={(address) => handleInputChange(\"fromAddress\", address)}\n                placeholder=\"Digite o endereço ou use GPS\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={getCurrentLocation}\n                disabled={isLoadingLocation}\n                data-testid=\"button-get-location\"\n              >\n                {isLoadingLocation ? (\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  <MapPin className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n          </div>\n\n          {/* Destination Address */}\n          <div>\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Checkbox\n                id=\"needsDestination\"\n                checked={formData.needsDestination}\n                onCheckedChange={(checked) => handleInputChange(\"needsDestination\", checked)}\n                data-testid=\"needs-destination\"\n              />\n              <Label htmlFor=\"needsDestination\">Preciso de transporte para outro local</Label>\n            </div>\n            \n            {formData.needsDestination && (\n              <AddressAutocomplete\n                value={formData.toAddress || \"\"}\n                onAddressChange={(address) => handleInputChange(\"toAddress\", address)}\n                placeholder=\"Digite o endereço de destino\"\n              />\n            )}\n          </div>\n\n          {/* Description */}\n          <div>\n            <Label htmlFor=\"description\">Descrição do Problema</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => handleInputChange(\"description\", e.target.value)}\n              placeholder=\"Descreva detalhadamente o problema com seu veículo...\"\n              className=\"mt-1\"\n              rows={4}\n              required\n              data-testid=\"input-description\"\n            />\n          </div>\n\n          {/* Contact Phone */}\n          <div>\n            <Label htmlFor=\"contactPhone\">Telefone de Contato</Label>\n            <Input\n              id=\"contactPhone\"\n              type=\"tel\"\n              value={formData.contactPhone}\n              onChange={(e) => handleInputChange(\"contactPhone\", e.target.value)}\n              placeholder=\"(11) 99999-9999\"\n              required\n              data-testid=\"input-phone\"\n            />\n          </div>\n\n          {/* Urgency */}\n          <div>\n            <Label className=\"text-base font-medium\">Urgência</Label>\n            <RadioGroup\n              value={formData.urgency}\n              onValueChange={(value) => handleInputChange(\"urgency\", value)}\n              className=\"mt-2\"\n            >\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"normal\" id=\"normal\" />\n                <Label htmlFor=\"normal\">Normal</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"urgent\" id=\"urgent\" />\n                <Label htmlFor=\"urgent\" className=\"flex items-center space-x-2\">\n                  <span>Urgente</span>\n                  <AlertCircle className=\"h-4 w-4 text-service-emergency\" />\n                </Label>\n              </div>\n            </RadioGroup>\n          </div>\n\n          {/* Emergency Warning */}\n          {formData.serviceType === \"emergency\" && (\n            <div className=\"p-4 bg-service-emergency/10 border border-service-emergency/20 rounded-lg\">\n              <div className=\"flex items-start space-x-2\">\n                <AlertCircle className=\"h-5 w-5 text-service-emergency mt-0.5\" />\n                <div>\n                  <p className=\"font-medium text-service-emergency\">Serviço de Emergência</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Este pedido será tratado com prioridade máxima. Você será contactado em até 2 minutos.\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Actions */}\n          <div className=\"flex space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onCancel}\n              className=\"flex-1\"\n              data-testid=\"cancel-request\"\n            >\n              Cancelar\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className=\"flex-1\"\n              data-testid=\"submit-request\"\n            >\n              {isSubmitting ? \"Enviando...\" : \"Solicitar Serviço\"}\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":14015},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"dark\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n  storageKey = \"pronto-mecanico-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== \"undefined\") {\n      return (localStorage.getItem(storageKey) as Theme) || defaultTheme;\n    }\n    return defaultTheme;\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};","size_bytes":1463},"client/src/components/mobile-nav.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/lib/auth-context';\nimport { Home, History, User, Wallet, Navigation, MessageCircle } from 'lucide-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useNotifications } from '@/lib/use-notifications';\nimport { Badge } from '@/components/ui/badge';\n\nexport function MobileNav() {\n  const [location] = useLocation();\n  const { token, user } = useAuth();\n  const { unreadMessages } = useNotifications();\n\n  const { data: activeRequest } = useQuery<any>({\n    queryKey: ['/api/service-requests/active'],\n    enabled: !!token && !!user,\n    refetchInterval: 10000,\n  });\n  \n  const unreadCount = activeRequest?.id ? (unreadMessages[activeRequest.id] || 0) : 0;\n\n  const baseNavItems = [\n    { path: '/', icon: Home, label: 'Início' },\n    { path: '/history', icon: History, label: 'Histórico' },\n    { path: '/wallet', icon: Wallet, label: 'Carteira' },\n    { path: '/profile', icon: User, label: 'Perfil' },\n  ];\n\n  const navItems = activeRequest?.id\n    ? [\n        { path: '/', icon: Home, label: 'Início' },\n        { path: `/ride/${activeRequest.id}`, icon: Navigation, label: 'Corrida' },\n        { path: `/ride/${activeRequest.id}/chat`, icon: MessageCircle, label: 'Chat' },\n        { path: '/profile', icon: User, label: 'Perfil' },\n      ]\n    : baseNavItems;\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-card border-t z-50\">\n      <div className=\"flex justify-around items-center h-16\">\n        {navItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.path;\n          \n          const isChatItem = item.label === 'Chat';\n          \n          return (\n            <Link\n              key={item.path}\n              href={item.path}\n              data-testid={`link-nav-${item.label.toLowerCase()}`}\n            >\n              <button\n                className={`flex flex-col items-center justify-center w-16 h-full gap-1 relative ${\n                  isActive\n                    ? 'text-primary'\n                    : 'text-muted-foreground hover-elevate'\n                }`}\n              >\n                <div className=\"relative\">\n                  <Icon className=\"w-5 h-5\" />\n                  {isChatItem && unreadCount > 0 && (\n                    <Badge \n                      variant=\"destructive\" \n                      className=\"absolute -top-2 -right-2 h-4 w-4 flex items-center justify-center p-0 text-[10px]\"\n                      data-testid=\"badge-mobile-nav-unread\"\n                    >\n                      {unreadCount > 9 ? '9+' : unreadCount}\n                    </Badge>\n                  )}\n                </div>\n                <span className=\"text-xs\">{item.label}</span>\n              </button>\n            </Link>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2867},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth-context.tsx":{"content":"import { createContext, useContext, useState, useEffect, type ReactNode } from 'react';\nimport { type User } from '@shared/schema';\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  login: (username: string, password: string) => Promise<void>;\n  register: (data: any) => Promise<void>;\n  logout: () => Promise<void>;\n  updateUser: (updates: Partial<User>) => void;\n  refreshUser: () => Promise<void>;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const storedToken = localStorage.getItem('auth_token');\n    if (storedToken) {\n      fetch('/api/auth/me', {\n        headers: {\n          'Authorization': `Bearer ${storedToken}`,\n        },\n      })\n        .then(res => {\n          if (res.ok) return res.json();\n          throw new Error('Invalid token');\n        })\n        .then(userData => {\n          setUser(userData);\n          setToken(storedToken);\n        })\n        .catch(() => {\n          localStorage.removeItem('auth_token');\n          setUser(null);\n          setToken(null);\n        })\n        .finally(() => setIsLoading(false));\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const login = async (username: string, password: string) => {\n    const response = await fetch('/api/auth/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username, password }),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message);\n    }\n\n    const data = await response.json();\n    setUser(data.user);\n    setToken(data.token);\n    localStorage.setItem('auth_token', data.token);\n  };\n\n  const register = async (userData: any) => {\n    const response = await fetch('/api/auth/register', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(userData),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message);\n    }\n\n    const data = await response.json();\n    setUser(data.user);\n    setToken(data.token);\n    localStorage.setItem('auth_token', data.token);\n  };\n\n  const logout = async () => {\n    if (token) {\n      await fetch('/api/auth/logout', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n    }\n    \n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('auth_token');\n  };\n\n  const updateUser = (updates: Partial<User>) => {\n    if (user) {\n      setUser({ ...user, ...updates });\n    }\n  };\n\n  const refreshUser = async () => {\n    if (!token) return;\n    \n    try {\n      const res = await fetch('/api/auth/me', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      \n      if (res.ok) {\n        const userData = await res.json();\n        setUser(userData);\n      }\n    } catch (error) {\n      console.error('Error refreshing user:', error);\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, token, login, register, logout, updateUser, refreshUser, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n}\n","size_bytes":3620},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem('auth_token');\n  const headers: HeadersInit = data ? { \"Content-Type\": \"application/json\" } : {};\n  \n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  \n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem('auth_token');\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    \n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n      headers: Object.keys(headers).length > 0 ? headers : undefined,\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nlet last401Time = 0;\nconst TOAST_COOLDOWN = 10000;\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n\nqueryClient.getQueryCache().config.onError = (error: any) => {\n  if (error?.message?.includes('401')) {\n    const now = Date.now();\n    if (now - last401Time > TOAST_COOLDOWN) {\n      last401Time = now;\n      window.dispatchEvent(new CustomEvent('session-expired'));\n    }\n  }\n};\n\nqueryClient.getMutationCache().config.onError = (error: any) => {\n  if (error?.message?.includes('401')) {\n    const now = Date.now();\n    if (now - last401Time > TOAST_COOLDOWN) {\n      last401Time = now;\n      window.dispatchEvent(new CustomEvent('session-expired'));\n    }\n  }\n};\n","size_bytes":2415},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/websocket.tsx":{"content":"import { createContext, useContext, useEffect, useRef, type ReactNode } from 'react';\nimport { useAuth } from './auth-context';\n\ninterface WebSocketContextType {\n  sendMessage: (data: any) => void;\n  isConnected: boolean;\n}\n\nconst WebSocketContext = createContext<WebSocketContextType | undefined>(undefined);\n\nexport function WebSocketProvider({ children }: { children: ReactNode }) {\n  const { token } = useAuth();\n  const wsRef = useRef<WebSocket | null>(null);\n  const isConnectedRef = useRef(false);\n\n  useEffect(() => {\n    if (!token) return;\n\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws?token=${token}`;\n\n    try {\n      const ws = new WebSocket(wsUrl);\n      wsRef.current = ws;\n\n      ws.onopen = () => {\n        console.log('WebSocket connected');\n        isConnectedRef.current = true;\n      };\n\n      ws.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          console.log('WebSocket message:', data);\n          \n          window.dispatchEvent(new CustomEvent('websocket-message', { detail: data }));\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        isConnectedRef.current = false;\n      };\n\n      ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n    } catch (error) {\n      console.error('Error creating WebSocket:', error);\n    }\n\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [token]);\n\n  const sendMessage = (data: any) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(data));\n    }\n  };\n\n  return (\n    <WebSocketContext.Provider value={{ sendMessage, isConnected: isConnectedRef.current }}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n}\n\nexport function useWebSocket() {\n  const context = useContext(WebSocketContext);\n  if (!context) {\n    throw new Error('useWebSocket must be used within WebSocketProvider');\n  }\n  return context;\n}\n","size_bytes":2199},"client/src/pages/active-ride.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useAuth } from '@/lib/auth-context';\nimport { useRoute, useLocation } from 'wouter';\nimport { APIProvider, Map, AdvancedMarker, useMapsLibrary, useMap } from '@vis.gl/react-google-maps';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { useNotifications } from '@/lib/use-notifications';\nimport { Badge } from '@/components/ui/badge';\nimport { Wrench, Navigation, Phone, MessageCircle, MapPin, CheckCircle, Star, ExternalLink } from 'lucide-react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { Textarea } from '@/components/ui/textarea';\nimport { fetchWithAuth } from '@/lib/fetch-with-auth';\n\nconst GOOGLE_MAPS_API_KEY = import.meta.env.VITE_GOOGLE_MAPS_API_KEY || '';\n\nfunction RoutePolyline({ path }: { path: Array<{ lat: number; lng: number }> }) {\n  const map = useMap();\n  const polylineRef = useRef<google.maps.Polyline | null>(null);\n\n  useEffect(() => {\n    if (!map || path.length < 2) return;\n\n    if (polylineRef.current) {\n      polylineRef.current.setMap(null);\n    }\n\n    polylineRef.current = new google.maps.Polyline({\n      path: path,\n      geodesic: true,\n      strokeColor: '#3b82f6',\n      strokeOpacity: 0.8,\n      strokeWeight: 4,\n      map: map,\n    });\n\n    return () => {\n      if (polylineRef.current) {\n        polylineRef.current.setMap(null);\n      }\n    };\n  }, [map, path]);\n\n  return null;\n}\n\nfunction ActiveRideContent({ requestId }: { requestId: string }) {\n  const { user, token } = useAuth();\n  const [, setLocation] = useLocation();\n  const [serviceRequest, setServiceRequest] = useState<any>(null);\n  const [mechanicLocation, setMechanicLocation] = useState<{ lat: number; lng: number } | null>(null);\n  const [routeDistance, setRouteDistance] = useState<string>('');\n  const [routeDuration, setRouteDuration] = useState<string>('');\n  const [routePath, setRoutePath] = useState<Array<{ lat: number; lng: number }>>([]);\n  const [showRatingDialog, setShowRatingDialog] = useState(false);\n  const [rating, setRating] = useState(0);\n  const [comment, setComment] = useState('');\n  const [otherUser, setOtherUser] = useState<any>(null);\n  const { toast } = useToast();\n  const { unreadMessages } = useNotifications();\n  const routesLibrary = useMapsLibrary('routes');\n  const prevUnreadCountRef = useRef(0);\n  const isFirstRenderRef = useRef(true);\n  \n  const unreadCount = unreadMessages[requestId] || 0;\n\n  useEffect(() => {\n    if (requestId && token) {\n      loadServiceRequest();\n      const interval = setInterval(loadServiceRequest, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [requestId, token]);\n\n  useEffect(() => {\n    if (serviceRequest && user?.userType === 'mechanic') {\n      updateMechanicLocation();\n      const interval = setInterval(updateMechanicLocation, 10000);\n      return () => clearInterval(interval);\n    }\n  }, [serviceRequest, user]);\n\n  useEffect(() => {\n    if (!serviceRequest || !routesLibrary) return;\n    \n    if (user?.userType === 'mechanic' && user.baseLat !== undefined && user.baseLat !== null && user.baseLng !== undefined && user.baseLng !== null) {\n      loadDirections();\n    } else if (user?.userType === 'client' && otherUser?.baseLat !== undefined && otherUser?.baseLat !== null && otherUser?.baseLng !== undefined && otherUser?.baseLng !== null) {\n      loadDirections();\n    }\n  }, [serviceRequest, routesLibrary, user, otherUser]);\n\n  useEffect(() => {\n    if (isFirstRenderRef.current) {\n      isFirstRenderRef.current = false;\n      prevUnreadCountRef.current = unreadCount;\n      return;\n    }\n    \n    if (unreadCount > prevUnreadCountRef.current) {\n      const newMessages = unreadCount - prevUnreadCountRef.current;\n      \n      toast({\n        title: \"Nova mensagem\",\n        description: `Você recebeu ${newMessages} nova${newMessages > 1 ? 's' : ''} mensagem${newMessages > 1 ? 's' : ''}`,\n        duration: 4000,\n      });\n      \n      if ('Notification' in window && Notification.permission === 'granted') {\n        new Notification('Nova mensagem no chat', {\n          body: `${newMessages} nova${newMessages > 1 ? 's' : ''} mensagem${newMessages > 1 ? 's' : ''}`,\n          icon: '/icon.png',\n          badge: '/icon.png',\n        });\n      }\n    }\n    \n    prevUnreadCountRef.current = unreadCount;\n  }, [unreadCount, toast]);\n\n  useEffect(() => {\n    if (mechanicLocation && serviceRequest && user?.userType === 'client') {\n      const interval = setInterval(() => {\n        loadMechanicLocation(serviceRequest.mechanicId);\n      }, 10000);\n      return () => clearInterval(interval);\n    }\n  }, [mechanicLocation, serviceRequest, user]);\n\n  const loadServiceRequest = async () => {\n    try {\n      const response = await fetchWithAuth(`/api/service-requests/${requestId}`);\n      \n      if (response.ok) {\n        const data = await response.json();\n        setServiceRequest(data);\n        \n        if (data.status === 'completed' && user?.userType === 'mechanic') {\n          toast({\n            title: \"Serviço concluído\",\n            description: \"O pagamento foi adicionado à sua carteira\",\n          });\n          setTimeout(() => setLocation('/'), 2000);\n        }\n        \n        if (data.status === 'completed' && user?.userType === 'client' && !data.rating) {\n          setShowRatingDialog(true);\n        } else if (data.status === 'completed' && user?.userType === 'client' && data.rating) {\n          toast({\n            title: \"Serviço concluído\",\n            description: \"Obrigado por usar nossos serviços!\",\n          });\n          setTimeout(() => setLocation('/'), 2000);\n        }\n        \n        if (data.mechanicId && user?.userType === 'client') {\n          loadMechanicLocation(data.mechanicId);\n        }\n        \n        if (data.clientId && user?.userType === 'mechanic') {\n          loadClientData(data.clientId);\n        }\n      }\n    } catch (error) {\n      console.error('Error loading service request:', error);\n    }\n  };\n\n  const loadMechanicLocation = async (mechanicId: string) => {\n    try {\n      const response = await fetchWithAuth(`/api/users/${mechanicId}`);\n      \n      if (response.ok) {\n        const mechanic = await response.json();\n        if (user?.userType === 'client') {\n          setOtherUser(mechanic);\n        }\n        if (mechanic.currentLat != null && mechanic.currentLng != null) {\n          const lat = parseFloat(mechanic.currentLat);\n          const lng = parseFloat(mechanic.currentLng);\n          if (Number.isFinite(lat) && Number.isFinite(lng)) {\n            setMechanicLocation({ lat, lng });\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error loading mechanic location:', error);\n    }\n  };\n\n  const loadClientData = async (clientId: string) => {\n    try {\n      const response = await fetchWithAuth(`/api/users/${clientId}`);\n      \n      if (response.ok) {\n        const client = await response.json();\n        if (user?.userType === 'mechanic') {\n          setOtherUser(client);\n        }\n      }\n    } catch (error) {\n      console.error('Error loading client data:', error);\n    }\n  };\n\n  const updateMechanicLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        async (position) => {\n          const location = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          };\n          setMechanicLocation(location);\n          \n          await fetchWithAuth('/api/location/update', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(location),\n          });\n        },\n        (error) => console.error('Geolocation error:', error),\n        { enableHighAccuracy: true, maximumAge: 0 }\n      );\n    }\n  };\n\n  const loadDirections = async () => {\n    if (!serviceRequest || !routesLibrary) return;\n\n    let originLat: number | undefined;\n    let originLng: number | undefined;\n\n    if (user?.userType === 'mechanic') {\n      if (user.baseLat === undefined || user.baseLat === null || user.baseLng === undefined || user.baseLng === null) return;\n      originLat = parseFloat(user.baseLat);\n      originLng = parseFloat(user.baseLng);\n    } else if (user?.userType === 'client') {\n      if (otherUser?.baseLat === undefined || otherUser?.baseLat === null || otherUser?.baseLng === undefined || otherUser?.baseLng === null) return;\n      originLat = parseFloat(otherUser.baseLat);\n      originLng = parseFloat(otherUser.baseLng);\n    }\n\n    if (originLat === undefined || originLng === undefined || isNaN(originLat) || isNaN(originLng)) return;\n\n    try {\n      const directionsService = new routesLibrary.DirectionsService();\n      \n      const result = await directionsService.route({\n        origin: new google.maps.LatLng(originLat, originLng),\n        destination: new google.maps.LatLng(\n          parseFloat(serviceRequest.pickupLat),\n          parseFloat(serviceRequest.pickupLng)\n        ),\n        travelMode: google.maps.TravelMode.DRIVING,\n      });\n      \n      if (result.routes && result.routes.length > 0) {\n        const route = result.routes[0];\n        const leg = route.legs[0];\n        \n        setRouteDistance(leg.distance?.text || '');\n        setRouteDuration(leg.duration?.text || '');\n        \n        const path: Array<{ lat: number; lng: number }> = [];\n        route.overview_path.forEach((point: any) => {\n          path.push({\n            lat: point.lat(),\n            lng: point.lng(),\n          });\n        });\n        setRoutePath(path);\n      }\n    } catch (error) {\n      console.error('Error loading directions:', error);\n    }\n  };\n\n  const handleArrived = async () => {\n    try {\n      const response = await fetchWithAuth(`/api/service-requests/${requestId}/arrived`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) throw new Error('Erro ao marcar chegada');\n\n      toast({\n        title: \"Chegada registrada\",\n        description: \"Cliente foi notificado da sua chegada\",\n      });\n\n      loadServiceRequest();\n    } catch (error: any) {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleComplete = async () => {\n    try {\n      const response = await fetchWithAuth(`/api/service-requests/${requestId}/complete`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) throw new Error('Erro ao finalizar serviço');\n\n      if (user?.userType === 'client') {\n        setShowRatingDialog(true);\n        loadServiceRequest();\n      } else {\n        toast({\n          title: \"Serviço finalizado\",\n          description: \"Você receberá o pagamento em sua carteira\",\n        });\n        setLocation('/');\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSubmitRating = async () => {\n    if (rating === 0) {\n      toast({\n        title: \"Avaliação obrigatória\",\n        description: \"Por favor, selecione uma avaliação\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const response = await fetchWithAuth(`/api/service-requests/${requestId}/rate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ rating, comment: comment }),\n      });\n\n      if (!response.ok) throw new Error('Erro ao enviar avaliação');\n\n      toast({\n        title: \"Avaliação enviada\",\n        description: \"Obrigado pelo feedback!\",\n      });\n\n      setShowRatingDialog(false);\n      setTimeout(() => setLocation('/'), 1000);\n    } catch (error: any) {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const openInNavigationApp = (app: 'waze' | 'google') => {\n    if (!serviceRequest || !user) return;\n\n    let originLat: string | undefined;\n    let originLng: string | undefined;\n\n    if (user.userType === 'mechanic') {\n      if (!user.baseLat || !user.baseLng) {\n        toast({\n          title: \"Erro\",\n          description: \"Endereço base não configurado\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      originLat = user.baseLat;\n      originLng = user.baseLng;\n    } else {\n      return;\n    }\n\n    const destLat = serviceRequest.pickupLat;\n    const destLng = serviceRequest.pickupLng;\n\n    let url = '';\n    \n    if (app === 'waze') {\n      url = `https://waze.com/ul?ll=${destLat},${destLng}&navigate=yes&from=${originLat},${originLng}`;\n    } else if (app === 'google') {\n      url = `https://www.google.com/maps/dir/?api=1&origin=${originLat},${originLng}&destination=${destLat},${destLng}&travelmode=driving`;\n    }\n\n    window.open(url, '_blank');\n  };\n\n  if (!serviceRequest) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <p className=\"text-muted-foreground\">Carregando...</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!mechanicLocation && user?.userType === 'client' && serviceRequest.status === 'pending') {\n    return (\n      <div className=\"flex items-center justify-center h-full p-4\">\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <p className=\"text-lg font-medium mb-2\">Aguardando mecânico...</p>\n            <p className=\"text-muted-foreground\">Procurando um mecânico próximo a você</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const clientLocation = {\n    lat: parseFloat(serviceRequest.pickupLat),\n    lng: parseFloat(serviceRequest.pickupLng),\n  };\n\n  const mapCenter = mechanicLocation || clientLocation;\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <div className=\"flex-1 relative\">\n        <Map\n          defaultCenter={mapCenter}\n          defaultZoom={16}\n          mapId=\"active-ride-map\"\n          gestureHandling=\"greedy\"\n          mapTypeId=\"roadmap\"\n          style={{ width: '100%', height: '100%' }}\n          data-testid=\"map-active-ride\"\n        >\n          {routePath.length > 1 && <RoutePolyline path={routePath} />}\n\n          {mechanicLocation && (\n            <AdvancedMarker\n              position={mechanicLocation}\n              title=\"Mecânico\"\n            >\n              <div className=\"bg-primary text-primary-foreground p-3 rounded-full shadow-lg animate-pulse\">\n                <Wrench className=\"w-6 h-6\" />\n              </div>\n            </AdvancedMarker>\n          )}\n\n          <AdvancedMarker\n            position={clientLocation}\n            title=\"Local do Acionamento\"\n          >\n            <div className=\"bg-destructive text-destructive-foreground p-3 rounded-full shadow-lg\">\n              <MapPin className=\"w-6 h-6\" />\n            </div>\n          </AdvancedMarker>\n        </Map>\n\n        <Card className=\"absolute top-4 left-4 right-4 shadow-lg\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg\">\n              {user?.userType === 'mechanic' ? 'Indo para o cliente' : 'Mecânico a caminho'}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {routeDistance && routeDuration && (\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex items-center gap-2\">\n                  <Navigation className=\"w-4 h-4 text-primary\" />\n                  <span className=\"font-medium\">{routeDistance}</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-muted-foreground\">•</span>\n                  <span className=\"font-medium\">{routeDuration}</span>\n                </div>\n              </div>\n            )}\n\n            <div className=\"text-sm text-muted-foreground\">\n              <div className=\"flex items-start gap-2\">\n                <MapPin className=\"w-4 h-4 mt-0.5\" />\n                <span>{serviceRequest.pickupAddress}</span>\n              </div>\n            </div>\n\n            {serviceRequest.description && (\n              <div className=\"text-sm\">\n                <strong>Problema:</strong> {serviceRequest.description}\n              </div>\n            )}\n\n            <div className=\"flex gap-2 pt-2\">\n              {user?.userType === 'mechanic' && serviceRequest.status === 'accepted' && (\n                <Button onClick={handleArrived} className=\"flex-1\" data-testid=\"button-arrived\">\n                  <CheckCircle className=\"w-4 h-4 mr-2\" />\n                  Cheguei\n                </Button>\n              )}\n              \n              {user?.userType === 'mechanic' && serviceRequest.status === 'arrived' && (\n                <Button onClick={handleComplete} className=\"flex-1\" data-testid=\"button-complete\">\n                  <CheckCircle className=\"w-4 h-4 mr-2\" />\n                  Finalizar Serviço\n                </Button>\n              )}\n              \n              {user?.userType === 'client' && (serviceRequest.status === 'arrived' || serviceRequest.status === 'accepted') && (\n                <Button onClick={handleComplete} className=\"flex-1\" data-testid=\"button-client-complete\">\n                  <CheckCircle className=\"w-4 h-4 mr-2\" />\n                  Finalizar\n                </Button>\n              )}\n\n              {user?.userType === 'mechanic' && (serviceRequest.status === 'accepted' || serviceRequest.status === 'arrived') && (\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button \n                      variant=\"outline\" \n                      size=\"icon\"\n                      data-testid=\"button-navigation\"\n                    >\n                      <Navigation className=\"w-4 h-4\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem \n                      onClick={() => openInNavigationApp('waze')}\n                      data-testid=\"menu-item-waze\"\n                    >\n                      <ExternalLink className=\"w-4 h-4 mr-2\" />\n                      Abrir no Waze\n                    </DropdownMenuItem>\n                    <DropdownMenuItem \n                      onClick={() => openInNavigationApp('google')}\n                      data-testid=\"menu-item-google\"\n                    >\n                      <ExternalLink className=\"w-4 h-4 mr-2\" />\n                      Abrir no Google Maps\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              )}\n\n              <Button \n                variant=\"outline\" \n                size=\"icon\" \n                onClick={() => {\n                  if (otherUser?.phone) {\n                    window.location.href = `tel:${otherUser.phone}`;\n                  } else {\n                    toast({\n                      title: \"Número não disponível\",\n                      description: \"Não foi possível obter o número de telefone\",\n                      variant: \"destructive\",\n                    });\n                  }\n                }}\n                data-testid=\"button-call\"\n              >\n                <Phone className=\"w-4 h-4\" />\n              </Button>\n              \n              <Button \n                variant=\"outline\" \n                size=\"icon\"\n                onClick={() => setLocation(`/ride/${requestId}/chat`)}\n                data-testid=\"button-message\"\n                className=\"relative\"\n              >\n                <MessageCircle className=\"w-4 h-4\" />\n                {unreadCount > 0 && (\n                  <Badge \n                    variant=\"destructive\" \n                    className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs\"\n                    data-testid=\"badge-unread-count\"\n                  >\n                    {unreadCount > 9 ? '9+' : unreadCount}\n                  </Badge>\n                )}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Dialog open={showRatingDialog} onOpenChange={setShowRatingDialog}>\n        <DialogContent data-testid=\"dialog-rating\">\n          <DialogHeader>\n            <DialogTitle>Avaliar Serviço</DialogTitle>\n            <DialogDescription>\n              Como foi sua experiência com o mecânico?\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Avaliação</label>\n              <div className=\"flex gap-2\" data-testid=\"rating-stars\">\n                {[1, 2, 3, 4, 5].map((star) => (\n                  <button\n                    key={star}\n                    type=\"button\"\n                    onClick={() => setRating(star)}\n                    className=\"focus:outline-none transition-colors\"\n                    data-testid={`star-${star}`}\n                  >\n                    <Star\n                      className={`w-8 h-8 ${\n                        star <= rating\n                          ? 'fill-yellow-500 text-yellow-500'\n                          : 'text-gray-300'\n                      }`}\n                    />\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">\n                Comentário (opcional)\n              </label>\n              <Textarea\n                value={comment}\n                onChange={(e) => setComment(e.target.value)}\n                placeholder=\"Conte-nos sobre sua experiência...\"\n                rows={4}\n                data-testid=\"input-comment\"\n              />\n            </div>\n\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={handleSubmitRating}\n                className=\"flex-1\"\n                data-testid=\"button-submit-rating\"\n              >\n                Enviar Avaliação\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setShowRatingDialog(false);\n                  setLocation('/');\n                }}\n                data-testid=\"button-skip-rating\"\n              >\n                Pular\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default function ActiveRidePage() {\n  const [, params] = useRoute('/ride/:id');\n\n  if (!params?.id) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <p className=\"text-muted-foreground\">Chamada não encontrada</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <APIProvider apiKey={GOOGLE_MAPS_API_KEY}>\n      <ActiveRideContent requestId={params.id} />\n    </APIProvider>\n  );\n}\n","size_bytes":23547},"client/src/pages/chat.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useAuth } from '@/lib/auth-context';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Send, ArrowLeft, Star, User as UserIcon, Calendar, Award } from 'lucide-react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { useLocation, useRoute, Redirect } from 'wouter';\nimport { useNotifications } from '@/lib/use-notifications';\n\nexport default function ChatPage() {\n  const { user, token } = useAuth();\n  const [message, setMessage] = useState('');\n  const [profileModalOpen, setProfileModalOpen] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [, params] = useRoute('/ride/:id/chat');\n  const { markAsRead } = useNotifications();\n  \n  const serviceRequestId = params?.id;\n  \n  if (!serviceRequestId) {\n    return <Redirect to=\"/\" />;\n  }\n\n  useEffect(() => {\n    if (serviceRequestId) {\n      markAsRead(serviceRequestId);\n    }\n  }, [serviceRequestId, markAsRead]);\n\n  const { data: messages = [] } = useQuery<any[]>({\n    queryKey: ['/api/chat/messages', serviceRequestId],\n    enabled: !!token && !!serviceRequestId,\n  });\n\n  const { data: serviceRequest } = useQuery<any>({\n    queryKey: [`/api/service-requests/${serviceRequestId}`],\n    enabled: !!token && !!serviceRequestId,\n  });\n\n  const otherUserId = user?.userType === 'client' \n    ? serviceRequest?.mechanicId \n    : serviceRequest?.clientId;\n\n  const { data: otherUser } = useQuery<any>({\n    queryKey: [`/api/users/${otherUserId}`],\n    enabled: !!token && !!otherUserId,\n  });\n\n  useEffect(() => {\n    if (otherUserId) {\n      queryClient.invalidateQueries({ queryKey: [`/api/users/${otherUserId}`] });\n    }\n  }, [otherUserId]);\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (content: string) => {\n      return await apiRequest('POST', '/api/chat/messages', {\n        serviceRequestId,\n        message: content,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/chat/messages', serviceRequestId] });\n      setMessage('');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  useEffect(() => {\n    const handleWebSocketMessage = (event: any) => {\n      const data = event.detail;\n      \n      if (data.type === 'new_chat_message' && data.data?.serviceRequestId === serviceRequestId) {\n        queryClient.invalidateQueries({ queryKey: ['/api/chat/messages', serviceRequestId] });\n      }\n    };\n\n    window.addEventListener('websocket-message', handleWebSocketMessage);\n    return () => window.removeEventListener('websocket-message', handleWebSocketMessage);\n  }, [serviceRequestId]);\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (message.trim()) {\n      sendMessageMutation.mutate(message);\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(n => n[0])\n      .join('')\n      .toUpperCase()\n      .substring(0, 2);\n  };\n\n  const formatTime = (date: string | Date) => {\n    return new Date(date).toLocaleTimeString('pt-BR', {\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const getTimeOnApp = (createdAt: string | Date | null | undefined) => {\n    if (!createdAt) return 'Tempo desconhecido';\n    \n    const now = new Date();\n    const created = new Date(createdAt);\n    const diffInMs = now.getTime() - created.getTime();\n    const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n    \n    if (diffInDays < 1) return 'Menos de 1 dia';\n    if (diffInDays < 7) return `${diffInDays} ${diffInDays === 1 ? 'dia' : 'dias'}`;\n    if (diffInDays < 30) {\n      const weeks = Math.floor(diffInDays / 7);\n      return `${weeks} ${weeks === 1 ? 'semana' : 'semanas'}`;\n    }\n    if (diffInDays < 365) {\n      const months = Math.floor(diffInDays / 30);\n      return `${months} ${months === 1 ? 'mês' : 'meses'}`;\n    }\n    const years = Math.floor(diffInDays / 365);\n    return `${years} ${years === 1 ? 'ano' : 'anos'}`;\n  };\n\n  const handleViewProfile = () => {\n    setProfileModalOpen(true);\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <Dialog open={profileModalOpen} onOpenChange={setProfileModalOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Perfil do Usuário</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"flex flex-col items-center gap-4 py-4\">\n            <Avatar className=\"w-20 h-20\">\n              <AvatarFallback className=\"text-2xl\">\n                {otherUser ? getInitials(otherUser.username) : '?'}\n              </AvatarFallback>\n            </Avatar>\n            \n            <div className=\"text-center\">\n              <h3 className=\"text-xl font-semibold\" data-testid=\"text-profile-name\">\n                {otherUser?.username || 'Carregando...'}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-profile-user-type\">\n                {otherUser?.userType === 'mechanic' ? 'Mecânico' : 'Cliente'}\n              </p>\n            </div>\n            \n            <div className=\"w-full space-y-3\">\n              <div className=\"flex items-center gap-3 p-3 rounded-lg bg-muted\">\n                <Calendar className=\"w-5 h-5 text-primary shrink-0\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-xs text-muted-foreground\">Tempo no app</p>\n                  <p className=\"font-medium\" data-testid=\"text-profile-time-on-app\">\n                    {getTimeOnApp(otherUser?.createdAt)}\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-3 p-3 rounded-lg bg-muted\">\n                <Award className=\"w-5 h-5 text-yellow-500 shrink-0\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-xs text-muted-foreground\">Avaliações</p>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"flex items-center gap-1\">\n                      <Star className=\"w-4 h-4 fill-yellow-500 text-yellow-500\" />\n                      <span className=\"font-medium\" data-testid=\"text-profile-rating\">\n                        {otherUser?.rating != null ? parseFloat(otherUser.rating).toFixed(1) : 'N/A'}\n                      </span>\n                    </div>\n                    <span className=\"text-sm text-muted-foreground\" data-testid=\"text-profile-total-ratings\">\n                      ({otherUser?.totalRatings || 0} {otherUser?.totalRatings === 1 ? 'avaliação' : 'avaliações'})\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <Button \n              onClick={() => setProfileModalOpen(false)} \n              className=\"w-full\"\n              data-testid=\"button-close-profile\"\n            >\n              Fechar\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n      \n      <Card className=\"flex-1 flex flex-col\">\n        <CardHeader className=\"border-b py-3 px-3 sm:py-4 sm:px-6\">\n          <div className=\"flex items-center gap-2 sm:gap-3\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setLocation(`/ride/${serviceRequestId}`)}\n              data-testid=\"button-back-to-ride\"\n              className=\"shrink-0\"\n            >\n              <ArrowLeft className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n            </Button>\n            \n            <div className=\"flex items-center gap-2 sm:gap-3 flex-1 cursor-pointer hover-elevate p-1.5 sm:p-2 rounded-lg transition-colors min-w-0\" onClick={handleViewProfile}>\n              <Avatar className=\"w-9 h-9 sm:w-10 sm:h-10 shrink-0\">\n                <AvatarFallback>\n                  {otherUser ? getInitials(otherUser.username) : '?'}\n                </AvatarFallback>\n              </Avatar>\n              \n              <div className=\"flex-1 min-w-0\">\n                <h3 className=\"font-semibold text-sm sm:text-base truncate\" data-testid=\"text-other-user-name\">\n                  {otherUser?.username || 'Carregando...'}\n                </h3>\n                {otherUser?.rating != null && (\n                  <div className=\"flex items-center gap-1 text-xs sm:text-sm text-muted-foreground\">\n                    <Star className=\"w-3 h-3 fill-yellow-500 text-yellow-500 shrink-0\" />\n                    <span>{parseFloat(otherUser.rating).toFixed(1)}</span>\n                    <span>({otherUser.totalRatings || 0})</span>\n                  </div>\n                )}\n              </div>\n\n              <Button \n                variant=\"ghost\" \n                size=\"icon\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleViewProfile();\n                }}\n                data-testid=\"button-view-profile\"\n                className=\"shrink-0\"\n              >\n                <UserIcon className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"flex-1 overflow-y-auto p-3 sm:p-4 space-y-3 sm:space-y-4\">\n          {messages.map((msg: any) => {\n            const isOwnMessage = msg.senderId === user?.id;\n            \n            return (\n              <div\n                key={msg.id}\n                className={`flex items-start gap-1.5 sm:gap-2 ${isOwnMessage ? 'flex-row-reverse' : ''}`}\n                data-testid={`message-${msg.id}`}\n              >\n                <Avatar className=\"w-7 h-7 sm:w-8 sm:h-8 shrink-0\">\n                  <AvatarFallback className=\"text-xs\">\n                    {getInitials(msg.senderName || 'U')}\n                  </AvatarFallback>\n                </Avatar>\n                \n                <div className={`flex flex-col ${isOwnMessage ? 'items-end' : 'items-start'} max-w-[75%] sm:max-w-[70%]`}>\n                  <div\n                    className={`rounded-lg px-3 py-2 sm:px-4 sm:py-2 ${\n                      isOwnMessage\n                        ? 'bg-primary text-primary-foreground'\n                        : 'bg-muted'\n                    }`}\n                  >\n                    <p className=\"text-sm break-words\">{msg.message}</p>\n                  </div>\n                  <span className=\"text-xs text-muted-foreground mt-0.5 sm:mt-1\">\n                    {formatTime(msg.createdAt)}\n                  </span>\n                </div>\n              </div>\n            );\n          })}\n          <div ref={messagesEndRef} />\n        </CardContent>\n\n        <div className=\"border-t p-3 sm:p-4\">\n          <form onSubmit={handleSendMessage} className=\"flex gap-2\">\n            <Input\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              placeholder=\"Digite sua mensagem...\"\n              data-testid=\"input-message\"\n              disabled={sendMessageMutation.isPending}\n              className=\"text-sm sm:text-base\"\n            />\n            <Button\n              type=\"submit\"\n              size=\"icon\"\n              disabled={!message.trim() || sendMessageMutation.isPending}\n              data-testid=\"button-send-message\"\n              className=\"shrink-0\"\n            >\n              <Send className=\"w-4 h-4\" />\n            </Button>\n          </form>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":12078},"client/src/pages/history.tsx":{"content":"import { useAuth } from '@/lib/auth-context';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Wrench, Truck, AlertCircle, Clock, CheckCircle, XCircle, Star } from 'lucide-react';\nimport { useQuery } from '@tanstack/react-query';\n\nexport default function HistoryPage() {\n  const { token } = useAuth();\n\n  const { data: serviceRequests = [], isLoading } = useQuery<any[]>({\n    queryKey: ['/api/service-requests/history'],\n    enabled: !!token,\n  });\n\n  const getServiceIcon = (type: string) => {\n    switch (type) {\n      case 'mechanic': return <Wrench className=\"w-4 h-4\" />;\n      case 'tow_truck': return <Truck className=\"w-4 h-4\" />;\n      default: return <AlertCircle className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return (\n          <Badge variant=\"secondary\" className=\"flex items-center gap-1\" data-testid={`badge-status-pending`}>\n            <Clock className=\"w-3 h-3\" />\n            Pendente\n          </Badge>\n        );\n      case 'accepted':\n        return (\n          <Badge variant=\"default\" className=\"flex items-center gap-1\" data-testid={`badge-status-accepted`}>\n            <CheckCircle className=\"w-3 h-3\" />\n            Aceito\n          </Badge>\n        );\n      case 'completed':\n        return (\n          <Badge className=\"flex items-center gap-1 bg-green-600\" data-testid={`badge-status-completed`}>\n            <CheckCircle className=\"w-3 h-3\" />\n            Concluído\n          </Badge>\n        );\n      case 'cancelled':\n        return (\n          <Badge variant=\"destructive\" className=\"flex items-center gap-1\" data-testid={`badge-status-cancelled`}>\n            <XCircle className=\"w-3 h-3\" />\n            Cancelado\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getServiceTypeLabel = (type: string) => {\n    switch (type) {\n      case 'mechanic': return 'Mecânico';\n      case 'tow_truck': return 'Guincho';\n      case 'road_assistance': return 'Assistência na Estrada';\n      default: return 'Outro';\n    }\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <p className=\"text-muted-foreground\">Carregando...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-4 space-y-4\">\n      <h1 className=\"text-2xl font-bold\" data-testid=\"text-title\">Histórico de Chamadas</h1>\n      \n      {serviceRequests.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <p className=\"text-muted-foreground\" data-testid=\"text-no-history\">\n              Você ainda não tem chamadas no histórico\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-3\">\n          {serviceRequests.map((request: any) => (\n            <Card key={request.id} data-testid={`card-history-${request.id}`}>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <div className=\"flex items-center gap-2\">\n                  {getServiceIcon(request.serviceType)}\n                  <CardTitle className=\"text-base\">\n                    {getServiceTypeLabel(request.serviceType)}\n                  </CardTitle>\n                </div>\n                {getStatusBadge(request.status)}\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2 text-sm\">\n                  <p className=\"text-muted-foreground\" data-testid={`text-address-${request.id}`}>\n                    {request.pickupAddress}\n                  </p>\n                  \n                  {request.description && (\n                    <p data-testid={`text-description-${request.id}`}>\n                      {request.description}\n                    </p>\n                  )}\n                  \n                  {request.rating && (\n                    <div className=\"flex items-center gap-1 text-yellow-500\" data-testid={`text-rating-${request.id}`}>\n                      <Star className=\"w-4 h-4 fill-current\" />\n                      <span className=\"font-medium\">{request.rating}/5</span>\n                    </div>\n                  )}\n                  \n                  {request.ratingComment && (\n                    <p className=\"text-sm italic text-muted-foreground\" data-testid={`text-comment-${request.id}`}>\n                      \"{request.ratingComment}\"\n                    </p>\n                  )}\n                  \n                  <div className=\"flex justify-between items-center pt-2\">\n                    <span className=\"text-muted-foreground\" data-testid={`text-date-${request.id}`}>\n                      {formatDate(request.createdAt)}\n                    </span>\n                    \n                    {request.totalPrice && (\n                      <span className=\"font-semibold\" data-testid={`text-price-${request.id}`}>\n                        R$ {parseFloat(request.totalPrice).toFixed(2)}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5561},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useAuth } from '@/lib/auth-context';\nimport { useLocation } from 'wouter';\nimport { APIProvider } from '@vis.gl/react-google-maps';\nimport { useToast } from '@/hooks/use-toast';\nimport { fetchWithAuth } from '@/lib/fetch-with-auth';\nimport {\n  AddressStep,\n  ServiceTypeStep,\n  PaymentStep,\n  type AddressData,\n  type ServiceData,\n  type PaymentData,\n} from '@/components/client-flow-steps';\nimport { MechanicHome } from '@/components/mechanic-home';\n\n\nconst GOOGLE_MAPS_API_KEY = import.meta.env.VITE_GOOGLE_MAPS_API_KEY || '';\n\ntype Step = 'address' | 'service' | 'payment';\n\nfunction ClientHome() {\n  const { token } = useAuth();\n  const [, setLocationPath] = useLocation();\n  const { toast } = useToast();\n  const [currentStep, setCurrentStep] = useState<Step>('address');\n  const [addressData, setAddressData] = useState<AddressData | null>(null);\n  const [serviceData, setServiceData] = useState<ServiceData | null>(null);\n  const [isCreatingRequest, setIsCreatingRequest] = useState(false);\n\n  const handleAddressNext = (data: AddressData) => {\n    setAddressData(data);\n    setCurrentStep('service');\n  };\n\n  const handleServiceNext = (data: ServiceData) => {\n    setServiceData(data);\n    setCurrentStep('payment');\n  };\n\n  const handlePaymentNext = async (paymentData: PaymentData) => {\n    if (!addressData || !serviceData) return;\n\n    setIsCreatingRequest(true);\n\n    try {\n      const requestBody = {\n        pickupLat: addressData.lat.toString(),\n        pickupLng: addressData.lng.toString(),\n        pickupAddress: addressData.address,\n        serviceType: serviceData.type,\n        description: serviceData.description || undefined,\n        paymentMethod: paymentData.method,\n      };\n\n      const response = await fetchWithAuth('/api/service-requests', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erro ao criar solicitação');\n      }\n\n      const serviceRequest = await response.json();\n\n      toast({\n        title: 'Solicitação criada!',\n        description: paymentData.method === 'pix' \n          ? 'Aguarde enquanto procuramos um mecânico...'\n          : 'Procurando mecânicos disponíveis...',\n      });\n\n      if (paymentData.method === 'pix') {\n        setLocationPath(`/payment/${serviceRequest.id}`);\n      } else {\n        setLocationPath(`/ride/${serviceRequest.id}`);\n      }\n    } catch (error: any) {\n      console.error('Error creating request:', error);\n      toast({\n        title: 'Erro',\n        description: error.message || 'Não foi possível criar a solicitação',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsCreatingRequest(false);\n    }\n  };\n\n  const handleBackFromService = () => {\n    setCurrentStep('address');\n  };\n\n  const handleBackFromPayment = () => {\n    setCurrentStep('service');\n  };\n\n  return (\n    <div className=\"h-full bg-background flex flex-col\">\n      {currentStep === 'address' && (\n        <AddressStep onNext={handleAddressNext} initialAddress={addressData?.address} />\n      )}\n      {currentStep === 'service' && (\n        <ServiceTypeStep onNext={handleServiceNext} onBack={handleBackFromService} />\n      )}\n      {currentStep === 'payment' && !isCreatingRequest && (\n        <PaymentStep onNext={handlePaymentNext} onBack={handleBackFromPayment} />\n      )}\n      {isCreatingRequest && (\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center space-y-4\">\n            <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto\" />\n            <p className=\"text-lg font-semibold\">Criando solicitação...</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default function Home() {\n  const { user } = useAuth();\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <p>Carregando...</p>\n      </div>\n    );\n  }\n\n  if (!GOOGLE_MAPS_API_KEY) {\n    return (\n      <div className=\"flex items-center justify-center h-full p-4\">\n        <p className=\"text-destructive\">\n          Chave da API do Google Maps não configurada\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <APIProvider apiKey={GOOGLE_MAPS_API_KEY} libraries={['places', 'geocoding']}>\n      {user.userType === 'client' ? <ClientHome /> : <MechanicHome />}\n    </APIProvider>\n  );\n}\n","size_bytes":4592},"client/src/pages/login.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { useAuth } from '@/lib/auth-context';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { APIProvider, useMapsLibrary } from '@vis.gl/react-google-maps';\nimport { MapPin } from 'lucide-react';\n\nconst GOOGLE_MAPS_API_KEY = import.meta.env.VITE_GOOGLE_MAPS_API_KEY;\n\nfunction AddressAutocomplete({ \n  onPlaceSelect,\n  value,\n  onChange\n}: { \n  onPlaceSelect: (place: google.maps.places.PlaceResult | null) => void;\n  value?: string;\n  onChange?: (value: string) => void;\n}) {\n  const places = useMapsLibrary('places');\n  const inputRef = useRef<HTMLInputElement>(null);\n  const autocompleteRef = useRef<google.maps.places.Autocomplete | null>(null);\n  const [inputValue, setInputValue] = useState(value || '');\n\n  useEffect(() => {\n    if (value !== undefined && value !== inputValue) {\n      setInputValue(value);\n      if (inputRef.current) {\n        inputRef.current.value = value;\n      }\n    }\n  }, [value]);\n\n  useEffect(() => {\n    if (!places || !inputRef.current) return;\n\n    const options = {\n      componentRestrictions: { country: 'br' },\n      fields: ['formatted_address', 'geometry', 'name', 'address_components'],\n      types: ['address'],\n    };\n\n    autocompleteRef.current = new places.Autocomplete(inputRef.current, options);\n\n    autocompleteRef.current.addListener('place_changed', () => {\n      const place = autocompleteRef.current?.getPlace();\n      if (place?.formatted_address) {\n        setInputValue(place.formatted_address);\n        if (onChange) {\n          onChange(place.formatted_address);\n        }\n      }\n      onPlaceSelect(place || null);\n    });\n\n    return () => {\n      if (autocompleteRef.current) {\n        google.maps.event.clearInstanceListeners(autocompleteRef.current);\n      }\n    };\n  }, [places, onPlaceSelect, onChange]);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value;\n    setInputValue(newValue);\n    if (onChange) {\n      onChange(newValue);\n    }\n  };\n\n  return (\n    <div className=\"relative\">\n      <div className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 rounded-full bg-primary/10 flex items-center justify-center pointer-events-none\">\n        <MapPin className=\"w-3 h-3 text-primary\" />\n      </div>\n      <input\n        ref={inputRef}\n        value={inputValue}\n        onChange={handleInputChange}\n        placeholder=\"Digite seu endereço...\"\n        data-testid=\"input-address-mechanic\"\n        autoComplete=\"off\"\n        className=\"flex h-9 w-full rounded-md border border-input bg-background pl-11 pr-3 py-2 text-sm shadow-sm transition-colors placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\"\n      />\n    </div>\n  );\n}\n\nfunction LoginForm() {\n  const [isLogin, setIsLogin] = useState(true);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n  const [fullName, setFullName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [userType, setUserType] = useState<'client' | 'mechanic'>('client');\n  const [isLoading, setIsLoading] = useState(false);\n  const [mechanicAddress, setMechanicAddress] = useState('');\n  const [mechanicCoords, setMechanicCoords] = useState<{ lat: number; lng: number } | null>(null);\n  \n  const { login, register } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handlePlaceSelect = (place: google.maps.places.PlaceResult | null) => {\n    if (place?.geometry?.location) {\n      setMechanicCoords({\n        lat: place.geometry.location.lat(),\n        lng: place.geometry.location.lng()\n      });\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      if (isLogin) {\n        await login(username, password);\n        setLocation('/');\n      } else {\n        if (userType === 'mechanic' && (!mechanicAddress || !mechanicCoords)) {\n          toast({\n            title: \"Erro\",\n            description: \"Por favor, informe seu endereço base\",\n            variant: \"destructive\",\n          });\n          setIsLoading(false);\n          return;\n        }\n\n        const registerData: any = { \n          username, \n          password, \n          email, \n          fullName, \n          phone, \n          userType \n        };\n\n        if (userType === 'mechanic' && mechanicAddress && mechanicCoords) {\n          registerData.baseAddress = mechanicAddress;\n          registerData.baseLat = mechanicCoords.lat;\n          registerData.baseLng = mechanicCoords.lng;\n        }\n\n        await register(registerData);\n        \n        setLocation('/');\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle data-testid=\"text-title\">{isLogin ? 'Login' : 'Cadastro'}</CardTitle>\n          <CardDescription>\n            {isLogin \n              ? 'Entre com sua conta para continuar' \n              : 'Crie sua conta para começar'}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"username\">Usuário</Label>\n              <Input\n                id=\"username\"\n                data-testid=\"input-username\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                required\n              />\n            </div>\n\n            {!isLogin && (\n              <>\n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    data-testid=\"input-email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"fullName\">Nome Completo</Label>\n                  <Input\n                    id=\"fullName\"\n                    data-testid=\"input-fullname\"\n                    value={fullName}\n                    onChange={(e) => setFullName(e.target.value)}\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"phone\">Telefone</Label>\n                  <Input\n                    id=\"phone\"\n                    data-testid=\"input-phone\"\n                    value={phone}\n                    onChange={(e) => setPhone(e.target.value)}\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label>Tipo de Usuário</Label>\n                  <div className=\"flex gap-4 mt-2\">\n                    <Button\n                      type=\"button\"\n                      variant={userType === 'client' ? 'default' : 'outline'}\n                      onClick={() => setUserType('client')}\n                      data-testid=\"button-usertype-client\"\n                      className=\"flex-1\"\n                    >\n                      Cliente\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant={userType === 'mechanic' ? 'default' : 'outline'}\n                      onClick={() => setUserType('mechanic')}\n                      data-testid=\"button-usertype-mechanic\"\n                      className=\"flex-1\"\n                    >\n                      Mecânico\n                    </Button>\n                  </div>\n                </div>\n\n                {userType === 'mechanic' && (\n                  <div>\n                    <Label>Endereço Base</Label>\n                    <div className=\"mt-2\">\n                      <AddressAutocomplete\n                        value={mechanicAddress}\n                        onChange={setMechanicAddress}\n                        onPlaceSelect={handlePlaceSelect}\n                      />\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      De onde você atenderá as chamadas\n                    </p>\n                  </div>\n                )}\n              </>\n            )}\n\n            <div>\n              <Label htmlFor=\"password\">Senha</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                data-testid=\"input-password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n              />\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isLoading}\n              data-testid=\"button-submit\"\n            >\n              {isLoading ? 'Carregando...' : isLogin ? 'Entrar' : 'Cadastrar'}\n            </Button>\n          </form>\n\n          <div className=\"mt-4 text-center\">\n            <button\n              type=\"button\"\n              onClick={() => setIsLogin(!isLogin)}\n              data-testid=\"button-toggle-mode\"\n              className=\"text-sm text-primary hover:underline\"\n            >\n              {isLogin \n                ? 'Não tem uma conta? Cadastre-se' \n                : 'Já tem uma conta? Entre'}\n            </button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default function LoginPage() {\n  if (!GOOGLE_MAPS_API_KEY) {\n    return <div>Erro: Google Maps API key não configurada</div>;\n  }\n\n  return (\n    <APIProvider apiKey={GOOGLE_MAPS_API_KEY}>\n      <LoginForm />\n    </APIProvider>\n  );\n}\n","size_bytes":10275},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/payment.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/lib/auth-context';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { PaymentElement, useStripe, useElements, Elements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { ArrowLeft, Loader2 } from 'lucide-react';\n\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY || '');\n\ninterface PaymentFormProps {\n  serviceData: {\n    serviceType: string;\n    pickupLat: string;\n    pickupLng: string;\n    pickupAddress: string;\n    description?: string;\n  };\n}\n\nfunction PaymentForm({ serviceData }: PaymentFormProps) {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [, setLocation] = useLocation();\n  const { token } = useAuth();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      const { error: submitError } = await elements.submit();\n      if (submitError) {\n        throw new Error(submitError.message);\n      }\n\n      const { error, paymentIntent } = await stripe.confirmPayment({\n        elements,\n        redirect: 'if_required',\n      });\n\n      if (error) {\n        throw new Error(error.message);\n      }\n\n      if (paymentIntent) {\n        if (paymentIntent.status === 'succeeded') {\n          const response = await fetch('/api/service-requests', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${token}`,\n            },\n            body: JSON.stringify({\n              ...serviceData,\n              paymentIntentId: paymentIntent.id,\n            }),\n          });\n\n          if (!response.ok) {\n            throw new Error('Erro ao criar chamada');\n          }\n\n          const serviceRequest = await response.json();\n          toast({\n            title: \"Pagamento confirmado\",\n            description: \"Procurando mecânicos próximos...\",\n          });\n          \n          localStorage.removeItem('pendingServiceRequest');\n          setLocation(`/waiting/${serviceRequest.id}`);\n        } else if (paymentIntent.status === 'processing') {\n          toast({\n            title: \"Pagamento em processamento\",\n            description: \"Seu pagamento está sendo processado. Por favor, aguarde...\",\n          });\n          setIsProcessing(false);\n        } else if (paymentIntent.status === 'requires_action') {\n          toast({\n            title: \"Ação necessária\",\n            description: \"Por favor, complete a autenticação do pagamento\",\n          });\n          setIsProcessing(false);\n        } else {\n          throw new Error(`Status de pagamento inesperado: ${paymentIntent.status}`);\n        }\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Erro no pagamento\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <PaymentElement />\n      \n      <div className=\"flex gap-2\">\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={() => setLocation('/')}\n          disabled={isProcessing}\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Voltar\n        </Button>\n        \n        <Button\n          type=\"submit\"\n          disabled={!stripe || isProcessing}\n          className=\"flex-1\"\n          data-testid=\"button-pay\"\n        >\n          {isProcessing ? (\n            <>\n              <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              Processando...\n            </>\n          ) : (\n            'Pagar e Solicitar'\n          )}\n        </Button>\n      </div>\n    </form>\n  );\n}\n\nexport default function PaymentPage() {\n  const [, setLocation] = useLocation();\n  const { token } = useAuth();\n  const { toast } = useToast();\n  const [serviceData, setServiceData] = useState<any>(null);\n  const [clientSecret, setClientSecret] = useState('');\n\n  useEffect(() => {\n    const storedData = localStorage.getItem('pendingServiceRequest');\n    if (storedData) {\n      const data = JSON.parse(storedData);\n      setServiceData(data);\n      preparePayment(data);\n    } else {\n      setLocation('/');\n    }\n  }, []);\n\n  const preparePayment = async (data: any) => {\n    try {\n      const response = await fetch('/api/payments/prepare-payment', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error('Erro ao preparar pagamento');\n      }\n\n      const result = await response.json();\n      setClientSecret(result.clientSecret);\n    } catch (error: any) {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setLocation('/');\n    }\n  };\n\n  if (!serviceData || !clientSecret) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  const options = {\n    clientSecret,\n    appearance: {\n      theme: 'stripe' as const,\n    },\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 max-w-lg\">\n      <Card>\n        <CardHeader>\n          <CardTitle data-testid=\"text-title\">Pagamento do Serviço</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Valor estimado: R$ 50,00 base + R$ 6,00/km\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"mb-6 p-4 bg-muted rounded-md\">\n            <p className=\"text-sm font-medium mb-2\">Detalhes do serviço:</p>\n            <p className=\"text-sm text-muted-foreground\">{serviceData.pickupAddress}</p>\n            {serviceData.description && (\n              <p className=\"text-sm text-muted-foreground mt-1\">{serviceData.description}</p>\n            )}\n          </div>\n\n          <Elements stripe={stripePromise} options={options}>\n            <PaymentForm serviceData={serviceData} />\n          </Elements>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6554},"client/src/pages/profile.tsx":{"content":"import { useAuth } from '@/lib/auth-context';\nimport { useLocation, useRoute } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { LogOut, User, Mail, Phone, Star, ArrowLeft, Bell, BellOff, MapPin, Shield } from 'lucide-react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useNotifications } from '@/lib/use-notifications';\nimport { APIProvider, useMapsLibrary } from '@vis.gl/react-google-maps';\nimport { useState, useRef, useEffect } from 'react';\nimport { useToast } from '@/hooks/use-toast';\nimport { Label } from '@/components/ui/label';\nimport { queryClient } from '@/lib/queryClient';\n\nconst GOOGLE_MAPS_API_KEY = import.meta.env.VITE_GOOGLE_MAPS_API_KEY;\n\nfunction AddressAutocomplete({ \n  onPlaceSelect,\n  value,\n  onChange\n}: { \n  onPlaceSelect: (place: google.maps.places.PlaceResult | null) => void;\n  value?: string;\n  onChange?: (value: string) => void;\n}) {\n  const places = useMapsLibrary('places');\n  const inputRef = useRef<HTMLInputElement>(null);\n  const autocompleteRef = useRef<google.maps.places.Autocomplete | null>(null);\n  const [inputValue, setInputValue] = useState(value || '');\n\n  useEffect(() => {\n    if (value !== undefined && value !== inputValue) {\n      setInputValue(value);\n      if (inputRef.current) {\n        inputRef.current.value = value;\n      }\n    }\n  }, [value, inputValue]);\n\n  useEffect(() => {\n    if (!places || !inputRef.current) return;\n\n    const options = {\n      componentRestrictions: { country: 'br' },\n      fields: ['formatted_address', 'geometry', 'name', 'address_components'],\n      types: ['address'],\n    };\n\n    autocompleteRef.current = new places.Autocomplete(inputRef.current, options);\n\n    autocompleteRef.current.addListener('place_changed', () => {\n      const place = autocompleteRef.current?.getPlace();\n      if (place?.formatted_address) {\n        setInputValue(place.formatted_address);\n        if (onChange) {\n          onChange(place.formatted_address);\n        }\n      }\n      onPlaceSelect(place || null);\n    });\n\n    return () => {\n      if (autocompleteRef.current) {\n        google.maps.event.clearInstanceListeners(autocompleteRef.current);\n      }\n    };\n  }, [places, onPlaceSelect, onChange]);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value;\n    setInputValue(newValue);\n    if (onChange) {\n      onChange(newValue);\n    }\n  };\n\n  return (\n    <div className=\"relative\">\n      <div className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 rounded-full bg-primary/10 flex items-center justify-center pointer-events-none\">\n        <MapPin className=\"w-3 h-3 text-primary\" />\n      </div>\n      <input\n        ref={inputRef}\n        value={inputValue}\n        onChange={handleInputChange}\n        placeholder=\"Digite seu endereço base...\"\n        data-testid=\"input-base-address\"\n        autoComplete=\"off\"\n        className=\"flex h-9 w-full rounded-md border border-input bg-background pl-11 pr-3 py-2 text-sm shadow-sm transition-colors placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\"\n      />\n    </div>\n  );\n}\n\nfunction ProfilePageContent() {\n  const [, params] = useRoute('/profile/:id');\n  const { user: currentUser, token, logout } = useAuth();\n  const [, setLocation] = useLocation();\n  const { requestNotificationPermission, hasNotificationPermission } = useNotifications();\n  const { toast } = useToast();\n  \n  const userId = params?.id;\n  const isOwnProfile = !userId || userId === currentUser?.id;\n\n  const [baseAddressData, setBaseAddressData] = useState({\n    baseAddress: currentUser?.baseAddress || '',\n    baseLat: currentUser?.baseLat ? parseFloat(currentUser.baseLat) : 0,\n    baseLng: currentUser?.baseLng ? parseFloat(currentUser.baseLng) : 0,\n  });\n  \n  const { data: profileUser, isLoading } = useQuery<any>({\n    queryKey: [`/api/users/${userId}`],\n    enabled: !!token && !!userId && !isOwnProfile,\n  });\n  \n  const user = isOwnProfile ? currentUser : profileUser;\n\n  const updateBaseAddressMutation = useMutation({\n    mutationFn: async (data: typeof baseAddressData) => {\n      const response = await fetch('/api/user/base-address', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Erro ao atualizar endereço base');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Endereço atualizado\",\n        description: \"Seu endereço base foi salvo com sucesso\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePlaceSelect = (place: google.maps.places.PlaceResult | null) => {\n    if (place?.geometry?.location && place?.formatted_address) {\n      setBaseAddressData({\n        baseAddress: place.formatted_address,\n        baseLat: place.geometry.location.lat(),\n        baseLng: place.geometry.location.lng()\n      });\n    }\n  };\n\n  const handleBaseAddressSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!baseAddressData.baseAddress || baseAddressData.baseLat === undefined || baseAddressData.baseLng === undefined) {\n      toast({\n        title: \"Erro\",\n        description: \"Por favor, selecione um endereço válido\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    updateBaseAddressMutation.mutate(baseAddressData);\n  };\n\n  const handleLogout = async () => {\n    await logout();\n    setLocation('/login');\n  };\n\n  if (!user || (isLoading && !isOwnProfile)) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <p className=\"text-muted-foreground\">Carregando...</p>\n      </div>\n    );\n  }\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(n => n[0])\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 space-y-4\">\n      <div className=\"flex items-center gap-3 mb-4\">\n        {!isOwnProfile && (\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => window.history.back()}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n        )}\n        <h1 className=\"text-2xl font-bold\" data-testid=\"text-title\">\n          {isOwnProfile ? 'Meu Perfil' : 'Perfil'}\n        </h1>\n      </div>\n      \n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-4\">\n            <Avatar className=\"w-16 h-16\">\n              <AvatarFallback data-testid=\"text-avatar\">\n                {getInitials(user.fullName)}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1\">\n              <CardTitle data-testid=\"text-fullname\">{user.fullName}</CardTitle>\n              <CardDescription>@{user.username}</CardDescription>\n            </div>\n            <Badge variant={user.userType === 'mechanic' ? 'default' : 'secondary'} data-testid=\"badge-usertype\">\n              {user.userType === 'mechanic' ? 'Mecânico' : 'Cliente'}\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center gap-2 text-sm\">\n            <Mail className=\"w-4 h-4 text-muted-foreground\" />\n            <span data-testid=\"text-email\">{user.email}</span>\n          </div>\n          \n          <div className=\"flex items-center gap-2 text-sm\">\n            <Phone className=\"w-4 h-4 text-muted-foreground\" />\n            <span data-testid=\"text-phone\">{user.phone}</span>\n          </div>\n\n          <div className=\"flex items-center gap-2 text-sm\">\n            <User className=\"w-4 h-4 text-muted-foreground\" />\n            <span data-testid=\"text-username\">Usuário: {user.username}</span>\n          </div>\n\n          <div className=\"pt-4 border-t space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium\">Avaliação</span>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"flex items-center gap-1\">\n                  {[1, 2, 3, 4, 5].map((star) => (\n                    <Star\n                      key={star}\n                      className={`w-4 h-4 ${\n                        star <= parseFloat(user.rating || '5')\n                          ? 'fill-yellow-400 text-yellow-400'\n                          : 'text-muted-foreground'\n                      }`}\n                    />\n                  ))}\n                </div>\n                <span className=\"text-sm font-medium\" data-testid=\"text-rating\">\n                  {parseFloat(user.rating || '5').toFixed(1)}\n                </span>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-muted-foreground\">Total de avaliações</span>\n              <span className=\"text-sm font-medium\" data-testid=\"text-total-ratings\">\n                {user.totalRatings || 0}\n              </span>\n            </div>\n          </div>\n\n          {user.userType === 'mechanic' && (\n            <div className=\"pt-4 border-t\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium\">Status</span>\n                <Badge variant={user.isOnline ? 'default' : 'outline'} data-testid=\"badge-online-status\">\n                  {user.isOnline ? 'Online' : 'Offline'}\n                </Badge>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {isOwnProfile && (\n        <>\n          {currentUser?.userType === 'mechanic' && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MapPin className=\"w-5 h-5\" />\n                  Endereço Base\n                </CardTitle>\n                <CardDescription>\n                  Configure o endereço de onde você atenderá as chamadas. Você receberá chamados próximos a este endereço.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleBaseAddressSubmit} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"baseAddress\">Seu Endereço</Label>\n                    <AddressAutocomplete\n                      value={baseAddressData.baseAddress}\n                      onChange={(value) => setBaseAddressData({...baseAddressData, baseAddress: value})}\n                      onPlaceSelect={handlePlaceSelect}\n                    />\n                    <p className=\"text-xs text-muted-foreground\">\n                      A distância até os clientes será calculada a partir deste endereço\n                    </p>\n                  </div>\n\n                  {baseAddressData.baseAddress && (\n                    <div className=\"p-3 bg-muted rounded-md\">\n                      <p className=\"text-sm font-medium\">Endereço atual:</p>\n                      <p className=\"text-sm text-muted-foreground\">{baseAddressData.baseAddress}</p>\n                    </div>\n                  )}\n\n                  <Button\n                    type=\"submit\"\n                    disabled={updateBaseAddressMutation.isPending || !baseAddressData.baseAddress}\n                    className=\"w-full\"\n                    data-testid=\"button-save-address\"\n                  >\n                    {updateBaseAddressMutation.isPending ? \"Salvando...\" : \"Salvar Endereço\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          )}\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Notificações</CardTitle>\n              <CardDescription>\n                Receba alertas de novas mensagens no chat\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  {hasNotificationPermission ? (\n                    <Bell className=\"w-5 h-5 text-primary\" />\n                  ) : (\n                    <BellOff className=\"w-5 h-5 text-muted-foreground\" />\n                  )}\n                  <div>\n                    <p className=\"text-sm font-medium\">\n                      {hasNotificationPermission ? 'Notificações ativadas' : 'Notificações desativadas'}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {hasNotificationPermission \n                        ? 'Você receberá notificações de novas mensagens'\n                        : 'Ative para receber alertas no navegador'\n                      }\n                    </p>\n                  </div>\n                </div>\n                {!hasNotificationPermission && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={requestNotificationPermission}\n                    data-testid=\"button-enable-notifications\"\n                  >\n                    Ativar\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>Ações</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Button\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={() => setLocation('/admin/withdrawals')}\n                data-testid=\"button-admin-withdrawals\"\n              >\n                <Shield className=\"w-4 h-4 mr-2\" />\n                Processar Saques (Admin)\n              </Button>\n              <Button\n                variant=\"destructive\"\n                className=\"w-full\"\n                onClick={handleLogout}\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Sair\n              </Button>\n            </CardContent>\n          </Card>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default function ProfilePage() {\n  if (!GOOGLE_MAPS_API_KEY) {\n    return <ProfilePageContent />;\n  }\n\n  return (\n    <APIProvider apiKey={GOOGLE_MAPS_API_KEY}>\n      <ProfilePageContent />\n    </APIProvider>\n  );\n}\n","size_bytes":14978},"client/src/pages/waiting.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useRoute, useLocation } from 'wouter';\nimport { useAuth } from '@/lib/auth-context';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2, MapPin, Clock } from 'lucide-react';\n\nexport default function WaitingPage() {\n  const [, params] = useRoute('/waiting/:id');\n  const [, setLocation] = useLocation();\n  const { token, user } = useAuth();\n  const { toast } = useToast();\n  const [serviceRequest, setServiceRequest] = useState<any>(null);\n  const [elapsedTime, setElapsedTime] = useState(0);\n\n  useEffect(() => {\n    if (!params?.id) {\n      setLocation('/');\n      return;\n    }\n\n    loadServiceRequest();\n    const interval = setInterval(loadServiceRequest, 3000);\n    return () => clearInterval(interval);\n  }, [params?.id, token]);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setElapsedTime((prev) => prev + 1);\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  useEffect(() => {\n    const handleWebSocketMessage = (event: any) => {\n      const data = event.detail;\n      \n      if (data.type === 'service_request_accepted' && params?.id && data.data?.id === params.id) {\n        toast({\n          title: \"Mecânico encontrado!\",\n          description: `${data.mechanic?.fullName || 'Um mecânico'} aceitou sua chamada`,\n        });\n        \n        setTimeout(() => {\n          setLocation(`/ride/${params.id}`);\n        }, 1500);\n      }\n    };\n\n    window.addEventListener('websocket-message', handleWebSocketMessage);\n    return () => window.removeEventListener('websocket-message', handleWebSocketMessage);\n  }, [params?.id, setLocation, toast]);\n\n  const loadServiceRequest = async () => {\n    if (!params?.id) return;\n\n    try {\n      const response = await fetch(`/api/service-requests/${params.id}`, {\n        headers: { 'Authorization': `Bearer ${token}` },\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setServiceRequest(data);\n        \n        if (data.status === 'accepted') {\n          setLocation(`/ride/${params.id}`);\n        } else if (data.status === 'cancelled') {\n          toast({\n            title: \"Chamada cancelada\",\n            description: \"A chamada foi cancelada\",\n            variant: \"destructive\",\n          });\n          setLocation('/');\n        }\n      }\n    } catch (error) {\n      console.error('Erro ao carregar chamada:', error);\n    }\n  };\n\n  const handleCancel = async () => {\n    if (!params?.id) return;\n\n    try {\n      const response = await fetch(`/api/service-requests/${params.id}/cancel`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Erro ao cancelar chamada');\n      }\n\n      toast({\n        title: \"Chamada cancelada\",\n        description: \"Sua chamada foi cancelada\",\n      });\n      \n      setLocation('/');\n    } catch (error: any) {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  if (!serviceRequest) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-4 max-w-lg\">\n      <Card>\n        <CardHeader>\n          <CardTitle data-testid=\"text-title\">\n            Procurando Mecânicos Próximos\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"flex flex-col items-center justify-center py-8\">\n            <div className=\"relative\">\n              <Loader2 className=\"w-16 h-16 animate-spin text-primary\" />\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <div className=\"w-12 h-12 rounded-full bg-primary/10 animate-ping\" />\n              </div>\n            </div>\n            \n            <p className=\"text-lg font-medium mt-6\" data-testid=\"text-status\">\n              Aguardando resposta dos mecânicos...\n            </p>\n            \n            <div className=\"flex items-center gap-2 mt-4 text-muted-foreground\">\n              <Clock className=\"w-4 h-4\" />\n              <span data-testid=\"text-elapsed\">{formatTime(elapsedTime)}</span>\n            </div>\n          </div>\n\n          <div className=\"space-y-3 p-4 bg-muted rounded-md\">\n            <div className=\"flex items-start gap-2\">\n              <MapPin className=\"w-4 h-4 mt-1 text-muted-foreground\" />\n              <div>\n                <p className=\"text-sm font-medium\">Local de atendimento:</p>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"text-address\">\n                  {serviceRequest.pickupAddress}\n                </p>\n              </div>\n            </div>\n\n            {serviceRequest.description && (\n              <div>\n                <p className=\"text-sm font-medium\">Descrição do problema:</p>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"text-description\">\n                  {serviceRequest.description}\n                </p>\n              </div>\n            )}\n\n            <div>\n              <p className=\"text-sm font-medium\">Valor pago:</p>\n              <p className=\"text-lg font-bold text-primary\" data-testid=\"text-price\">\n                R$ {parseFloat(serviceRequest.totalPrice || '50.00').toFixed(2)}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                Valor final pode variar com base na distância\n              </p>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <p className=\"text-sm text-center text-muted-foreground\">\n              Estamos notificando os mecânicos mais próximos de você.\n              Isso pode levar alguns minutos.\n            </p>\n            \n            <Button\n              variant=\"destructive\"\n              className=\"w-full\"\n              onClick={handleCancel}\n              data-testid=\"button-cancel\"\n            >\n              Cancelar Chamada\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6572},"client/src/pages/wallet.tsx":{"content":"import { useAuth } from '@/lib/auth-context';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { Wallet as WalletIcon, DollarSign, TrendingUp, Clock, CheckCircle, AlertCircle, Info } from 'lucide-react';\nimport { useState } from 'react';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\n\ninterface BalanceData {\n  available: number;\n  pending: number;\n  total: number;\n}\n\ninterface Transaction {\n  id: string;\n  type: string;\n  amount: string;\n  description: string;\n  status: string;\n  availableAt: string | null;\n  createdAt: string;\n  withdrawalMethod: string | null;\n  withdrawalDetails: string | null;\n}\n\nexport default function WalletPage() {\n  const { user, token, refreshUser } = useAuth();\n  const { toast } = useToast();\n  const [isWithdrawDialogOpen, setIsWithdrawDialogOpen] = useState(false);\n  const [withdrawAmount, setWithdrawAmount] = useState('');\n  const [withdrawMethod, setWithdrawMethod] = useState('pix');\n  \n  const [bankData, setBankData] = useState({\n    bankAccountName: user?.bankAccountName || '',\n    bankAccountNumber: user?.bankAccountNumber || '',\n    bankName: user?.bankName || '',\n    bankBranch: user?.bankBranch || '',\n    pixKey: user?.pixKey || '',\n  });\n\n  const { data: balance, isLoading: isLoadingBalance } = useQuery<BalanceData>({\n    queryKey: ['/api/wallet/balance'],\n    enabled: !!token && user?.userType === 'mechanic',\n  });\n\n  const { data: transactions = [], isLoading: isLoadingTransactions } = useQuery<Transaction[]>({\n    queryKey: ['/api/wallet/transactions'],\n    enabled: !!token,\n  });\n\n  const updateBankDataMutation = useMutation({\n    mutationFn: async (data: typeof bankData) => {\n      return await apiRequest('POST', '/api/wallet/bank-data', data);\n    },\n    onSuccess: async () => {\n      await refreshUser();\n      toast({\n        title: \"Dados bancários atualizados\",\n        description: \"Suas informações foram salvas com sucesso\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const requestWithdrawalMutation = useMutation({\n    mutationFn: async ({ amount, method }: { amount: number; method: string }) => {\n      return await apiRequest('POST', '/api/wallet/withdraw', { amount, method });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Saque solicitado\",\n        description: \"Seu saque está sendo processado e será transferido em até 2 dias úteis\",\n      });\n      setIsWithdrawDialogOpen(false);\n      setWithdrawAmount('');\n      queryClient.invalidateQueries({ queryKey: ['/api/wallet/balance'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/wallet/transactions'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleBankDataSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateBankDataMutation.mutate(bankData);\n  };\n\n  const handleWithdrawSubmit = () => {\n    const amount = parseFloat(withdrawAmount);\n    if (!amount || amount <= 0) {\n      toast({\n        title: \"Valor inválido\",\n        description: \"Digite um valor válido para saque\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!balance || amount > balance.available) {\n      toast({\n        title: \"Saldo insuficiente\",\n        description: `Você tem apenas R$ ${balance?.available.toFixed(2)} disponível`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (withdrawMethod === 'pix' && !hasPixKey) {\n      toast({\n        title: \"Dados incompletos\",\n        description: \"Configure sua chave PIX na aba Dados Bancários\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (withdrawMethod === 'bank_transfer' && !hasBankData) {\n      toast({\n        title: \"Dados incompletos\",\n        description: \"Complete seus dados bancários primeiro\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    requestWithdrawalMutation.mutate({ amount, method: withdrawMethod });\n  };\n\n  const hasBankData = (bankData.bankAccountName && bankData.bankAccountNumber && bankData.bankName) || \n                      (user?.bankAccountName && user?.bankAccountNumber && user?.bankName);\n  const hasPixKey = !!bankData.pixKey || !!user?.pixKey;\n\n  return (\n    <div className=\"container max-w-5xl mx-auto p-4 space-y-6\">\n      <div className=\"flex items-center gap-3\">\n        <WalletIcon className=\"w-8 h-8 text-primary\" />\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">Carteira</h1>\n          <p className=\"text-muted-foreground\">Gerencie seus ganhos e dados bancários</p>\n        </div>\n      </div>\n\n      {user?.userType === 'mechanic' && (\n        <div className=\"grid md:grid-cols-2 gap-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <DollarSign className=\"w-5 h-5 text-green-600\" />\n                Saldo Disponível\n              </CardTitle>\n              <CardDescription>\n                Disponível para saque agora\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <p className=\"text-4xl font-bold text-green-600\" data-testid=\"text-available-balance\">\n                  {isLoadingBalance ? '...' : `R$ ${balance?.available.toFixed(2) || '0.00'}`}\n                </p>\n                \n                <Dialog open={isWithdrawDialogOpen} onOpenChange={setIsWithdrawDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button\n                      disabled={!balance || balance.available <= 0 || (!hasBankData && !hasPixKey)}\n                      className=\"w-full\"\n                      size=\"lg\"\n                      data-testid=\"button-request-withdraw\"\n                    >\n                      Solicitar Saque\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Solicitar Saque</DialogTitle>\n                      <DialogDescription>\n                        Informe o valor e o método de transferência\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"space-y-4 mt-4\">\n                      <div>\n                        <Label htmlFor=\"withdraw-amount\">Valor do Saque</Label>\n                        <Input\n                          id=\"withdraw-amount\"\n                          type=\"number\"\n                          step=\"0.01\"\n                          min=\"0.01\"\n                          value={withdrawAmount}\n                          onChange={(e) => setWithdrawAmount(e.target.value)}\n                          placeholder=\"0.00\"\n                          data-testid=\"input-withdraw-amount\"\n                        />\n                        <p className=\"text-sm text-muted-foreground mt-1\">\n                          Disponível: R$ {balance?.available.toFixed(2) || '0.00'}\n                        </p>\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"withdraw-method\">Método de Transferência</Label>\n                        <Select value={withdrawMethod} onValueChange={setWithdrawMethod}>\n                          <SelectTrigger data-testid=\"select-withdraw-method\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"pix\" disabled={!hasPixKey}>PIX {!hasPixKey && '(Configure primeiro)'}</SelectItem>\n                            <SelectItem value=\"bank_transfer\" disabled={!hasBankData}>Transferência Bancária {!hasBankData && '(Configure primeiro)'}</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      {withdrawMethod === 'pix' && hasPixKey && (\n                        <Alert>\n                          <Info className=\"w-4 h-4\" />\n                          <AlertDescription>\n                            Chave PIX: {bankData.pixKey || user?.pixKey}\n                          </AlertDescription>\n                        </Alert>\n                      )}\n\n                      {withdrawMethod === 'bank_transfer' && hasBankData && (\n                        <Alert>\n                          <Info className=\"w-4 h-4\" />\n                          <AlertDescription>\n                            {bankData.bankName || user?.bankName} - Ag: {bankData.bankBranch || user?.bankBranch || 'N/A'} - Conta: {bankData.bankAccountNumber || user?.bankAccountNumber}\n                          </AlertDescription>\n                        </Alert>\n                      )}\n\n                      <Button \n                        onClick={handleWithdrawSubmit}\n                        disabled={requestWithdrawalMutation.isPending}\n                        className=\"w-full\"\n                        data-testid=\"button-submit-withdraw\"\n                      >\n                        {requestWithdrawalMutation.isPending ? \"Processando...\" : \"Confirmar Saque\"}\n                      </Button>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Clock className=\"w-5 h-5 text-orange-600\" />\n                Saldo Pendente\n              </CardTitle>\n              <CardDescription>\n                Disponível em até 12h após conclusão\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-4xl font-bold text-orange-600\" data-testid=\"text-pending-balance\">\n                {isLoadingBalance ? '...' : `R$ ${balance?.pending.toFixed(2) || '0.00'}`}\n              </p>\n              <Alert className=\"mt-4\">\n                <AlertCircle className=\"w-4 h-4\" />\n                <AlertDescription className=\"text-xs\">\n                  Valores de serviços concluídos ficam disponíveis para saque 12 horas após a finalização\n                </AlertDescription>\n              </Alert>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <Tabs defaultValue={user?.userType === 'mechanic' ? 'transactions' : 'transactions'}>\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"transactions\" data-testid=\"tab-transactions\">Transações</TabsTrigger>\n          {user?.userType === 'mechanic' && (\n            <TabsTrigger value=\"bank-data\" data-testid=\"tab-bank-data\">Dados Bancários</TabsTrigger>\n          )}\n        </TabsList>\n\n        <TabsContent value=\"transactions\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"w-5 h-5\" />\n                Histórico de Transações\n              </CardTitle>\n              <CardDescription>\n                Todas as suas transações e saques\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {isLoadingTransactions ? (\n                <p className=\"text-center py-8 text-muted-foreground\">Carregando...</p>\n              ) : transactions.length === 0 ? (\n                <p className=\"text-center py-8 text-muted-foreground\">Nenhuma transação ainda</p>\n              ) : (\n                <div className=\"space-y-3\">\n                  {transactions.map((transaction) => {\n                    const amount = parseFloat(transaction.amount);\n                    const isEarning = transaction.type === 'mechanic_earnings';\n                    const isWithdrawal = transaction.type === 'withdrawal';\n                    const isPending = transaction.status === 'pending';\n                    const availableDate = transaction.availableAt ? new Date(transaction.availableAt) : null;\n                    const isAvailable = !availableDate || availableDate <= new Date();\n\n                    return (\n                      <div \n                        key={transaction.id} \n                        className=\"flex items-center justify-between p-4 border rounded-lg hover-elevate\" \n                        data-testid={`transaction-${transaction.id}`}\n                      >\n                        <div className=\"flex items-center gap-4\">\n                          <div className={`p-2 rounded-full ${\n                            isEarning ? 'bg-green-100' : \n                            isWithdrawal ? 'bg-blue-100' : 'bg-gray-100'\n                          }`}>\n                            {isEarning ? (\n                              <TrendingUp className=\"w-4 h-4 text-green-600\" />\n                            ) : isWithdrawal ? (\n                              <WalletIcon className=\"w-4 h-4 text-blue-600\" />\n                            ) : (\n                              <Clock className=\"w-4 h-4 text-gray-600\" />\n                            )}\n                          </div>\n                          <div>\n                            <p className=\"font-medium\">{transaction.description}</p>\n                            <div className=\"flex items-center gap-3 text-sm text-muted-foreground\">\n                              <span className=\"flex items-center gap-1\">\n                                <Clock className=\"w-3 h-3\" />\n                                {new Date(transaction.createdAt).toLocaleString('pt-BR', {\n                                  day: '2-digit',\n                                  month: '2-digit',\n                                  year: 'numeric',\n                                  hour: '2-digit',\n                                  minute: '2-digit'\n                                })}\n                              </span>\n                              {availableDate && !isAvailable && (\n                                <span className=\"text-xs bg-orange-100 text-orange-700 px-2 py-0.5 rounded\">\n                                  Disponível em {availableDate.toLocaleString('pt-BR', {\n                                    day: '2-digit',\n                                    month: '2-digit',\n                                    hour: '2-digit',\n                                    minute: '2-digit'\n                                  })}\n                                </span>\n                              )}\n                            </div>\n                            {isWithdrawal && transaction.withdrawalDetails && (\n                              <p className=\"text-xs text-muted-foreground mt-1\">\n                                {transaction.withdrawalDetails}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className={`text-lg font-bold ${\n                            isEarning ? 'text-green-600' : isWithdrawal ? 'text-blue-600' : 'text-gray-600'\n                          }`} data-testid={`transaction-amount-${transaction.id}`}>\n                            {amount > 0 ? '+' : ''}R$ {Math.abs(amount).toFixed(2)}\n                          </p>\n                          <div className=\"flex items-center gap-1 text-sm\">\n                            {isPending ? (\n                              <>\n                                <Clock className=\"w-3 h-3 text-orange-500\" />\n                                <span className=\"text-orange-500\">Pendente</span>\n                              </>\n                            ) : (\n                              <>\n                                <CheckCircle className=\"w-3 h-3 text-green-600\" />\n                                <span className=\"text-green-600\">Concluído</span>\n                              </>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {user?.userType === 'mechanic' && (\n          <TabsContent value=\"bank-data\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Dados Bancários</CardTitle>\n                <CardDescription>\n                  Configure seus dados para receber saques via transferência ou PIX\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleBankDataSubmit} className=\"space-y-4\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"bankAccountName\">Nome do Titular</Label>\n                      <Input\n                        id=\"bankAccountName\"\n                        value={bankData.bankAccountName}\n                        onChange={(e) => setBankData({...bankData, bankAccountName: e.target.value})}\n                        placeholder=\"Nome completo\"\n                        data-testid=\"input-account-name\"\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"bankName\">Banco</Label>\n                      <Input\n                        id=\"bankName\"\n                        value={bankData.bankName}\n                        onChange={(e) => setBankData({...bankData, bankName: e.target.value})}\n                        placeholder=\"Ex: Banco do Brasil, Caixa, Itaú\"\n                        data-testid=\"input-bank-name\"\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"bankAccountNumber\">Número da Conta</Label>\n                      <Input\n                        id=\"bankAccountNumber\"\n                        value={bankData.bankAccountNumber}\n                        onChange={(e) => setBankData({...bankData, bankAccountNumber: e.target.value})}\n                        placeholder=\"12345-6\"\n                        data-testid=\"input-account-number\"\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"bankBranch\">Agência (Opcional)</Label>\n                      <Input\n                        id=\"bankBranch\"\n                        value={bankData.bankBranch}\n                        onChange={(e) => setBankData({...bankData, bankBranch: e.target.value})}\n                        placeholder=\"0001\"\n                        data-testid=\"input-bank-branch\"\n                      />\n                    </div>\n                    <div className=\"space-y-2 md:col-span-2\">\n                      <Label htmlFor=\"pixKey\">Chave PIX (Opcional)</Label>\n                      <Input\n                        id=\"pixKey\"\n                        value={bankData.pixKey}\n                        onChange={(e) => setBankData({...bankData, pixKey: e.target.value})}\n                        placeholder=\"email@exemplo.com, CPF, telefone ou chave aleatória\"\n                        data-testid=\"input-pix-key\"\n                      />\n                      <p className=\"text-xs text-muted-foreground\">\n                        Configure PIX ou transferência bancária para receber saques\n                      </p>\n                    </div>\n                  </div>\n                  <Button\n                    type=\"submit\"\n                    disabled={updateBankDataMutation.isPending}\n                    data-testid=\"button-save-bank-data\"\n                  >\n                    {updateBankDataMutation.isPending ? \"Salvando...\" : \"Salvar Dados Bancários\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        )}\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":20905},"client/src/components/examples/ChatInterface.tsx":{"content":"import { useState } from \"react\";\nimport { ChatInterface } from \"../ChatInterface\";\nimport mechanicAvatar from \"@assets/generated_images/Professional_mechanic_avatar_53e71776.png\";\n\nexport default function ChatInterfaceExample() {\n  //TODO: remove mock functionality\n  const [messages, setMessages] = useState([\n    {\n      id: \"1\",\n      senderId: \"provider-123\",\n      senderName: \"Carlos Silva\",\n      content: \"Olá! Estou a caminho do seu local. Chego em 10 minutos.\",\n      timestamp: \"14:30\",\n      type: \"text\" as const,\n    },\n    {\n      id: \"2\", \n      senderId: \"client-456\",\n      senderName: \"Ana Santos\",\n      content: \"Perfeito! Estarei aguardando próximo ao poste azul.\",\n      timestamp: \"14:32\",\n      type: \"text\" as const,\n    },\n    {\n      id: \"3\",\n      senderId: \"provider-123\", \n      senderName: \"Carlos Silva\",\n      content: \"Localização compartilhada\",\n      timestamp: \"14:35\",\n      type: \"location\" as const,\n    },\n    {\n      id: \"4\",\n      senderId: \"provider-123\",\n      senderName: \"Carlos Silva\", \n      content: \"Serviço iniciado - Checando o problema\",\n      timestamp: \"14:40\",\n      type: \"status\" as const,\n    },\n  ]);\n\n  const handleSendMessage = (content: string) => {\n    console.log(\"Sending message:\", content);\n    const newMessage = {\n      id: Date.now().toString(),\n      senderId: \"client-456\",\n      senderName: \"Ana Santos\",\n      content,\n      timestamp: new Date().toLocaleTimeString(\"pt-BR\", { \n        hour: \"2-digit\", \n        minute: \"2-digit\" \n      }),\n      type: \"text\" as const,\n    };\n    setMessages(prev => [...prev, newMessage]);\n  };\n\n  const handleSendLocation = () => {\n    console.log(\"Sending location\");\n    const newMessage = {\n      id: Date.now().toString(),\n      senderId: \"client-456\", \n      senderName: \"Ana Santos\",\n      content: \"Localização compartilhada\",\n      timestamp: new Date().toLocaleTimeString(\"pt-BR\", { \n        hour: \"2-digit\", \n        minute: \"2-digit\" \n      }),\n      type: \"location\" as const,\n    };\n    setMessages(prev => [...prev, newMessage]);\n  };\n\n  const handleCall = () => {\n    console.log(\"Initiating call\");\n  };\n\n  return (\n    <div className=\"p-6 max-w-2xl\">\n      <h2 className=\"text-2xl font-bold mb-6\">Chat Interface</h2>\n      \n      <ChatInterface\n        serviceId=\"service-002\"\n        currentUserId=\"client-456\"\n        otherParticipant={{\n          id: \"provider-123\",\n          name: \"Carlos Silva\", \n          avatar: mechanicAvatar,\n          role: \"provider\",\n          status: \"online\",\n        }}\n        messages={messages}\n        onSendMessage={handleSendMessage}\n        onSendLocation={handleSendLocation}\n        onCall={handleCall}\n      />\n    </div>\n  );\n}","size_bytes":2710},"client/src/components/examples/LoginScreen.tsx":{"content":"import { LoginScreen } from \"../LoginScreen\";\n\nexport default function LoginScreenExample() {\n  const handleLogin = (credentials: { \n    email: string; \n    password: string; \n    userType: \"client\" | \"provider\" \n  }) => {\n    console.log(\"Login successful:\", credentials);\n    // TODO: remove mock functionality\n    alert(`Login successful as ${credentials.userType}: ${credentials.email}`);\n  };\n\n  return (\n    <LoginScreen onLogin={handleLogin} />\n  );\n}","size_bytes":458},"client/src/components/examples/MapView.tsx":{"content":"import { MapView } from \"../MapView\";\nimport mechanicAvatar from \"@assets/generated_images/Professional_mechanic_avatar_53e71776.png\";\n\nexport default function MapViewExample() {\n  const handleAction = (action: string) => {\n    console.log(`${action} triggered`);\n  };\n\n  // TODO: remove mock functionality\n  const mockLocations = {\n    currentLocation: {\n      id: \"client-current\",\n      name: \"Cliente\",\n      type: \"client\" as const,\n      latitude: -23.550520,\n      longitude: -46.633308,\n      address: \"Rua das Flores, 123 - Vila Madalena, São Paulo, SP\",\n    },\n    providerLocation: {\n      id: \"provider-carlos\",\n      name: \"Carlos Silva\",\n      type: \"provider\" as const,\n      latitude: -23.545520,\n      longitude: -46.643308,\n      address: \"Av. Paulista, 1000\",\n      avatar: mechanicAvatar,\n      status: \"in-transit\" as const,\n      estimatedArrival: \"8 minutos\",\n    },\n    destinationLocation: {\n      id: \"destination\",\n      name: \"Oficina AutoCare\",\n      type: \"destination\" as const,\n      latitude: -23.552520,\n      longitude: -46.623308,\n      address: \"Rua Augusta, 456 - Consolação, São Paulo, SP\",\n    },\n  };\n\n  return (\n    <div className=\"p-6 max-w-4xl\">\n      <h2 className=\"text-2xl font-bold mb-6\">Map View</h2>\n      \n      <MapView\n        currentLocation={mockLocations.currentLocation}\n        providerLocation={mockLocations.providerLocation}\n        destinationLocation={mockLocations.destinationLocation}\n        serviceId=\"service-123\"\n        onCallProvider={() => handleAction(\"Call Provider\")}\n        onShareLocation={() => handleAction(\"Share Location\")}\n      />\n    </div>\n  );\n}","size_bytes":1636},"client/src/components/examples/Navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Navigation } from \"../Navigation\";\n\nexport default function NavigationExample() {\n  const [activeTab, setActiveTab] = useState(\"home\");\n  const [userType, setUserType] = useState<\"client\" | \"provider\">(\"client\");\n  \n  return (\n    <div className=\"h-screen bg-background\">\n      <div className=\"p-4 space-y-4\">\n        <div className=\"flex space-x-2\">\n          <button\n            onClick={() => setUserType(\"client\")}\n            className={`px-4 py-2 rounded ${userType === \"client\" ? \"bg-primary text-primary-foreground\" : \"bg-secondary\"}`}\n          >\n            Cliente\n          </button>\n          <button\n            onClick={() => setUserType(\"provider\")}\n            className={`px-4 py-2 rounded ${userType === \"provider\" ? \"bg-primary text-primary-foreground\" : \"bg-secondary\"}`}\n          >\n            Prestador\n          </button>\n        </div>\n        <p className=\"text-muted-foreground\">Active tab: {activeTab}</p>\n      </div>\n      \n      <Navigation \n        userType={userType}\n        activeTab={activeTab}\n        onTabChange={setActiveTab}\n        unreadMessages={3}\n      />\n      \n      <div className=\"pb-20 md:pb-0\">\n        <div className=\"p-4\">\n          <h3 className=\"text-lg font-semibold\">Content Area</h3>\n          <p className=\"text-muted-foreground\">This would contain the main content for the {activeTab} tab.</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1444},"client/src/components/examples/ProviderDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { ProviderDashboard } from \"../ProviderDashboard\";\n\nexport default function ProviderDashboardExample() {\n  const [isOnline, setIsOnline] = useState(true);\n  const [activeService, setActiveService] = useState<{\n    id: string;\n    clientName: string;\n    serviceType: \"tow\" | \"mechanic\" | \"emergency\";\n    fromLocation: string;\n    toLocation?: string;\n    description: string;\n    status: \"accepted\" | \"in-transit\" | \"working\";\n    startTime: string;\n    estimatedCompletion: string;\n  } | undefined>({\n    id: \"service-active-001\",\n    clientName: \"Ana Santos\",\n    serviceType: \"mechanic\",\n    fromLocation: \"Rua das Flores, 123 - Vila Madalena, São Paulo\",\n    toLocation: undefined,\n    description: \"Pneu furado na rua. Preciso trocar o pneu do carro.\",\n    status: \"in-transit\",\n    startTime: \"14:30\",\n    estimatedCompletion: \"15:30\",\n  });\n\n  // TODO: remove mock functionality\n  const availableRequests = [\n    {\n      id: \"req-001\",\n      clientName: \"João Silva\",\n      serviceType: \"tow\" as const,\n      location: \"Av. Paulista, 1000 - Bela Vista, São Paulo\",\n      description: \"Carro não liga. Bateria descarregada, preciso de guincho.\",\n      distance: \"1.2 km\",\n      estimatedPay: \"R$ 150,00\",\n      urgency: \"medium\" as const,\n      requestTime: \"Há 3 min\",\n    },\n    {\n      id: \"req-002\", \n      clientName: \"Maria Oliveira\",\n      serviceType: \"emergency\" as const,\n      location: \"Marginal Pinheiros, km 18 - Sentido Interior\",\n      description: \"Acidente leve, carro bateu na mureta. Preciso de guincho urgente.\",\n      distance: \"3.8 km\",\n      estimatedPay: \"R$ 280,00\",\n      urgency: \"high\" as const,\n      requestTime: \"Há 1 min\",\n    },\n    {\n      id: \"req-003\",\n      clientName: \"Carlos Santos\",\n      serviceType: \"mechanic\" as const,\n      location: \"Rua Augusta, 500 - Consolação, São Paulo\",\n      description: \"Motor esquentando muito. Pode ser problema no radiador.\",\n      distance: \"2.1 km\", \n      estimatedPay: \"R$ 120,00\",\n      urgency: \"low\" as const,\n      requestTime: \"Há 8 min\",\n    },\n  ];\n\n  const handleAction = (action: string, id?: string) => {\n    console.log(`${action} triggered`, id ? `for ${id}` : '');\n    \n    if (action === \"Accept\" && id) {\n      const request = availableRequests.find(r => r.id === id);\n      if (request) {\n        setActiveService({\n          id: id,\n          clientName: request.clientName,\n          serviceType: request.serviceType,\n          fromLocation: request.location,\n          description: request.description,\n          status: \"accepted\",\n          startTime: new Date().toLocaleTimeString(\"pt-BR\", { hour: \"2-digit\", minute: \"2-digit\" }),\n          estimatedCompletion: \"Em 60 min\",\n        });\n      }\n    }\n    \n    if (action === \"Complete\") {\n      setActiveService(undefined);\n    }\n  };\n\n  return (\n    <div className=\"p-6 max-w-4xl\">\n      <h2 className=\"text-2xl font-bold mb-6\">Provider Dashboard</h2>\n      \n      <ProviderDashboard\n        providerName=\"Carlos Mecânico\"\n        isOnline={isOnline}\n        onToggleStatus={setIsOnline}\n        availableRequests={activeService ? [] : availableRequests}\n        activeService={activeService}\n        onAcceptRequest={(id) => handleAction(\"Accept\", id)}\n        onRejectRequest={(id) => handleAction(\"Reject\", id)}\n        onUpdateStatus={(status) => handleAction(`Update status to ${status}`)}\n        onCompleteService={() => handleAction(\"Complete\")}\n        onChat={() => handleAction(\"Chat\")}\n        onCall={() => handleAction(\"Call\")}\n      />\n    </div>\n  );\n}","size_bytes":3581},"client/src/components/examples/ServiceRequestCard.tsx":{"content":"import { ServiceRequestCard } from \"../ServiceRequestCard\";\nimport mechanicAvatar from \"@assets/generated_images/Professional_mechanic_avatar_53e71776.png\";\n\nexport default function ServiceRequestCardExample() {\n  const handleAction = (action: string, id: string) => {\n    console.log(`${action} triggered for service ${id}`);\n  };\n\n  //TODO: remove mock functionality\n  const mockServices = [\n    {\n      id: \"service-001\",\n      serviceType: \"tow\" as const,\n      status: \"pending\" as const,\n      fromAddress: \"Rua das Flores, 123 - Vila Madalena, São Paulo\",\n      toAddress: \"Oficina AutoCare - Rua Augusta, 456\",\n      description: \"Carro não liga após tempestade. Bateria pode estar descarregada.\",\n      requestTime: \"Há 5 minutos\",\n      estimatedPrice: \"R$ 120,00\",\n      distance: \"2.3 km\",\n      viewType: \"provider\" as const,\n    },\n    {\n      id: \"service-002\", \n      serviceType: \"mechanic\" as const,\n      status: \"accepted\" as const,\n      fromAddress: \"Av. Paulista, 1000 - Bela Vista, São Paulo\",\n      description: \"Pneu furado no meio da Paulista. Preciso trocar urgente.\",\n      requestTime: \"Há 15 minutos\",\n      providerName: \"Carlos Silva\",\n      providerAvatar: mechanicAvatar,\n      providerRating: 4.8,\n      estimatedArrival: \"10 min\",\n      estimatedPrice: \"R$ 80,00\",\n      viewType: \"client\" as const,\n    },\n    {\n      id: \"service-003\",\n      serviceType: \"emergency\" as const,\n      status: \"in-transit\" as const,\n      fromAddress: \"Marginal Pinheiros, km 15 - Sentido Interior\",\n      toAddress: \"Hospital São Luiz - Unidade Morumbi\",\n      description: \"Acidente leve, carro bateu na mureta. Preciso de guincho urgente.\",\n      requestTime: \"Há 3 minutos\",\n      providerName: \"João Mecânico\",\n      providerAvatar: mechanicAvatar,\n      providerRating: 4.9,\n      estimatedArrival: \"5 min\",\n      viewType: \"client\" as const,\n    },\n  ];\n\n  return (\n    <div className=\"p-6 space-y-6 max-w-2xl\">\n      <h2 className=\"text-2xl font-bold\">Service Request Cards</h2>\n      \n      {mockServices.map((service) => (\n        <ServiceRequestCard\n          key={service.id}\n          {...service}\n          onAccept={() => handleAction(\"Accept\", service.id)}\n          onReject={() => handleAction(\"Reject\", service.id)}\n          onChat={() => handleAction(\"Chat\", service.id)}\n          onCall={() => handleAction(\"Call\", service.id)}\n        />\n      ))}\n    </div>\n  );\n}","size_bytes":2419},"client/src/components/examples/ServiceRequestForm.tsx":{"content":"import { ServiceRequestForm, ServiceRequestData } from \"../ServiceRequestForm\";\n\nexport default function ServiceRequestFormExample() {\n  const handleSubmit = (requestData: ServiceRequestData) => {\n    console.log(\"Service request submitted:\", requestData);\n    // TODO: remove mock functionality\n    alert(`Serviço solicitado: ${requestData.serviceType}\\nLocal: ${requestData.fromAddress}\\nDescrição: ${requestData.description}`);\n  };\n\n  const handleCancel = () => {\n    console.log(\"Service request cancelled\");\n  };\n\n  return (\n    <div className=\"p-6 flex justify-center\">\n      <ServiceRequestForm\n        onSubmit={handleSubmit}\n        onCancel={handleCancel}\n      />\n    </div>\n  );\n}","size_bytes":696},"client/src/components/examples/ThemeProvider.tsx":{"content":"import { ThemeProvider } from \"../ThemeProvider\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"../ThemeProvider\";\n\nfunction ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n  \n  return (\n    <div className=\"p-6 space-y-4\">\n      <h2 className=\"text-2xl font-bold\">Theme Provider Example</h2>\n      <p className=\"text-muted-foreground\">Current theme: {theme}</p>\n      <div className=\"space-x-2\">\n        <Button \n          onClick={() => setTheme(\"light\")} \n          variant={theme === \"light\" ? \"default\" : \"outline\"}\n        >\n          Light\n        </Button>\n        <Button \n          onClick={() => setTheme(\"dark\")} \n          variant={theme === \"dark\" ? \"default\" : \"outline\"}\n        >\n          Dark\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default function ThemeProviderExample() {\n  return (\n    <ThemeProvider>\n      <ThemeToggle />\n    </ThemeProvider>\n  );\n}","size_bytes":929},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/lib/fetch-with-auth.ts":{"content":"export async function fetchWithAuth(url: string, options: RequestInit = {}): Promise<Response> {\n  const token = localStorage.getItem('auth_token');\n  \n  const headers = {\n    ...options.headers,\n    ...(token ? { 'Authorization': `Bearer ${token}` } : {}),\n  };\n\n  const response = await fetch(url, {\n    ...options,\n    headers,\n  });\n\n  return response;\n}\n","size_bytes":359},"client/src/pages/onboarding.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Wrench, MapPin, MessageCircle, ChevronRight, ChevronLeft } from 'lucide-react';\n\nconst slides = [\n  {\n    icon: Wrench,\n    title: 'Encontre Mecânicos Próximos',\n    description: 'Conecte-se instantaneamente com mecânicos profissionais na sua região. Assistência rápida quando você mais precisa.',\n    color: 'text-primary',\n    bgColor: 'bg-primary/10',\n  },\n  {\n    icon: MapPin,\n    title: 'Rastreamento em Tempo Real',\n    description: 'Acompanhe a localização do mecânico em tempo real no mapa. Saiba exatamente quando a ajuda vai chegar.',\n    color: 'text-blue-500',\n    bgColor: 'bg-blue-500/10',\n  },\n  {\n    icon: MessageCircle,\n    title: 'Chat e Pagamento Seguro',\n    description: 'Comunique-se diretamente com o mecânico e pague de forma segura através do app. Tudo em um só lugar.',\n    color: 'text-green-500',\n    bgColor: 'bg-green-500/10',\n  },\n];\n\nexport default function OnboardingPage() {\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [, setLocation] = useLocation();\n\n  const handleNext = () => {\n    if (currentSlide < slides.length - 1) {\n      setCurrentSlide(currentSlide + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentSlide > 0) {\n      setCurrentSlide(currentSlide - 1);\n    }\n  };\n\n  const handleGetStarted = () => {\n    localStorage.setItem('onboarding_completed', 'true');\n    setLocation('/login');\n  };\n\n  const slide = slides[currentSlide];\n  const Icon = slide.icon;\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-background via-background to-primary/5\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"p-8 md:p-10 space-y-8 shadow-xl\">\n          {/* Logo/Title */}\n          <div className=\"text-center space-y-2\">\n            <div className=\"flex items-center justify-center gap-2 mb-6\">\n              <Wrench className=\"w-8 h-8 text-primary\" />\n              <h1 className=\"text-3xl font-bold\">Pronto Mecânico</h1>\n            </div>\n          </div>\n\n          {/* Icon */}\n          <div className=\"flex justify-center\">\n            <div className={`${slide.bgColor} p-8 rounded-full`}>\n              <Icon className={`w-24 h-24 ${slide.color}`} strokeWidth={1.5} />\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"text-center space-y-4 min-h-[140px]\">\n            <h2 className=\"text-2xl font-bold\" data-testid={`text-slide-title-${currentSlide}`}>\n              {slide.title}\n            </h2>\n            <p className=\"text-muted-foreground text-lg leading-relaxed\" data-testid={`text-slide-description-${currentSlide}`}>\n              {slide.description}\n            </p>\n          </div>\n\n          {/* Progress Dots */}\n          <div className=\"flex justify-center gap-2\">\n            {slides.map((_, index) => (\n              <button\n                key={index}\n                onClick={() => setCurrentSlide(index)}\n                className={`h-2 rounded-full transition-all ${\n                  index === currentSlide \n                    ? 'w-8 bg-primary' \n                    : 'w-2 bg-muted-foreground/30'\n                }`}\n                data-testid={`dot-${index}`}\n              />\n            ))}\n          </div>\n\n          {/* Navigation Buttons */}\n          <div className=\"flex gap-3\">\n            {currentSlide > 0 && (\n              <Button\n                variant=\"outline\"\n                onClick={handlePrevious}\n                className=\"flex-1\"\n                data-testid=\"button-previous\"\n              >\n                <ChevronLeft className=\"w-4 h-4 mr-2\" />\n                Anterior\n              </Button>\n            )}\n            \n            {currentSlide < slides.length - 1 ? (\n              <Button\n                onClick={handleNext}\n                className=\"flex-1\"\n                data-testid=\"button-next\"\n              >\n                Próximo\n                <ChevronRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            ) : (\n              <Button\n                onClick={handleGetStarted}\n                className=\"flex-1\"\n                data-testid=\"button-get-started\"\n              >\n                Ir para Login\n              </Button>\n            )}\n          </div>\n\n          {/* Skip Button */}\n          {currentSlide < slides.length - 1 && (\n            <button\n              onClick={handleGetStarted}\n              className=\"w-full text-center text-sm text-muted-foreground hover:text-foreground transition-colors\"\n              data-testid=\"button-skip\"\n            >\n              Pular introdução\n            </button>\n          )}\n        </Card>\n\n        {/* Desktop additional info */}\n        <div className=\"hidden md:block mt-8 text-center text-sm text-muted-foreground\">\n          <p>Assistência automotiva profissional a qualquer hora, em qualquer lugar</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5095},"client/src/lib/use-notifications.tsx":{"content":"import { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { useAuth } from './auth-context';\nimport { useToast } from '@/hooks/use-toast';\nimport { ToastAction } from '@/components/ui/toast';\nimport { useLocation } from 'wouter';\n\ninterface UnreadMessages {\n  [serviceRequestId: string]: number;\n}\n\ninterface NotificationsContextType {\n  unreadMessages: UnreadMessages;\n  markAsRead: (serviceRequestId: string) => void;\n  totalUnread: number;\n  requestNotificationPermission: () => Promise<void>;\n  hasNotificationPermission: boolean;\n}\n\nconst NotificationsContext = createContext<NotificationsContextType | null>(null);\n\nexport function NotificationsProvider({ children }: { children: React.ReactNode }) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [unreadMessages, setUnreadMessages] = useState<UnreadMessages>({});\n  const [hasNotificationPermission, setHasNotificationPermission] = useState(\n    typeof Notification !== 'undefined' && Notification.permission === 'granted'\n  );\n\n  const totalUnread = Object.values(unreadMessages).reduce((sum, count) => sum + count, 0);\n\n  const requestNotificationPermission = useCallback(async () => {\n    if (typeof Notification === 'undefined') {\n      toast({\n        title: \"Notificações não suportadas\",\n        description: \"Seu navegador não suporta notificações\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (Notification.permission === 'granted') {\n      setHasNotificationPermission(true);\n      return;\n    }\n\n    if (Notification.permission !== 'denied') {\n      const permission = await Notification.requestPermission();\n      if (permission === 'granted') {\n        setHasNotificationPermission(true);\n        toast({\n          title: \"Notificações ativadas\",\n          description: \"Você receberá notificações de novas mensagens\",\n        });\n      }\n    } else {\n      toast({\n        title: \"Permissão negada\",\n        description: \"Ative as notificações nas configurações do navegador\",\n        variant: \"destructive\",\n      });\n    }\n  }, [toast]);\n\n  const markAsRead = useCallback((serviceRequestId: string) => {\n    setUnreadMessages(prev => {\n      const updated = { ...prev };\n      delete updated[serviceRequestId];\n      return updated;\n    });\n  }, []);\n\n  const showBrowserNotification = useCallback((title: string, body: string, serviceRequestId: string) => {\n    if (typeof Notification !== 'undefined' && Notification.permission === 'granted') {\n      const notification = new Notification(title, {\n        body,\n        icon: '/icon-192x192.png',\n        badge: '/icon-192x192.png',\n        tag: `chat-${serviceRequestId}`,\n        requireInteraction: false,\n        silent: false,\n      });\n\n      notification.onclick = () => {\n        window.focus();\n        setLocation(`/ride/${serviceRequestId}/chat`);\n        notification.close();\n      };\n    }\n  }, [setLocation]);\n\n  useEffect(() => {\n    if (!user) return;\n\n    const handleWebSocketMessage = (event: any) => {\n      const data = event.detail;\n      \n      if (data.type === 'new_chat_message') {\n        const messageData = data.data;\n        const serviceRequestId = messageData.serviceRequestId;\n        \n        if (messageData.senderId !== user.id) {\n          const isOnChatPage = window.location.pathname === `/ride/${serviceRequestId}/chat`;\n          \n          if (!isOnChatPage) {\n            setUnreadMessages(prev => ({\n              ...prev,\n              [serviceRequestId]: (prev[serviceRequestId] || 0) + 1\n            }));\n\n            toast({\n              title: \"Nova mensagem\",\n              description: messageData.message.length > 50 \n                ? messageData.message.substring(0, 50) + '...' \n                : messageData.message,\n              action: (\n                <ToastAction \n                  altText=\"Ver mensagem\" \n                  onClick={() => {\n                    setLocation(`/ride/${serviceRequestId}/chat`);\n                  }}\n                >\n                  Ver\n                </ToastAction>\n              )\n            });\n\n            showBrowserNotification(\n              \"Nova mensagem no chat\",\n              messageData.message,\n              serviceRequestId\n            );\n          }\n        }\n      }\n    };\n\n    window.addEventListener('websocket-message', handleWebSocketMessage);\n    return () => window.removeEventListener('websocket-message', handleWebSocketMessage);\n  }, [user, toast, showBrowserNotification]);\n\n  return (\n    <NotificationsContext.Provider\n      value={{\n        unreadMessages,\n        markAsRead,\n        totalUnread,\n        requestNotificationPermission,\n        hasNotificationPermission,\n      }}\n    >\n      {children}\n    </NotificationsContext.Provider>\n  );\n}\n\nexport function useNotifications() {\n  const context = useContext(NotificationsContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within NotificationsProvider');\n  }\n  return context;\n}\n","size_bytes":5062},"client/src/pages/admin-withdrawals.tsx":{"content":"import { useQuery, useMutation } from '@tanstack/react-query';\nimport { useAuth } from '@/lib/auth-context';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { DollarSign, CheckCircle, Clock, User as UserIcon, CreditCard, Building } from 'lucide-react';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\n\ninterface WithdrawalWithUser {\n  id: string;\n  userId: string;\n  amount: string;\n  description: string;\n  withdrawalMethod: string;\n  withdrawalDetails: string;\n  createdAt: string;\n  status: string;\n  user: {\n    id: string;\n    name: string;\n    username: string;\n    email: string;\n  };\n}\n\nexport default function AdminWithdrawalsPage() {\n  const { token } = useAuth();\n  const { toast } = useToast();\n\n  const { data: withdrawals = [], isLoading } = useQuery<WithdrawalWithUser[]>({\n    queryKey: ['/api/admin/withdrawals'],\n    enabled: !!token,\n  });\n\n  const completeWithdrawalMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest('POST', `/api/admin/withdrawals/${id}/complete`, {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Saque confirmado\",\n        description: \"O saque foi marcado como concluído com sucesso\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/withdrawals'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleConfirmWithdrawal = (id: string) => {\n    if (window.confirm(\"Confirmar que você já transferiu o dinheiro para este mecânico?\")) {\n      completeWithdrawalMutation.mutate(id);\n    }\n  };\n\n  return (\n    <div className=\"container max-w-6xl mx-auto p-4 space-y-6\">\n      <div className=\"flex items-center gap-3\">\n        <DollarSign className=\"w-8 h-8 text-primary\" />\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">Saques Pendentes</h1>\n          <p className=\"text-muted-foreground\">Processar transferências para mecânicos</p>\n        </div>\n      </div>\n\n      <Alert>\n        <AlertDescription>\n          <strong>Instruções:</strong> Para cada saque pendente, faça a transferência via PIX ou TED bancário usando os dados fornecidos. \n          Após confirmar o pagamento, clique em \"Confirmar Transferência\" para atualizar o sistema.\n        </AlertDescription>\n      </Alert>\n\n      {isLoading ? (\n        <p className=\"text-center py-8 text-muted-foreground\">Carregando...</p>\n      ) : withdrawals.length === 0 ? (\n        <Card>\n          <CardContent className=\"py-12\">\n            <div className=\"text-center\">\n              <CheckCircle className=\"w-12 h-12 mx-auto mb-4 text-green-600\" />\n              <p className=\"text-xl font-medium\">Nenhum saque pendente</p>\n              <p className=\"text-muted-foreground mt-2\">Todos os saques foram processados!</p>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {withdrawals.map((withdrawal) => {\n            const amount = Math.abs(parseFloat(withdrawal.amount));\n            const isPix = withdrawal.withdrawalMethod === 'pix';\n\n            return (\n              <Card key={withdrawal.id} data-testid={`withdrawal-${withdrawal.id}`}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"p-3 bg-orange-100 rounded-full\">\n                        {isPix ? (\n                          <CreditCard className=\"w-6 h-6 text-orange-600\" />\n                        ) : (\n                          <Building className=\"w-6 h-6 text-orange-600\" />\n                        )}\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-2xl\">R$ {amount.toFixed(2)}</CardTitle>\n                        <CardDescription className=\"flex items-center gap-2 mt-1\">\n                          <Clock className=\"w-4 h-4\" />\n                          {new Date(withdrawal.createdAt).toLocaleString('pt-BR', {\n                            day: '2-digit',\n                            month: '2-digit',\n                            year: 'numeric',\n                            hour: '2-digit',\n                            minute: '2-digit'\n                          })}\n                        </CardDescription>\n                      </div>\n                    </div>\n                    <Button\n                      onClick={() => handleConfirmWithdrawal(withdrawal.id)}\n                      disabled={completeWithdrawalMutation.isPending}\n                      size=\"lg\"\n                      data-testid={`button-confirm-${withdrawal.id}`}\n                    >\n                      {completeWithdrawalMutation.isPending ? \"Processando...\" : \"Confirmar Transferência\"}\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div className=\"p-4 bg-muted rounded-lg\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <UserIcon className=\"w-4 h-4 text-muted-foreground\" />\n                        <h3 className=\"font-semibold\">Mecânico</h3>\n                      </div>\n                      <p className=\"text-lg font-medium\" data-testid={`mechanic-name-${withdrawal.id}`}>\n                        {withdrawal.user.name}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">@{withdrawal.user.username}</p>\n                      <p className=\"text-sm text-muted-foreground\">{withdrawal.user.email}</p>\n                    </div>\n\n                    <div className=\"p-4 bg-muted rounded-lg\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        {isPix ? (\n                          <CreditCard className=\"w-4 h-4 text-muted-foreground\" />\n                        ) : (\n                          <Building className=\"w-4 h-4 text-muted-foreground\" />\n                        )}\n                        <h3 className=\"font-semibold\">Dados para Transferência</h3>\n                      </div>\n                      <p className=\"text-sm font-mono bg-background p-2 rounded border\" data-testid={`withdrawal-details-${withdrawal.id}`}>\n                        {withdrawal.withdrawalDetails}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground mt-2\">\n                        Método: {isPix ? 'PIX' : 'Transferência Bancária'}\n                      </p>\n                    </div>\n                  </div>\n\n                  <Alert>\n                    <AlertDescription className=\"text-sm\">\n                      ⚠️ Após fazer a transferência via {isPix ? 'PIX' : 'TED/DOC'}, clique em \"Confirmar Transferência\" para marcar como concluído.\n                      O mecânico verá o saque como completado no histórico dele.\n                    </AlertDescription>\n                  </Alert>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7493},"client/src/components/client-flow-steps.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useMapsLibrary } from '@vis.gl/react-google-maps';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { MapPin, Wrench, Truck, AlertCircle, CreditCard, QrCode, ArrowLeft } from 'lucide-react';\n\nconst GOOGLE_MAPS_API_KEY = import.meta.env.VITE_GOOGLE_MAPS_API_KEY || '';\n\nexport interface AddressData {\n  address: string;\n  lat: number;\n  lng: number;\n}\n\nexport interface ServiceData {\n  type: string;\n  description: string;\n}\n\nexport interface PaymentData {\n  method: 'card' | 'pix';\n}\n\ninterface AddressStepProps {\n  onNext: (data: AddressData) => void;\n  initialAddress?: string;\n}\n\nexport function AddressStep({ onNext, initialAddress = '' }: AddressStepProps) {\n  const places = useMapsLibrary('places');\n  const inputRef = useRef<HTMLInputElement>(null);\n  const autocompleteRef = useRef<google.maps.places.Autocomplete | null>(null);\n  const [inputValue, setInputValue] = useState(initialAddress);\n  const [selectedPlace, setSelectedPlace] = useState<google.maps.places.PlaceResult | null>(null);\n  const [isGettingLocation, setIsGettingLocation] = useState(false);\n\n  useEffect(() => {\n    if (!places || !inputRef.current) return;\n\n    const options = {\n      componentRestrictions: { country: 'br' },\n      fields: ['formatted_address', 'geometry', 'name', 'address_components'],\n      types: ['address'],\n    };\n\n    autocompleteRef.current = new places.Autocomplete(inputRef.current, options);\n\n    autocompleteRef.current.addListener('place_changed', () => {\n      const place = autocompleteRef.current?.getPlace();\n      if (place?.formatted_address) {\n        setInputValue(place.formatted_address);\n        setSelectedPlace(place);\n      }\n    });\n\n    return () => {\n      if (autocompleteRef.current) {\n        google.maps.event.clearInstanceListeners(autocompleteRef.current);\n      }\n    };\n  }, [places]);\n\n  const getUserLocation = async () => {\n    setIsGettingLocation(true);\n    try {\n      const position = await new Promise<GeolocationPosition>((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject, {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 0,\n        });\n      });\n\n      const { latitude, longitude } = position.coords;\n\n      const response = await fetch(\n        `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=${GOOGLE_MAPS_API_KEY}`\n      );\n      const data = await response.json();\n      \n      if (data.results && data.results[0]) {\n        const address = data.results[0].formatted_address;\n        setInputValue(address);\n        setSelectedPlace({\n          formatted_address: address,\n          geometry: {\n            location: new google.maps.LatLng(latitude, longitude),\n          },\n        } as google.maps.places.PlaceResult);\n      }\n    } catch (error) {\n      console.error('Erro ao obter localização:', error);\n    } finally {\n      setIsGettingLocation(false);\n    }\n  };\n\n  const geocodeAddress = async (addressText: string): Promise<{ lat: number; lng: number } | null> => {\n    if (!GOOGLE_MAPS_API_KEY) return null;\n    \n    try {\n      const response = await fetch(\n        `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(addressText)}&key=${GOOGLE_MAPS_API_KEY}&components=country:BR`\n      );\n      const data = await response.json();\n      \n      if (data.results && data.results.length > 0) {\n        const location = data.results[0].geometry.location;\n        return { lat: location.lat, lng: location.lng };\n      }\n    } catch (error) {\n      console.error('Erro ao geocodificar endereço:', error);\n    }\n    \n    return null;\n  };\n\n  const handleNext = async () => {\n    let lat: number | undefined;\n    let lng: number | undefined;\n\n    if (selectedPlace?.geometry?.location) {\n      lat = selectedPlace.geometry.location.lat();\n      lng = selectedPlace.geometry.location.lng();\n    } else if (inputValue) {\n      const coords = await geocodeAddress(inputValue);\n      if (coords) {\n        lat = coords.lat;\n        lng = coords.lng;\n      }\n    }\n\n    if (lat && lng && inputValue) {\n      onNext({\n        address: inputValue,\n        lat,\n        lng,\n      });\n    }\n  };\n\n  const isValid = inputValue.length > 0;\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <div className=\"flex-1 flex flex-col justify-center p-6 space-y-6\">\n        <div className=\"space-y-2\">\n          <h2 className=\"text-2xl font-semibold\" data-testid=\"text-address-heading\">\n            Para onde você precisa de ajuda?\n          </h2>\n          <p className=\"text-muted-foreground\">\n            Digite o endereço onde você está ou onde precisa de assistência\n          </p>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"relative\">\n            <div className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 rounded-full bg-primary/10 flex items-center justify-center pointer-events-none\">\n              <MapPin className=\"w-3 h-3 text-primary\" />\n            </div>\n            <input\n              ref={inputRef}\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              placeholder=\"Digite um endereço...\"\n              data-testid=\"input-pickup-address\"\n              autoComplete=\"off\"\n              className=\"flex h-14 w-full rounded-lg border border-input bg-background pl-11 pr-3 py-2 text-base shadow-sm transition-colors placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary disabled:cursor-not-allowed disabled:opacity-50\"\n            />\n          </div>\n\n          <Button\n            variant=\"outline\"\n            onClick={getUserLocation}\n            disabled={isGettingLocation}\n            className=\"w-full\"\n            data-testid=\"button-use-current-location\"\n          >\n            <MapPin className=\"w-4 h-4 mr-2\" />\n            {isGettingLocation ? 'Obtendo localização...' : 'Usar localização atual'}\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"p-6 border-t\">\n        <Button\n          onClick={handleNext}\n          disabled={!isValid}\n          className=\"w-full h-12 text-base\"\n          data-testid=\"button-next-from-address\"\n        >\n          Continuar\n        </Button>\n      </div>\n    </div>\n  );\n}\n\ninterface ServiceTypeStepProps {\n  onNext: (data: ServiceData) => void;\n  onBack: () => void;\n}\n\nexport function ServiceTypeStep({ onNext, onBack }: ServiceTypeStepProps) {\n  const [selectedType, setSelectedType] = useState<string>('mechanic');\n  const [description, setDescription] = useState('');\n\n  const serviceTypes = [\n    {\n      id: 'mechanic',\n      icon: Wrench,\n      title: 'Mecânico',\n      subtitle: 'Assistência mecânica no local',\n    },\n    {\n      id: 'tow_truck',\n      icon: Truck,\n      title: 'Guincho',\n      subtitle: 'Reboque do veículo',\n    },\n    {\n      id: 'road_assistance',\n      icon: AlertCircle,\n      title: 'Assistência 24h',\n      subtitle: 'Diversos serviços emergenciais',\n    },\n  ];\n\n  const handleNext = () => {\n    onNext({\n      type: selectedType,\n      description,\n    });\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <div className=\"flex-1 overflow-y-auto p-6 space-y-6\">\n        <div className=\"flex items-center gap-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onBack}\n            data-testid=\"button-back-from-service\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <div className=\"flex-1\">\n            <h2 className=\"text-2xl font-semibold\" data-testid=\"text-service-heading\">\n              Qual serviço você precisa?\n            </h2>\n          </div>\n        </div>\n\n        <div className=\"space-y-3\">\n          {serviceTypes.map((service) => {\n            const Icon = service.icon;\n            const isSelected = selectedType === service.id;\n            \n            return (\n              <Card\n                key={service.id}\n                className={`cursor-pointer transition-all hover-elevate ${\n                  isSelected ? 'border-primary bg-primary/5' : ''\n                }`}\n                onClick={() => setSelectedType(service.id)}\n                data-testid={`card-service-${service.id}`}\n              >\n                <CardContent className=\"flex items-center gap-4 p-4\">\n                  <div className={`w-12 h-12 rounded-full flex items-center justify-center ${\n                    isSelected ? 'bg-primary text-primary-foreground' : 'bg-muted'\n                  }`}>\n                    <Icon className=\"w-6 h-6\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold\">{service.title}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{service.subtitle}</p>\n                  </div>\n                  {isSelected && (\n                    <div className=\"w-6 h-6 rounded-full bg-primary flex items-center justify-center\">\n                      <div className=\"w-2 h-2 rounded-full bg-primary-foreground\" />\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"description\">Descreva o problema (opcional)</Label>\n          <Textarea\n            id=\"description\"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            placeholder=\"Ex: Pneu furado, bateria descarregada, motor não liga...\"\n            rows={3}\n            data-testid=\"textarea-service-description\"\n          />\n        </div>\n      </div>\n\n      <div className=\"p-6 border-t\">\n        <Button\n          onClick={handleNext}\n          className=\"w-full h-12 text-base\"\n          data-testid=\"button-next-from-service\"\n        >\n          Continuar\n        </Button>\n      </div>\n    </div>\n  );\n}\n\ninterface PaymentStepProps {\n  onNext: (data: PaymentData) => void;\n  onBack: () => void;\n  estimatedPrice?: number;\n}\n\nexport function PaymentStep({ onNext, onBack, estimatedPrice }: PaymentStepProps) {\n  const [selectedMethod, setSelectedMethod] = useState<'card' | 'pix'>('pix');\n\n  const paymentMethods = [\n    {\n      id: 'pix' as const,\n      icon: QrCode,\n      title: 'PIX',\n      subtitle: 'Pagamento instantâneo via QR Code',\n      recommended: true,\n    },\n    {\n      id: 'card' as const,\n      icon: CreditCard,\n      title: 'Cartão de Crédito',\n      subtitle: 'Pagamento com cartão',\n      recommended: false,\n    },\n  ];\n\n  const handleNext = () => {\n    onNext({\n      method: selectedMethod,\n    });\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <div className=\"flex-1 overflow-y-auto p-6 space-y-6\">\n        <div className=\"flex items-center gap-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onBack}\n            data-testid=\"button-back-from-payment\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <div className=\"flex-1\">\n            <h2 className=\"text-2xl font-semibold\" data-testid=\"text-payment-heading\">\n              Como você quer pagar?\n            </h2>\n          </div>\n        </div>\n\n        {estimatedPrice && (\n          <Card className=\"bg-muted/30\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Valor estimado</span>\n                <span className=\"text-2xl font-bold\">\n                  R$ {estimatedPrice.toFixed(2)}\n                </span>\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Valor final pode variar baseado na distância\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        <div className=\"space-y-3\">\n          {paymentMethods.map((method) => {\n            const Icon = method.icon;\n            const isSelected = selectedMethod === method.id;\n            \n            return (\n              <Card\n                key={method.id}\n                className={`cursor-pointer transition-all hover-elevate ${\n                  isSelected ? 'border-primary bg-primary/5' : ''\n                }`}\n                onClick={() => setSelectedMethod(method.id)}\n                data-testid={`card-payment-${method.id}`}\n              >\n                <CardContent className=\"flex items-center gap-4 p-4\">\n                  <div className={`w-12 h-12 rounded-full flex items-center justify-center ${\n                    isSelected ? 'bg-primary text-primary-foreground' : 'bg-muted'\n                  }`}>\n                    <Icon className=\"w-6 h-6\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <h3 className=\"font-semibold\">{method.title}</h3>\n                      {method.recommended && (\n                        <span className=\"text-xs bg-green-500/10 text-green-600 dark:text-green-400 px-2 py-0.5 rounded-full\">\n                          Recomendado\n                        </span>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">{method.subtitle}</p>\n                  </div>\n                  {isSelected && (\n                    <div className=\"w-6 h-6 rounded-full bg-primary flex items-center justify-center\">\n                      <div className=\"w-2 h-2 rounded-full bg-primary-foreground\" />\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"text-xs text-muted-foreground space-y-1\">\n          <p>• O pagamento só será processado após a confirmação do serviço</p>\n          <p>• Você pode cancelar gratuitamente antes do mecânico aceitar</p>\n        </div>\n      </div>\n\n      <div className=\"p-6 border-t\">\n        <Button\n          onClick={handleNext}\n          className=\"w-full h-12 text-base\"\n          data-testid=\"button-confirm-request\"\n        >\n          Solicitar Serviço\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14531},"client/src/components/mechanic-home.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useAuth } from '@/lib/auth-context';\nimport { useLocation } from 'wouter';\nimport { Map, AdvancedMarker } from '@vis.gl/react-google-maps';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { useToast } from '@/hooks/use-toast';\nimport { Wrench, Truck, AlertCircle } from 'lucide-react';\nimport { fetchWithAuth } from '@/lib/fetch-with-auth';\n\nexport function MechanicHome() {\n  const { user, token, updateUser } = useAuth();\n  const [, setLocation] = useLocation();\n  const [userLocation, setUserLocation] = useState<{ lat: number; lng: number } | null>(null);\n  const [pendingRequests, setPendingRequests] = useState<any[]>([]);\n  const { toast } = useToast();\n\n  const isOnline = user?.isOnline || false;\n\n  useEffect(() => {\n    const handleWebSocketMessage = (event: any) => {\n      const data = event.detail;\n      \n      if (data.type === 'mechanic_arrived') {\n        toast({\n          title: \"Mecânico chegou!\",\n          description: \"O mecânico chegou no local\",\n        });\n      }\n    };\n\n    window.addEventListener('websocket-message', handleWebSocketMessage);\n    return () => window.removeEventListener('websocket-message', handleWebSocketMessage);\n  }, [user, setLocation, toast]);\n\n  useEffect(() => {\n    if (user?.userType === 'mechanic') {\n      if (user.baseLat && user.baseLng) {\n        setUserLocation({\n          lat: parseFloat(user.baseLat),\n          lng: parseFloat(user.baseLng),\n        });\n      }\n    }\n  }, [user, token]);\n\n  useEffect(() => {\n    if (user?.userType === 'mechanic' && token && isOnline) {\n      loadPendingRequests();\n      const interval = setInterval(loadPendingRequests, 10000);\n      return () => clearInterval(interval);\n    }\n  }, [user, token, isOnline]);\n\n  const loadPendingRequests = async () => {\n    try {\n      const response = await fetchWithAuth('/api/service-requests/pending');\n      if (response.ok) {\n        const data = await response.json();\n        setPendingRequests(data);\n      }\n    } catch (error) {\n      console.error('Error loading requests:', error);\n    }\n  };\n\n  const handleAcceptRequest = async (requestId: string) => {\n    if (user?.baseLat === undefined || user?.baseLat === null || user?.baseLng === undefined || user?.baseLng === null) {\n      toast({\n        title: \"Erro\",\n        description: \"Configure seu endereço base na página de Perfil antes de aceitar chamadas\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const request = pendingRequests.find(r => r.id === requestId);\n      if (!request) return;\n\n      const distance = calculateDistance(\n        parseFloat(user.baseLat),\n        parseFloat(user.baseLng),\n        parseFloat(request.pickupLat),\n        parseFloat(request.pickupLng)\n      );\n\n      const response = await fetchWithAuth(`/api/service-requests/${requestId}/accept`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ distance }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Erro ao aceitar chamada');\n      }\n\n      const acceptedRequest = await response.json();\n\n      toast({\n        title: \"Sucesso\",\n        description: `Chamada aceita! Valor total: R$ ${parseFloat(acceptedRequest.totalPrice).toFixed(2)}`,\n      });\n      \n      setLocation(`/ride/${requestId}`);\n    } catch (error: any) {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  function calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n    const R = 6371;\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const a = \n      Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n      Math.sin(dLon/2) * Math.sin(dLon/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  }\n\n  const handleToggleOnline = async (checked: boolean) => {\n    try {\n      const response = await fetchWithAuth('/api/auth/toggle-online', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ isOnline: checked }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Erro ao alterar status');\n      }\n\n      updateUser({ isOnline: checked });\n      \n      toast({\n        title: checked ? \"Online\" : \"Offline\",\n        description: checked \n          ? \"Você está online e pode receber chamadas\" \n          : \"Você está offline e não receberá chamadas\",\n      });\n\n      if (!checked) {\n        setPendingRequests([]);\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getServiceIcon = (type: string) => {\n    switch (type) {\n      case 'mechanic': return <Wrench className=\"w-4 h-4\" />;\n      case 'tow_truck': return <Truck className=\"w-4 h-4\" />;\n      default: return <AlertCircle className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <div className=\"bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800 p-4 shadow-sm\">\n        <div className=\"container mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className={`w-3 h-3 rounded-full ${isOnline ? 'bg-green-500' : 'bg-gray-400'} ${isOnline ? 'animate-pulse' : ''}`}></div>\n            <span className=\"font-semibold text-gray-900 dark:text-white\">\n              {isOnline ? 'Online' : 'Offline'}\n            </span>\n            <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n              {isOnline ? '• Recebendo chamadas' : '• Não receberá chamadas'}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Label htmlFor=\"online-toggle\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n              {isOnline ? 'Ficar Offline' : 'Ficar Online'}\n            </Label>\n            <Switch\n              id=\"online-toggle\"\n              checked={isOnline}\n              onCheckedChange={handleToggleOnline}\n              data-testid=\"switch-online-status\"\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"flex-1 relative\">\n        <Map\n          mapId=\"service-map\"\n          defaultZoom={15}\n          defaultCenter={userLocation || { lat: -23.5505, lng: -46.6333 }}\n          center={userLocation || { lat: -23.5505, lng: -46.6333 }}\n          gestureHandling=\"greedy\"\n          disableDefaultUI={false}\n          zoomControl={true}\n          fullscreenControl={false}\n          streetViewControl={false}\n          mapTypeControl={false}\n          mapTypeId=\"roadmap\"\n          style={{ width: '100%', height: '100%' }}\n          data-testid=\"map-container\"\n        >\n          {userLocation && (\n            <AdvancedMarker \n              position={userLocation}\n              title=\"Seu endereço base\"\n            >\n              <div className=\"relative\">\n                <div className=\"w-12 h-12 bg-black dark:bg-white rounded-full shadow-2xl flex items-center justify-center border-4 border-white dark:border-black\">\n                  <div className=\"w-3 h-3 bg-white dark:bg-black rounded-full\"></div>\n                </div>\n                <div className=\"absolute -bottom-1 left-1/2 -translate-x-1/2 w-0 h-0 border-l-[6px] border-l-transparent border-r-[6px] border-r-transparent border-t-[8px] border-t-black dark:border-t-white\"></div>\n              </div>\n            </AdvancedMarker>\n          )}\n          \n          {pendingRequests.map((request) => (\n            <AdvancedMarker\n              key={request.id}\n              position={{\n                lat: parseFloat(request.pickupLat),\n                lng: parseFloat(request.pickupLng),\n              }}\n              title={`Chamada - ${request.serviceType}`}\n            >\n              <div className=\"relative animate-pulse\">\n                <div className=\"w-10 h-10 bg-red-500 rounded-full shadow-xl flex items-center justify-center border-2 border-white\">\n                  <AlertCircle className=\"w-5 h-5 text-white\" />\n                </div>\n                <div className=\"absolute inset-0 w-10 h-10 bg-red-500 rounded-full animate-ping opacity-75\"></div>\n              </div>\n            </AdvancedMarker>\n          ))}\n        </Map>\n\n        {isOnline && pendingRequests.length > 0 && (\n          <div className=\"absolute top-4 right-4 z-10 space-y-2 max-w-sm\">\n            {pendingRequests.map((request) => (\n              <Card key={request.id} data-testid={`card-request-${request.id}`}>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">\n                    Nova Chamada\n                  </CardTitle>\n                  {getServiceIcon(request.serviceType)}\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    {request.pickupAddress}\n                  </p>\n                  {request.description && (\n                    <p className=\"text-sm mb-2\">{request.description}</p>\n                  )}\n                  {userLocation && (\n                    <p className=\"text-xs text-muted-foreground mb-2\">\n                      Distância: ~{calculateDistance(\n                        userLocation.lat,\n                        userLocation.lng,\n                        parseFloat(request.pickupLat),\n                        parseFloat(request.pickupLng)\n                      ).toFixed(1)} km\n                    </p>\n                  )}\n                  <Button\n                    onClick={() => handleAcceptRequest(request.id)}\n                    className=\"w-full\"\n                    size=\"sm\"\n                    data-testid={`button-accept-${request.id}`}\n                  >\n                    Aceitar Chamada\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":10543}},"version":1}